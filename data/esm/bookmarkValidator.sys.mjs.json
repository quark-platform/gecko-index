[
  {
    "type": "class",
    "id": "BookmarkProblemData",
    "line": 122,
    "methods": [
      {
        "type": "method",
        "id": "constructor",
        "line": 123,
        "params": [],
        "kind": "constructor"
      },
      {
        "type": "method",
        "id": "_summarizeDifferences",
        "line": 153,
        "params": [
          {
            "type": "params",
            "id": "prefix",
            "line": 153
          },
          {
            "type": "params",
            "id": "diffs",
            "line": 153
          }
        ],
        "comments": [
          {
            "description": "Convert (\"difference\", [{ differences: [\"tags\", \"name\"] }, { differences: [\"name\"] }]) into [{ name: \"difference:tags\", count: 1}, { name: \"difference:name\", count: 2 }], etc.",
            "tags": [],
            "source": [
              {
                "number": 0,
                "source": "/**",
                "tokens": {
                  "start": "",
                  "delimiter": "/**",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 1,
                "source": "*",
                "tokens": {
                  "start": "",
                  "delimiter": "*",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 2,
                "source": "   * Convert (\"difference\", [{ differences: [\"tags\", \"name\"] }, { differences: [\"name\"] }]) into",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": " ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "Convert (\"difference\", [{ differences: [\"tags\", \"name\"] }, { differences: [\"name\"] }]) into",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 3,
                "source": "   * [{ name: \"difference:tags\", count: 1}, { name: \"difference:name\", count: 2 }], etc.",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": " ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "[{ name: \"difference:tags\", count: 1}, { name: \"difference:name\", count: 2 }], etc.",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 4,
                "source": "   ",
                "tokens": {
                  "start": "   ",
                  "delimiter": "",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 5,
                "source": "*/",
                "tokens": {
                  "start": "",
                  "delimiter": "",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "*/",
                  "lineEnd": ""
                }
              }
            ],
            "problems": []
          }
        ],
        "kind": "method"
      },
      {
        "type": "method",
        "id": "getSummary",
        "line": 176,
        "params": [
          {
            "type": "params",
            "id": "full",
            "line": 176
          }
        ],
        "comments": [
          {
            "description": "Produce a list summarizing problems found. Each entry contains {name, count}, where name is the field name for the problem, and count is the number of times the problem was encountered. Validation has failed if all counts are not 0. If the `full` argument is truthy, we also include information about which properties we saw structural differences in. Currently, this means either \"sdiff:parentid\" and \"sdiff:childGUIDS\" may be present.",
            "tags": [],
            "source": [
              {
                "number": 0,
                "source": "/**",
                "tokens": {
                  "start": "",
                  "delimiter": "/**",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 1,
                "source": "*",
                "tokens": {
                  "start": "",
                  "delimiter": "*",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 2,
                "source": "   * Produce a list summarizing problems found. Each entry contains {name, count},",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": " ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "Produce a list summarizing problems found. Each entry contains {name, count},",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 3,
                "source": "   * where name is the field name for the problem, and count is the number of times",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": " ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "where name is the field name for the problem, and count is the number of times",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 4,
                "source": "   * the problem was encountered.",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": " ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "the problem was encountered.",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 5,
                "source": "   *",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 6,
                "source": "   * Validation has failed if all counts are not 0.",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": " ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "Validation has failed if all counts are not 0.",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 7,
                "source": "   *",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 8,
                "source": "   * If the `full` argument is truthy, we also include information about which",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": " ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "If the `full` argument is truthy, we also include information about which",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 9,
                "source": "   * properties we saw structural differences in. Currently, this means either",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": " ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "properties we saw structural differences in. Currently, this means either",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 10,
                "source": "   * \"sdiff:parentid\" and \"sdiff:childGUIDS\" may be present.",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": " ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "\"sdiff:parentid\" and \"sdiff:childGUIDS\" may be present.",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 11,
                "source": "   ",
                "tokens": {
                  "start": "   ",
                  "delimiter": "",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 12,
                "source": "*/",
                "tokens": {
                  "start": "",
                  "delimiter": "",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "*/",
                  "lineEnd": ""
                }
              }
            ],
            "problems": []
          }
        ],
        "kind": "method"
      }
    ]
  },
  {
    "type": "class",
    "id": "BookmarkValidator",
    "line": 649,
    "methods": [
      {
        "type": "method",
        "id": "constructor",
        "line": 650,
        "params": [],
        "kind": "constructor"
      },
      {
        "type": "method",
        "id": "canValidate",
        "line": 654,
        "params": [],
        "kind": "method"
      },
      {
        "type": "method",
        "id": "_followQueries",
        "line": 658,
        "params": [
          {
            "type": "params",
            "id": "recordsByQueryId",
            "line": 658
          }
        ],
        "kind": "method"
      },
      {
        "type": "method",
        "id": "createClientRecordsFromTree",
        "line": 691,
        "params": [
          {
            "type": "params",
            "id": "clientTree",
            "line": 691
          }
        ],
        "kind": "method"
      },
      {
        "type": "method",
        "id": "inspectServerRecords",
        "line": 811,
        "params": [
          {
            "type": "params",
            "id": "serverRecords",
            "line": 811
          }
        ],
        "comments": [
          {
            "description": "Process the server-side list. Mainly this builds the records into a tree, but it also records information about problems, and produces arrays of the deleted and non-deleted nodes. Returns an object containing: - records:Array of non-deleted records. Each record contains the following properties - childGUIDs (array of strings, only present if type is 'folder'): the list of child GUIDs stored on the server. - children (array of records, only present if type is 'folder'): each record has these same properties. This may differ in content from what you may expect from the childGUIDs list, as it won't contain any records that could not be found. - parent (record): The parent to this record. - Unchanged properties send down from the server: id, title, type, parentName, parentid, bmkURI, keyword, tags, pos, queryId - root: Root of the server-side bookmark tree. Has the same properties as above. - deletedRecords: As above, but only contains items that the server sent where it also sent indication that the item should be deleted. - problemData: a BookmarkProblemData object, with the caveat that the fields describing client/server relationship will not have been filled out yet.",
            "tags": [],
            "source": [
              {
                "number": 0,
                "source": "/**",
                "tokens": {
                  "start": "",
                  "delimiter": "/**",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 1,
                "source": "*",
                "tokens": {
                  "start": "",
                  "delimiter": "*",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 2,
                "source": "   * Process the server-side list. Mainly this builds the records into a tree,",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": " ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "Process the server-side list. Mainly this builds the records into a tree,",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 3,
                "source": "   * but it also records information about problems, and produces arrays of the",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": " ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "but it also records information about problems, and produces arrays of the",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 4,
                "source": "   * deleted and non-deleted nodes.",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": " ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "deleted and non-deleted nodes.",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 5,
                "source": "   *",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 6,
                "source": "   * Returns an object containing:",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": " ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "Returns an object containing:",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 7,
                "source": "   * - records:Array of non-deleted records. Each record contains the following",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": " ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "- records:Array of non-deleted records. Each record contains the following",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 8,
                "source": "   *    properties",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": "    ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "properties",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 9,
                "source": "   *     - childGUIDs (array of strings, only present if type is 'folder'): the",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": "     ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "- childGUIDs (array of strings, only present if type is 'folder'): the",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 10,
                "source": "   *       list of child GUIDs stored on the server.",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": "       ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "list of child GUIDs stored on the server.",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 11,
                "source": "   *     - children (array of records, only present if type is 'folder'):",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": "     ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "- children (array of records, only present if type is 'folder'):",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 12,
                "source": "   *       each record has these same properties. This may differ in content",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": "       ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "each record has these same properties. This may differ in content",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 13,
                "source": "   *       from what you may expect from the childGUIDs list, as it won't",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": "       ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "from what you may expect from the childGUIDs list, as it won't",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 14,
                "source": "   *       contain any records that could not be found.",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": "       ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "contain any records that could not be found.",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 15,
                "source": "   *     - parent (record): The parent to this record.",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": "     ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "- parent (record): The parent to this record.",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 16,
                "source": "   *     - Unchanged properties send down from the server: id, title, type,",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": "     ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "- Unchanged properties send down from the server: id, title, type,",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 17,
                "source": "   *       parentName, parentid, bmkURI, keyword, tags, pos, queryId",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": "       ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "parentName, parentid, bmkURI, keyword, tags, pos, queryId",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 18,
                "source": "   * - root: Root of the server-side bookmark tree. Has the same properties as",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": " ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "- root: Root of the server-side bookmark tree. Has the same properties as",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 19,
                "source": "   *   above.",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": "   ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "above.",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 20,
                "source": "   * - deletedRecords: As above, but only contains items that the server sent",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": " ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "- deletedRecords: As above, but only contains items that the server sent",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 21,
                "source": "   *   where it also sent indication that the item should be deleted.",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": "   ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "where it also sent indication that the item should be deleted.",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 22,
                "source": "   * - problemData: a BookmarkProblemData object, with the caveat that",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": " ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "- problemData: a BookmarkProblemData object, with the caveat that",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 23,
                "source": "   *   the fields describing client/server relationship will not have been filled",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": "   ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "the fields describing client/server relationship will not have been filled",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 24,
                "source": "   *   out yet.",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": "   ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "out yet.",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 25,
                "source": "   ",
                "tokens": {
                  "start": "   ",
                  "delimiter": "",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 26,
                "source": "*/",
                "tokens": {
                  "start": "",
                  "delimiter": "",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "*/",
                  "lineEnd": ""
                }
              }
            ],
            "problems": []
          }
        ],
        "kind": "method"
      },
      {
        "type": "method",
        "id": "_validateClient",
        "line": 822,
        "params": [
          {
            "type": "params",
            "id": "problemData",
            "line": 822
          },
          {
            "type": "params",
            "id": "clientRecords",
            "line": 822
          }
        ],
        "comments": [
          {
            "description": "Perform client-side sanity checking that doesn't involve server data",
            "tags": [],
            "source": [
              {
                "number": 0,
                "source": "/**",
                "tokens": {
                  "start": "",
                  "delimiter": "/**",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 1,
                "source": " Perform client-side sanity checking that doesn't involve server data",
                "tokens": {
                  "start": " ",
                  "delimiter": "",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "Perform client-side sanity checking that doesn't involve server data",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 2,
                "source": "*/",
                "tokens": {
                  "start": "",
                  "delimiter": "",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "*/",
                  "lineEnd": ""
                }
              }
            ],
            "problems": []
          }
        ],
        "kind": "method"
      },
      {
        "type": "method",
        "id": "_computeUnifiedRecordMap",
        "line": 832,
        "params": [
          {
            "type": "params",
            "id": "serverRecords",
            "line": 832
          },
          {
            "type": "params",
            "id": "clientRecords",
            "line": 832
          }
        ],
        "kind": "method"
      },
      {
        "type": "method",
        "id": "_recordMissing",
        "line": 861,
        "params": [
          {
            "type": "params",
            "id": "problems",
            "line": 861
          },
          {
            "type": "params",
            "id": "id",
            "line": 861
          },
          {
            "type": "params",
            "id": "clientRecord",
            "line": 861
          },
          {
            "type": "params",
            "id": "serverRecord",
            "line": 861
          },
          {
            "type": "params",
            "id": "serverTombstones",
            "line": 861
          }
        ],
        "kind": "method"
      },
      {
        "type": "method",
        "id": "_compareRecords",
        "line": 874,
        "params": [
          {
            "type": "params",
            "id": "client",
            "line": 874
          },
          {
            "type": "params",
            "id": "server",
            "line": 874
          }
        ],
        "kind": "method"
      },
      {
        "type": "method",
        "id": "compareServerWithClient",
        "line": 966,
        "params": [
          {
            "type": "params",
            "id": "serverRecords",
            "line": 966
          },
          {
            "type": "params",
            "id": "clientTree",
            "line": 966
          }
        ],
        "comments": [
          {
            "description": "Compare the list of server records with the client tree. Returns the same data as described in the inspectServerRecords comment, with the following additional fields. - clientRecords: an array of client records in a similar format to the .records (ie, server records) entry. - problemData is the same as for inspectServerRecords, except all properties will be filled out.",
            "tags": [],
            "source": [
              {
                "number": 0,
                "source": "/**",
                "tokens": {
                  "start": "",
                  "delimiter": "/**",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 1,
                "source": "*",
                "tokens": {
                  "start": "",
                  "delimiter": "*",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 2,
                "source": "   * Compare the list of server records with the client tree.",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": " ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "Compare the list of server records with the client tree.",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 3,
                "source": "   *",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 4,
                "source": "   * Returns the same data as described in the inspectServerRecords comment,",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": " ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "Returns the same data as described in the inspectServerRecords comment,",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 5,
                "source": "   * with the following additional fields.",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": " ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "with the following additional fields.",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 6,
                "source": "   * - clientRecords: an array of client records in a similar format to",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": " ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "- clientRecords: an array of client records in a similar format to",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 7,
                "source": "   *   the .records (ie, server records) entry.",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": "   ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "the .records (ie, server records) entry.",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 8,
                "source": "   * - problemData is the same as for inspectServerRecords, except all properties",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": " ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "- problemData is the same as for inspectServerRecords, except all properties",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 9,
                "source": "   *   will be filled out.",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": "   ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "will be filled out.",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 10,
                "source": "   ",
                "tokens": {
                  "start": "   ",
                  "delimiter": "",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 11,
                "source": "*/",
                "tokens": {
                  "start": "",
                  "delimiter": "",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "*/",
                  "lineEnd": ""
                }
              }
            ],
            "problems": []
          }
        ],
        "kind": "method"
      },
      {
        "type": "method",
        "id": "_getServerState",
        "line": 1015,
        "params": [
          {
            "type": "params",
            "id": "engine",
            "line": 1015
          }
        ],
        "kind": "method"
      },
      {
        "type": "method",
        "id": "validate",
        "line": 1037,
        "params": [
          {
            "type": "params",
            "id": "engine",
            "line": 1037
          }
        ],
        "kind": "method"
      }
    ]
  }
]