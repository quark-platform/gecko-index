[
  {
    "type": "variable-declaration",
    "id": "TestRunner",
    "line": 20,
    "typeEstimation": {
      "type": "object-estimation",
      "keys": [
        {
          "type": "object-property",
          "line": 21,
          "id": "combos"
        },
        {
          "type": "object-property",
          "line": 22,
          "id": "completedCombos",
          "typeEstimation": {
            "type": "number-estimation",
            "defaultValue": 0
          }
        },
        {
          "type": "object-property",
          "line": 23,
          "id": "currentComboIndex",
          "typeEstimation": {
            "type": "number-estimation",
            "defaultValue": 0
          }
        },
        {
          "type": "object-property",
          "line": 24,
          "id": "_lastCombo"
        },
        {
          "type": "object-property",
          "line": 25,
          "id": "_libDir"
        },
        {
          "type": "object-property",
          "line": 26,
          "id": "croppingPadding",
          "typeEstimation": {
            "type": "number-estimation",
            "defaultValue": 0
          }
        },
        {
          "type": "object-property",
          "line": 27,
          "id": "mochitestScope"
        },
        {
          "type": "object-method",
          "line": 29,
          "id": "init",
          "kind": "method",
          "params": [
            "extensionPath"
          ]
        },
        {
          "type": "object-method",
          "line": 40,
          "id": "initTest",
          "comments": [
            {
              "description": "Initialize the mochitest interface. This allows TestRunner to integrate with mochitest functions like is(...) and ok(...). This must be called prior to invoking any of the TestRunner functions. Note that this should be properly setup in head.js, so you probably don't need to call it.",
              "tags": [],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Initialize the mochitest interface. This allows TestRunner to integrate",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Initialize the mochitest interface. This allows TestRunner to integrate",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * with mochitest functions like is(...) and ok(...). This must be called",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "with mochitest functions like is(...) and ok(...). This must be called",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * prior to invoking any of the TestRunner functions. Note that this should",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "prior to invoking any of the TestRunner functions. Note that this should",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   * be properly setup in head.js, so you probably don't need to call it.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "be properly setup in head.js, so you probably don't need to call it.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "mochitestScope"
          ]
        },
        {
          "type": "object-method",
          "line": 44,
          "id": "setupOS",
          "kind": "method",
          "params": []
        },
        {
          "type": "object-method",
          "line": 53,
          "id": "disableNotificationCenter",
          "kind": "method",
          "params": []
        },
        {
          "type": "object-method",
          "line": 74,
          "id": "start",
          "comments": [
            {
              "description": "Load specified sets, execute all combinations of them, and capture screenshots.",
              "tags": [],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Load specified sets, execute all combinations of them, and capture screenshots.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Load specified sets, execute all combinations of them, and capture screenshots.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "setNames",
            "jobName"
          ]
        },
        {
          "type": "object-method",
          "line": 162,
          "id": "filterRestrictions",
          "comments": [
            {
              "description": "Helper function for loadSets. This filters out the restricted configs from setName. This was made a helper function to facilitate xpcshell unit testing.",
              "tags": [
                {
                  "tag": "param",
                  "name": "setName",
                  "type": "String",
                  "optional": false,
                  "description": "- set name to be filtered e.g. \"Toolbars[onlyNavBar,allToolbars]\"",
                  "problems": [],
                  "source": [
                    {
                      "number": 4,
                      "source": "   * @param {String} setName - set name to be filtered e.g. \"Toolbars[onlyNavBar,allToolbars]\"",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "setName",
                        "postName": " ",
                        "type": "{String}",
                        "postType": " ",
                        "description": "- set name to be filtered e.g. \"Toolbars[onlyNavBar,allToolbars]\"",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "return",
                  "name": "Returns",
                  "type": "Object",
                  "optional": false,
                  "description": "an object with two values: the filtered set name and a set of restricted configs.",
                  "problems": [],
                  "source": [
                    {
                      "number": 5,
                      "source": "   * @return {Object} Returns an object with two values: the filtered set name and a set of",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@return",
                        "postTag": " ",
                        "name": "Returns",
                        "postName": " ",
                        "type": "{Object}",
                        "postType": " ",
                        "description": "an object with two values: the filtered set name and a set of",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 6,
                      "source": "   *                  restricted configs.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                  ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "restricted configs.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 7,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 8,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Helper function for loadSets. This filters out the restricted configs from setName.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Helper function for loadSets. This filters out the restricted configs from setName.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * This was made a helper function to facilitate xpcshell unit testing.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "This was made a helper function to facilitate xpcshell unit testing.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * @param {String} setName - set name to be filtered e.g. \"Toolbars[onlyNavBar,allToolbars]\"",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "setName",
                    "postName": " ",
                    "type": "{String}",
                    "postType": " ",
                    "description": "- set name to be filtered e.g. \"Toolbars[onlyNavBar,allToolbars]\"",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   * @return {Object} Returns an object with two values: the filtered set name and a set of",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@return",
                    "postTag": " ",
                    "name": "Returns",
                    "postName": " ",
                    "type": "{Object}",
                    "postType": " ",
                    "description": "an object with two values: the filtered set name and a set of",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   *                  restricted configs.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "restricted configs.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 8,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "setName"
          ]
        },
        {
          "type": "object-method",
          "line": 181,
          "id": "loadSets",
          "comments": [
            {
              "description": "Load sets of configurations from JSMs.",
              "tags": [
                {
                  "tag": "param",
                  "name": "setNames",
                  "type": "String[]",
                  "optional": false,
                  "description": "- array of set names (e.g. [\"Tabs\", \"WindowSize\"].",
                  "problems": [],
                  "source": [
                    {
                      "number": 3,
                      "source": "   * @param {String[]} setNames - array of set names (e.g. [\"Tabs\", \"WindowSize\"].",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "setNames",
                        "postName": " ",
                        "type": "{String[]}",
                        "postType": " ",
                        "description": "- array of set names (e.g. [\"Tabs\", \"WindowSize\"].",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "return",
                  "name": "Array",
                  "type": "Object[]",
                  "optional": false,
                  "description": "of sets containing `name` and `configurations` properties.",
                  "problems": [],
                  "source": [
                    {
                      "number": 4,
                      "source": "   * @return {Object[]} Array of sets containing `name` and `configurations` properties.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@return",
                        "postTag": " ",
                        "name": "Array",
                        "postName": " ",
                        "type": "{Object[]}",
                        "postType": " ",
                        "description": "of sets containing `name` and `configurations` properties.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 5,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 6,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Load sets of configurations from JSMs.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Load sets of configurations from JSMs.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * @param {String[]} setNames - array of set names (e.g. [\"Tabs\", \"WindowSize\"].",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "setNames",
                    "postName": " ",
                    "type": "{String[]}",
                    "postType": " ",
                    "description": "- array of set names (e.g. [\"Tabs\", \"WindowSize\"].",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * @return {Object[]} Array of sets containing `name` and `configurations` properties.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@return",
                    "postTag": " ",
                    "name": "Array",
                    "postName": " ",
                    "type": "{Object[]}",
                    "postType": " ",
                    "description": "of sets containing `name` and `configurations` properties.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "setNames"
          ]
        },
        {
          "type": "object-method",
          "line": 224,
          "id": "cleanup",
          "kind": "method",
          "params": []
        },
        {
          "type": "object-method",
          "line": 249,
          "id": "_findBoundingBox",
          "comments": [
            {
              "description": "helpers",
              "tags": [],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": " helpers",
                  "tokens": {
                    "start": " ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "helpers",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            },
            {
              "description": "Calculate the bounding box based on CSS selector from config for cropping",
              "tags": [
                {
                  "tag": "param",
                  "name": "selectors",
                  "type": "String[]",
                  "optional": false,
                  "description": "- array of CSS selectors for relevant DOM element",
                  "problems": [],
                  "source": [
                    {
                      "number": 4,
                      "source": "   * @param {String[]} selectors - array of CSS selectors for relevant DOM element",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "selectors",
                        "postName": " ",
                        "type": "{String[]}",
                        "postType": " ",
                        "description": "- array of CSS selectors for relevant DOM element",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "return",
                  "name": "Rect",
                  "type": "Geometry.sys.mjs Rect",
                  "optional": false,
                  "description": "holding relevant x, y, width, height with padding",
                  "problems": [],
                  "source": [
                    {
                      "number": 5,
                      "source": "   * @return {Geometry.sys.mjs Rect} Rect holding relevant x, y, width, height with padding",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@return",
                        "postTag": " ",
                        "name": "Rect",
                        "postName": " ",
                        "type": "{Geometry.sys.mjs Rect}",
                        "postType": " ",
                        "description": "holding relevant x, y, width, height with padding",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 6,
                      "source": "   *",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 7,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Calculate the bounding box based on CSS selector from config for cropping",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Calculate the bounding box based on CSS selector from config for cropping",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * @param {String[]} selectors - array of CSS selectors for relevant DOM element",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "selectors",
                    "postName": " ",
                    "type": "{String[]}",
                    "postType": " ",
                    "description": "- array of CSS selectors for relevant DOM element",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   * @return {Geometry.sys.mjs Rect} Rect holding relevant x, y, width, height with padding",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@return",
                    "postTag": " ",
                    "name": "Rect",
                    "postName": " ",
                    "type": "{Geometry.sys.mjs Rect}",
                    "postType": " ",
                    "description": "holding relevant x, y, width, height with padding",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "selectors",
            "windowType"
          ]
        },
        {
          "type": "object-method",
          "line": 327,
          "id": "_do_skip",
          "kind": "method",
          "params": [
            "reason",
            "combo",
            "config",
            "func"
          ]
        },
        {
          "type": "object-method",
          "line": 345,
          "id": "_performCombo",
          "kind": "method",
          "params": [
            "combo"
          ]
        },
        {
          "type": "object-method",
          "line": 461,
          "id": "_onConfigurationReady",
          "kind": "method",
          "params": [
            "combo",
            "bounds",
            "rects"
          ]
        },
        {
          "type": "object-method",
          "line": 483,
          "id": "_comboName",
          "kind": "method",
          "params": [
            "combo"
          ]
        },
        {
          "type": "object-method",
          "line": 489,
          "id": "_cropImage",
          "kind": "method",
          "params": [
            "window",
            "srcPath",
            "bounds",
            "rects",
            "targetPath"
          ]
        },
        {
          "type": "object-method",
          "line": 570,
          "id": "findComma",
          "comments": [
            {
              "description": "Finds the index of the first comma that is not enclosed within square brackets.",
              "tags": [
                {
                  "tag": "param",
                  "name": "envVar",
                  "type": "String",
                  "optional": false,
                  "description": "- the string that needs to be searched",
                  "problems": [],
                  "source": [
                    {
                      "number": 3,
                      "source": "   * @param {String} envVar - the string that needs to be searched",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "envVar",
                        "postName": " ",
                        "type": "{String}",
                        "postType": " ",
                        "description": "- the string that needs to be searched",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "return",
                  "name": "index",
                  "type": "Integer",
                  "optional": false,
                  "description": "of valid comma or -1 if not found.",
                  "problems": [],
                  "source": [
                    {
                      "number": 4,
                      "source": "   * @return {Integer} index of valid comma or -1 if not found.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@return",
                        "postTag": " ",
                        "name": "index",
                        "postName": " ",
                        "type": "{Integer}",
                        "postType": " ",
                        "description": "of valid comma or -1 if not found.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 5,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 6,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Finds the index of the first comma that is not enclosed within square brackets.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Finds the index of the first comma that is not enclosed within square brackets.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * @param {String} envVar - the string that needs to be searched",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "envVar",
                    "postName": " ",
                    "type": "{String}",
                    "postType": " ",
                    "description": "- the string that needs to be searched",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * @return {Integer} index of valid comma or -1 if not found.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@return",
                    "postTag": " ",
                    "name": "index",
                    "postName": " ",
                    "type": "{Integer}",
                    "postType": " ",
                    "description": "of valid comma or -1 if not found.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "envVar"
          ]
        },
        {
          "type": "object-method",
          "line": 591,
          "id": "splitEnv",
          "comments": [
            {
              "description": "Splits the environment variable around commas not enclosed in brackets.",
              "tags": [
                {
                  "tag": "param",
                  "name": "envVar",
                  "type": "String",
                  "optional": false,
                  "description": "- The environment variable",
                  "problems": [],
                  "source": [
                    {
                      "number": 3,
                      "source": "   * @param {String} envVar - The environment variable",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "envVar",
                        "postName": " ",
                        "type": "{String}",
                        "postType": " ",
                        "description": "- The environment variable",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "return",
                  "name": "Array",
                  "type": "String[]",
                  "optional": false,
                  "description": "of strings containing the configurations e.g. [\"Toolbars[onlyNavBar,allToolbars]\",\"DevTools[jsdebugger,webconsole]\",\"Tabs\"]",
                  "problems": [],
                  "source": [
                    {
                      "number": 4,
                      "source": "   * @return {String[]} Array of strings containing the configurations",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@return",
                        "postTag": " ",
                        "name": "Array",
                        "postName": " ",
                        "type": "{String[]}",
                        "postType": " ",
                        "description": "of strings containing the configurations",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 5,
                      "source": "   * e.g. [\"Toolbars[onlyNavBar,allToolbars]\",\"DevTools[jsdebugger,webconsole]\",\"Tabs\"]",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "e.g. [\"Toolbars[onlyNavBar,allToolbars]\",\"DevTools[jsdebugger,webconsole]\",\"Tabs\"]",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 6,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 7,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Splits the environment variable around commas not enclosed in brackets.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Splits the environment variable around commas not enclosed in brackets.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * @param {String} envVar - The environment variable",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "envVar",
                    "postName": " ",
                    "type": "{String}",
                    "postType": " ",
                    "description": "- The environment variable",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * @return {String[]} Array of strings containing the configurations",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@return",
                    "postTag": " ",
                    "name": "Array",
                    "postName": " ",
                    "type": "{String[]}",
                    "postType": " ",
                    "description": "of strings containing the configurations",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   * e.g. [\"Toolbars[onlyNavBar,allToolbars]\",\"DevTools[jsdebugger,webconsole]\",\"Tabs\"]",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "e.g. [\"Toolbars[onlyNavBar,allToolbars]\",\"DevTools[jsdebugger,webconsole]\",\"Tabs\"]",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "envVar"
          ]
        }
      ]
    }
  }
]