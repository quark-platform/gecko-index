export const TabsSetupFlowManager: {
    QueryInterface: any;
    setupState: Map<any, any>;
    _currentSetupStateName: string;
    syncIsConnected: any;
    didFxaTabOpen: boolean;
    _lastFxASignedIn: any;
    resetInternalState(): void;
    _shouldShowSuccessConfirmation: boolean;
    _didShowMobilePromo: boolean;
    _deviceStateSnapshot: any;
    _viewVisibilityStates: Map<any, any>;
    readonly isPrimaryPasswordLocked: any;
    uninit(): void;
    readonly hasVisibleViews: any;
    readonly currentSetupState: any;
    readonly isTabSyncSetupComplete: boolean;
    readonly uiStateIndex: any;
    readonly fxaSignedIn: any;
    readonly secondaryDeviceConnected: boolean;
    readonly mobileDeviceConnected: boolean;
    readonly shouldShowMobilePromo: boolean;
    readonly shouldShowMobileConnectedSuccess: boolean;
    readonly logger: any;
    _log: any;
    registerSetupState(state: any): void;
    observe(subject: any, topic: any, data: any): Promise<void>;
    _deviceAddedResultsNeverSeen: boolean;
    _waitingForNextTabSync: boolean;
    updateViewVisibility(instanceId: any, visibility: any): Promise<void>;
    readonly waitingForTabs: boolean;
    abortWaitingForTabs(): void;
    _noTabsVisibleFromAddedDeviceTimestamp: number;
    startWaitingForTabs(): void;
    stopWaitingForTabs(): Promise<void>;
    onSignedInChange(): Promise<void>;
    startWaitingForNewDeviceTabs(): Promise<void>;
    stopWaitingForNewDeviceTabs(): Promise<void>;
    refreshDevices(): Promise<{
        deviceStateChanged: boolean;
        deviceAdded: boolean;
    }>;
    maybeUpdateUI(forceUpdate?: boolean): Promise<void>;
    dismissMobilePromo(): void;
    dismissMobileConfirmation(): void;
    openFxASignup(window: any): Promise<void>;
    openFxAPairDevice(window: any): Promise<void>;
    syncOpenTabs(containerElem: any): void;
    syncOnPageReload(): Promise<void>;
    tryToClearError(): void;
    syncTabs(force?: boolean): any;
};
