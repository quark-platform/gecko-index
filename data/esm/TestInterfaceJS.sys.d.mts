export function TestInterfaceJS(): void;
export class TestInterfaceJS {
    QueryInterface: MozQueryInterface;
    init(win: any): void;
    _win: any;
    __init(anyArg: any, objectArg: any, dictionaryArg: any): void;
    _anyAttr: any;
    _objectAttr: any;
    _anyArg: any;
    _objectArg: any;
    _dictionaryArg: any;
    get anyArg(): any;
    get objectArg(): any;
    getDictionaryArg(): any;
    set anyAttr(val: any);
    get anyAttr(): any;
    set objectAttr(val: any);
    get objectAttr(): any;
    getDictionaryAttr(): any;
    setDictionaryAttr(val: any): void;
    _dictionaryAttr: any;
    pingPongAny(any: any): any;
    pingPongObject(obj: any): any;
    pingPongObjectOrString(objectOrString: any): any;
    pingPongDictionary(dict: any): any;
    pingPongDictionaryOrLong(dictOrLong: any): any;
    pingPongRecord(rec: any): string;
    objectSequenceLength(seq: any): any;
    anySequenceLength(seq: any): any;
    getCallerPrincipal(): any;
    convertSVS(svs: any): any;
    pingPongUnion(x: any): any;
    pingPongUnionContainingNull(x: any): any;
    pingPongNullableUnion(x: any): any;
    returnBadUnion(x: any): number;
    testSequenceOverload(arg: any): void;
    testSequenceUnion(arg: any): void;
    testThrowError(): never;
    testThrowDOMException(): never;
    testThrowTypeError(): never;
    testThrowNsresult(): never;
    testThrowNsresultFromNative(x: any): void;
    testThrowCallbackError(callback: any): void;
    testThrowXraySelfHosted(): void;
    testThrowSelfHosted(): void;
    testPromiseWithThrowingChromePromiseInit(): any;
    testPromiseWithThrowingContentPromiseInit(func: any): any;
    testPromiseWithDOMExceptionThrowingPromiseInit(): any;
    testPromiseWithThrowingChromeThenFunction(): any;
    testPromiseWithThrowingContentThenFunction(func: any): any;
    testPromiseWithDOMExceptionThrowingThenFunction(): any;
    testPromiseWithThrowingChromeThenable(): any;
    testPromiseWithThrowingContentThenable(thenable: any): any;
    testPromiseWithDOMExceptionThrowingThenable(): any;
    set onsomething(val: any);
    get onsomething(): any;
}
