[
  {
    "type": "variable-declaration",
    "id": "GeckoViewUtils",
    "line": 64,
    "typeEstimation": {
      "type": "object-estimation",
      "keys": [
        {
          "type": "object-method",
          "line": 84,
          "id": "addLazyGetter",
          "comments": [
            {
              "description": "Define a lazy getter that loads an object from external code, and optionally handles observer and/or message manager notifications for the object, so the object only loads when a notification is received.",
              "tags": [
                {
                  "tag": "param",
                  "name": "scope",
                  "type": "",
                  "optional": false,
                  "description": "Scope for holding the loaded object.",
                  "problems": [],
                  "source": [
                    {
                      "number": 6,
                      "source": "   * @param scope     Scope for holding the loaded object.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "scope",
                        "postName": "     ",
                        "type": "",
                        "postType": "",
                        "description": "Scope for holding the loaded object.",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "param",
                  "name": "name",
                  "type": "",
                  "optional": false,
                  "description": "Name of the object to load.",
                  "problems": [],
                  "source": [
                    {
                      "number": 7,
                      "source": "   * @param name      Name of the object to load.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "name",
                        "postName": "      ",
                        "type": "",
                        "postType": "",
                        "description": "Name of the object to load.",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "param",
                  "name": "service",
                  "type": "",
                  "optional": false,
                  "description": "If specified, load the object from a JS component; the component must include the line \"this.wrappedJSObject = this;\" in its constructor.",
                  "problems": [],
                  "source": [
                    {
                      "number": 8,
                      "source": "   * @param service   If specified, load the object from a JS component; the",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "service",
                        "postName": "   ",
                        "type": "",
                        "postType": "",
                        "description": "If specified, load the object from a JS component; the",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 9,
                      "source": "   *                  component must include the line",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                  ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "component must include the line",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 10,
                      "source": "   *                  \"this.wrappedJSObject = this;\" in its constructor.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                  ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "\"this.wrappedJSObject = this;\" in its constructor.",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "param",
                  "name": "module",
                  "type": "",
                  "optional": false,
                  "description": "If specified, load the object from a JS module.",
                  "problems": [],
                  "source": [
                    {
                      "number": 11,
                      "source": "   * @param module    If specified, load the object from a JS module.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "module",
                        "postName": "    ",
                        "type": "",
                        "postType": "",
                        "description": "If specified, load the object from a JS module.",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "param",
                  "name": "init",
                  "type": "",
                  "optional": false,
                  "description": "Optional post-load initialization function.",
                  "problems": [],
                  "source": [
                    {
                      "number": 12,
                      "source": "   * @param init      Optional post-load initialization function.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "init",
                        "postName": "      ",
                        "type": "",
                        "postType": "",
                        "description": "Optional post-load initialization function.",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "param",
                  "name": "observers",
                  "type": "",
                  "optional": false,
                  "description": "If specified, listen to specified observer notifications.",
                  "problems": [],
                  "source": [
                    {
                      "number": 13,
                      "source": "   * @param observers If specified, listen to specified observer notifications.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "observers",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "If specified, listen to specified observer notifications.",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "param",
                  "name": "ppmm",
                  "type": "",
                  "optional": false,
                  "description": "If specified, listen to specified process messages.",
                  "problems": [],
                  "source": [
                    {
                      "number": 14,
                      "source": "   * @param ppmm      If specified, listen to specified process messages.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "ppmm",
                        "postName": "      ",
                        "type": "",
                        "postType": "",
                        "description": "If specified, listen to specified process messages.",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "param",
                  "name": "mm",
                  "type": "",
                  "optional": false,
                  "description": "If specified, listen to specified frame messages.",
                  "problems": [],
                  "source": [
                    {
                      "number": 15,
                      "source": "   * @param mm        If specified, listen to specified frame messages.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "mm",
                        "postName": "        ",
                        "type": "",
                        "postType": "",
                        "description": "If specified, listen to specified frame messages.",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "param",
                  "name": "ged",
                  "type": "",
                  "optional": false,
                  "description": "If specified, listen to specified global EventDispatcher events.",
                  "problems": [],
                  "source": [
                    {
                      "number": 16,
                      "source": "   * @param ged       If specified, listen to specified global EventDispatcher events.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "ged",
                        "postName": "       ",
                        "type": "",
                        "postType": "",
                        "description": "If specified, listen to specified global EventDispatcher events.",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "param",
                  "name": "once",
                  "type": "",
                  "optional": false,
                  "description": "if true, only listen to the specified events/messages/notifications once.",
                  "problems": [],
                  "source": [
                    {
                      "number": 17,
                      "source": "   * @param once      if true, only listen to the specified",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "once",
                        "postName": "      ",
                        "type": "",
                        "postType": "",
                        "description": "if true, only listen to the specified",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 18,
                      "source": "   *                  events/messages/notifications once.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                  ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "events/messages/notifications once.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 19,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 20,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Define a lazy getter that loads an object from external code, and",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Define a lazy getter that loads an object from external code, and",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * optionally handles observer and/or message manager notifications for the",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "optionally handles observer and/or message manager notifications for the",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * object, so the object only loads when a notification is received.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "object, so the object only loads when a notification is received.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   * @param scope     Scope for holding the loaded object.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "scope",
                    "postName": "     ",
                    "type": "",
                    "postType": "",
                    "description": "Scope for holding the loaded object.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "   * @param name      Name of the object to load.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "name",
                    "postName": "      ",
                    "type": "",
                    "postType": "",
                    "description": "Name of the object to load.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 8,
                  "source": "   * @param service   If specified, load the object from a JS component; the",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "service",
                    "postName": "   ",
                    "type": "",
                    "postType": "",
                    "description": "If specified, load the object from a JS component; the",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 9,
                  "source": "   *                  component must include the line",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "component must include the line",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 10,
                  "source": "   *                  \"this.wrappedJSObject = this;\" in its constructor.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "\"this.wrappedJSObject = this;\" in its constructor.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 11,
                  "source": "   * @param module    If specified, load the object from a JS module.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "module",
                    "postName": "    ",
                    "type": "",
                    "postType": "",
                    "description": "If specified, load the object from a JS module.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 12,
                  "source": "   * @param init      Optional post-load initialization function.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "init",
                    "postName": "      ",
                    "type": "",
                    "postType": "",
                    "description": "Optional post-load initialization function.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 13,
                  "source": "   * @param observers If specified, listen to specified observer notifications.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "observers",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "If specified, listen to specified observer notifications.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 14,
                  "source": "   * @param ppmm      If specified, listen to specified process messages.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "ppmm",
                    "postName": "      ",
                    "type": "",
                    "postType": "",
                    "description": "If specified, listen to specified process messages.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 15,
                  "source": "   * @param mm        If specified, listen to specified frame messages.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "mm",
                    "postName": "        ",
                    "type": "",
                    "postType": "",
                    "description": "If specified, listen to specified frame messages.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 16,
                  "source": "   * @param ged       If specified, listen to specified global EventDispatcher events.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "ged",
                    "postName": "       ",
                    "type": "",
                    "postType": "",
                    "description": "If specified, listen to specified global EventDispatcher events.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 17,
                  "source": "   * @param once      if true, only listen to the specified",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "once",
                    "postName": "      ",
                    "type": "",
                    "postType": "",
                    "description": "if true, only listen to the specified",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 18,
                  "source": "   *                  events/messages/notifications once.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "events/messages/notifications once.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 19,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 20,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "scope",
            "name"
          ]
        },
        {
          "type": "object-method",
          "line": 156,
          "id": "_addLazyListeners",
          "kind": "method",
          "params": [
            "events",
            "handler",
            "scope",
            "name",
            "addFn",
            "handleFn"
          ]
        },
        {
          "type": "object-method",
          "line": 192,
          "id": "addLazyEventListener",
          "comments": [
            {
              "description": "Add lazy event listeners that only load the actual handler when an event is being handled.",
              "tags": [
                {
                  "tag": "param",
                  "name": "target",
                  "type": "",
                  "optional": false,
                  "description": "Event target for the event listeners.",
                  "problems": [],
                  "source": [
                    {
                      "number": 5,
                      "source": "   * @param target  Event target for the event listeners.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "target",
                        "postName": "  ",
                        "type": "",
                        "postType": "",
                        "description": "Event target for the event listeners.",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "param",
                  "name": "events",
                  "type": "",
                  "optional": false,
                  "description": "Event name as a string or array.",
                  "problems": [],
                  "source": [
                    {
                      "number": 6,
                      "source": "   * @param events  Event name as a string or array.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "events",
                        "postName": "  ",
                        "type": "",
                        "postType": "",
                        "description": "Event name as a string or array.",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "param",
                  "name": "handler",
                  "type": "",
                  "optional": false,
                  "description": "If specified, function that, for a given event, returns the actual event handler as an object or an array of objects. If handler is not specified, the actual event handler is specified using the scope and name pair.",
                  "problems": [],
                  "source": [
                    {
                      "number": 7,
                      "source": "   * @param handler If specified, function that, for a given event, returns the",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "handler",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "If specified, function that, for a given event, returns the",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 8,
                      "source": "   *                actual event handler as an object or an array of objects.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "actual event handler as an object or an array of objects.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 9,
                      "source": "   *                If handler is not specified, the actual event handler is",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "If handler is not specified, the actual event handler is",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 10,
                      "source": "   *                specified using the scope and name pair.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "specified using the scope and name pair.",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "param",
                  "name": "scope",
                  "type": "",
                  "optional": false,
                  "description": "See handler.",
                  "problems": [],
                  "source": [
                    {
                      "number": 11,
                      "source": "   * @param scope   See handler.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "scope",
                        "postName": "   ",
                        "type": "",
                        "postType": "",
                        "description": "See handler.",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "param",
                  "name": "name",
                  "type": "",
                  "optional": false,
                  "description": "See handler.",
                  "problems": [],
                  "source": [
                    {
                      "number": 12,
                      "source": "   * @param name    See handler.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "name",
                        "postName": "    ",
                        "type": "",
                        "postType": "",
                        "description": "See handler.",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "param",
                  "name": "options",
                  "type": "",
                  "optional": false,
                  "description": "Options for addEventListener.",
                  "problems": [],
                  "source": [
                    {
                      "number": 13,
                      "source": "   * @param options Options for addEventListener.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "options",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "Options for addEventListener.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 14,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 15,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Add lazy event listeners that only load the actual handler when an event",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Add lazy event listeners that only load the actual handler when an event",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * is being handled.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "is being handled.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   * @param target  Event target for the event listeners.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "target",
                    "postName": "  ",
                    "type": "",
                    "postType": "",
                    "description": "Event target for the event listeners.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   * @param events  Event name as a string or array.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "events",
                    "postName": "  ",
                    "type": "",
                    "postType": "",
                    "description": "Event name as a string or array.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "   * @param handler If specified, function that, for a given event, returns the",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "handler",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "If specified, function that, for a given event, returns the",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 8,
                  "source": "   *                actual event handler as an object or an array of objects.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "actual event handler as an object or an array of objects.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 9,
                  "source": "   *                If handler is not specified, the actual event handler is",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "If handler is not specified, the actual event handler is",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 10,
                  "source": "   *                specified using the scope and name pair.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "specified using the scope and name pair.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 11,
                  "source": "   * @param scope   See handler.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "scope",
                    "postName": "   ",
                    "type": "",
                    "postType": "",
                    "description": "See handler.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 12,
                  "source": "   * @param name    See handler.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "name",
                    "postName": "    ",
                    "type": "",
                    "postType": "",
                    "description": "See handler.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 13,
                  "source": "   * @param options Options for addEventListener.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "options",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "Options for addEventListener.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 14,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 15,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "target",
            "events"
          ]
        },
        {
          "type": "object-method",
          "line": 231,
          "id": "addLazyPrefObserver",
          "comments": [
            {
              "description": "Add lazy pref observers, and only load the actual handler once the pref value changes from default, and every time the pref value changes afterwards.",
              "tags": [
                {
                  "tag": "param",
                  "name": "aPrefs",
                  "type": "",
                  "optional": false,
                  "description": "Prefs as an object or array. Each pref object has fields \"name\" and \"default\", indicating the name and default value of the pref, respectively.",
                  "problems": [],
                  "source": [
                    {
                      "number": 6,
                      "source": "   * @param aPrefs  Prefs as an object or array. Each pref object has fields",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aPrefs",
                        "postName": "  ",
                        "type": "",
                        "postType": "",
                        "description": "Prefs as an object or array. Each pref object has fields",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 7,
                      "source": "   *                \"name\" and \"default\", indicating the name and default value",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "\"name\" and \"default\", indicating the name and default value",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 8,
                      "source": "   *                of the pref, respectively.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "of the pref, respectively.",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "param",
                  "name": "handler",
                  "type": "",
                  "optional": false,
                  "description": "If specified, function that, for a given pref, returns the actual event handler as an object or an array of objects. If handler is not specified, the actual event handler is specified using the scope and name pair.",
                  "problems": [],
                  "source": [
                    {
                      "number": 9,
                      "source": "   * @param handler If specified, function that, for a given pref, returns the",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "handler",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "If specified, function that, for a given pref, returns the",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 10,
                      "source": "   *                actual event handler as an object or an array of objects.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "actual event handler as an object or an array of objects.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 11,
                      "source": "   *                If handler is not specified, the actual event handler is",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "If handler is not specified, the actual event handler is",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 12,
                      "source": "   *                specified using the scope and name pair.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "specified using the scope and name pair.",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "param",
                  "name": "scope",
                  "type": "",
                  "optional": false,
                  "description": "See handler.",
                  "problems": [],
                  "source": [
                    {
                      "number": 13,
                      "source": "   * @param scope   See handler.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "scope",
                        "postName": "   ",
                        "type": "",
                        "postType": "",
                        "description": "See handler.",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "param",
                  "name": "name",
                  "type": "",
                  "optional": false,
                  "description": "See handler.",
                  "problems": [],
                  "source": [
                    {
                      "number": 14,
                      "source": "   * @param name    See handler.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "name",
                        "postName": "    ",
                        "type": "",
                        "postType": "",
                        "description": "See handler.",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "param",
                  "name": "once",
                  "type": "",
                  "optional": false,
                  "description": "If true, only observe the specified prefs once.",
                  "problems": [],
                  "source": [
                    {
                      "number": 15,
                      "source": "   * @param once    If true, only observe the specified prefs once.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "once",
                        "postName": "    ",
                        "type": "",
                        "postType": "",
                        "description": "If true, only observe the specified prefs once.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 16,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 17,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Add lazy pref observers, and only load the actual handler once the pref",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Add lazy pref observers, and only load the actual handler once the pref",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * value changes from default, and every time the pref value changes",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "value changes from default, and every time the pref value changes",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * afterwards.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "afterwards.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   * @param aPrefs  Prefs as an object or array. Each pref object has fields",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aPrefs",
                    "postName": "  ",
                    "type": "",
                    "postType": "",
                    "description": "Prefs as an object or array. Each pref object has fields",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "   *                \"name\" and \"default\", indicating the name and default value",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "\"name\" and \"default\", indicating the name and default value",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 8,
                  "source": "   *                of the pref, respectively.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "of the pref, respectively.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 9,
                  "source": "   * @param handler If specified, function that, for a given pref, returns the",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "handler",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "If specified, function that, for a given pref, returns the",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 10,
                  "source": "   *                actual event handler as an object or an array of objects.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "actual event handler as an object or an array of objects.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 11,
                  "source": "   *                If handler is not specified, the actual event handler is",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "If handler is not specified, the actual event handler is",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 12,
                  "source": "   *                specified using the scope and name pair.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "specified using the scope and name pair.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 13,
                  "source": "   * @param scope   See handler.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "scope",
                    "postName": "   ",
                    "type": "",
                    "postType": "",
                    "description": "See handler.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 14,
                  "source": "   * @param name    See handler.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "name",
                    "postName": "    ",
                    "type": "",
                    "postType": "",
                    "description": "See handler.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 15,
                  "source": "   * @param once    If true, only observe the specified prefs once.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "once",
                    "postName": "    ",
                    "type": "",
                    "postType": "",
                    "description": "If true, only observe the specified prefs once.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 16,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 17,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aPrefs"
          ]
        },
        {
          "type": "object-method",
          "line": 273,
          "id": "getRootDocShell",
          "kind": "method",
          "params": [
            "aWin"
          ]
        },
        {
          "type": "object-method",
          "line": 292,
          "id": "getChromeWindow",
          "comments": [
            {
              "description": "Return the outermost chrome DOM window (the XUL window) for a given DOM window, in the parent process.",
              "tags": [
                {
                  "tag": "param",
                  "name": "aWin",
                  "type": "",
                  "optional": false,
                  "description": "a DOM window.",
                  "problems": [],
                  "source": [
                    {
                      "number": 5,
                      "source": "   * @param aWin a DOM window.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aWin",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "a DOM window.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 6,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 7,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Return the outermost chrome DOM window (the XUL window) for a given DOM",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Return the outermost chrome DOM window (the XUL window) for a given DOM",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * window, in the parent process.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "window, in the parent process.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   * @param aWin a DOM window.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aWin",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "a DOM window.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aWin"
          ]
        },
        {
          "type": "object-method",
          "line": 303,
          "id": "getContentFrameMessageManager",
          "comments": [
            {
              "description": "Return the content frame message manager (aka the frame script global object) for a given DOM window, in a child process.",
              "tags": [
                {
                  "tag": "param",
                  "name": "aWin",
                  "type": "",
                  "optional": false,
                  "description": "a DOM window.",
                  "problems": [],
                  "source": [
                    {
                      "number": 5,
                      "source": "   * @param aWin a DOM window.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aWin",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "a DOM window.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 6,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 7,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Return the content frame message manager (aka the frame script global",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Return the content frame message manager (aka the frame script global",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * object) for a given DOM window, in a child process.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "object) for a given DOM window, in a child process.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   * @param aWin a DOM window.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aWin",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "a DOM window.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aWin"
          ]
        },
        {
          "type": "object-method",
          "line": 314,
          "id": "getDispatcherForWindow",
          "comments": [
            {
              "description": "Return the per-nsWindow EventDispatcher for a given DOM window, in either the parent process or a child process.",
              "tags": [
                {
                  "tag": "param",
                  "name": "aWin",
                  "type": "",
                  "optional": false,
                  "description": "a DOM window.",
                  "problems": [],
                  "source": [
                    {
                      "number": 5,
                      "source": "   * @param aWin a DOM window.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aWin",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "a DOM window.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 6,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 7,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Return the per-nsWindow EventDispatcher for a given DOM window, in either",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Return the per-nsWindow EventDispatcher for a given DOM window, in either",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * the parent process or a child process.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "the parent process or a child process.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   * @param aWin a DOM window.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aWin",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "a DOM window.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aWin"
          ]
        },
        {
          "type": "object-method",
          "line": 334,
          "id": "waitForPanZoomState",
          "comments": [
            {
              "description": "Return promise for waiting for finishing PanZoomState.",
              "tags": [
                {
                  "tag": "param",
                  "name": "aWindow",
                  "type": "",
                  "optional": false,
                  "description": "a DOM window.",
                  "problems": [],
                  "source": [
                    {
                      "number": 4,
                      "source": "   * @param aWindow a DOM window.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aWindow",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "a DOM window.",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "return",
                  "name": "promise",
                  "type": "",
                  "optional": false,
                  "description": "",
                  "problems": [],
                  "source": [
                    {
                      "number": 5,
                      "source": "   * @return promise",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@return",
                        "postTag": " ",
                        "name": "promise",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 6,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 7,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Return promise for waiting for finishing PanZoomState.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Return promise for waiting for finishing PanZoomState.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * @param aWindow a DOM window.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aWindow",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "a DOM window.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   * @return promise",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@return",
                    "postTag": " ",
                    "name": "promise",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aWindow"
          ]
        },
        {
          "type": "object-method",
          "line": 396,
          "id": "initLogging",
          "comments": [
            {
              "description": "Add logging functions to the specified scope that forward to the given Log.sys.mjs logger. Currently \"debug\" and \"warn\" functions are supported. To log something, call the function through a template literal: function foo(bar, baz) { debug `hello world`; debug `foo called with ${bar} as bar`; warn `this is a warning for ${baz}`; } An inline format can also be used for logging: let bar = 42; do_something(bar); // No log. do_something(debug.foo = bar); // Output \"foo = 42\" to the log.",
              "tags": [
                {
                  "tag": "param",
                  "name": "aTag",
                  "type": "",
                  "optional": false,
                  "description": "Name of the Log.jsm logger to forward logs to.",
                  "problems": [],
                  "source": [
                    {
                      "number": 18,
                      "source": "   * @param aTag Name of the Log.jsm logger to forward logs to.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aTag",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "Name of the Log.jsm logger to forward logs to.",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "param",
                  "name": "aScope",
                  "type": "",
                  "optional": false,
                  "description": "Scope to add the logging functions to.",
                  "problems": [],
                  "source": [
                    {
                      "number": 19,
                      "source": "   * @param aScope Scope to add the logging functions to.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aScope",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "Scope to add the logging functions to.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 20,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 21,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Add logging functions to the specified scope that forward to the given",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Add logging functions to the specified scope that forward to the given",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * Log.sys.mjs logger. Currently \"debug\" and \"warn\" functions are supported. To",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Log.sys.mjs logger. Currently \"debug\" and \"warn\" functions are supported. To",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * log something, call the function through a template literal:",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "log something, call the function through a template literal:",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   *   function foo(bar, baz) {",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "   ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "function foo(bar, baz) {",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "   *     debug `hello world`;",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "debug `hello world`;",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 8,
                  "source": "   *     debug `foo called with ${bar} as bar`;",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "debug `foo called with ${bar} as bar`;",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 9,
                  "source": "   *     warn `this is a warning for ${baz}`;",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "warn `this is a warning for ${baz}`;",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 10,
                  "source": "   *   }",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "   ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "}",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 11,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 12,
                  "source": "   * An inline format can also be used for logging:",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "An inline format can also be used for logging:",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 13,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 14,
                  "source": "   *   let bar = 42;",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "   ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "let bar = 42;",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 15,
                  "source": "   *   do_something(bar); // No log.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "   ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "do_something(bar); // No log.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 16,
                  "source": "   *   do_something(debug.foo = bar); // Output \"foo = 42\" to the log.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "   ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "do_something(debug.foo = bar); // Output \"foo = 42\" to the log.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 17,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 18,
                  "source": "   * @param aTag Name of the Log.jsm logger to forward logs to.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aTag",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "Name of the Log.jsm logger to forward logs to.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 19,
                  "source": "   * @param aScope Scope to add the logging functions to.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aScope",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "Scope to add the logging functions to.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 20,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 21,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aTag",
            "aScope"
          ]
        },
        {
          "type": "object-method",
          "line": 420,
          "id": "rootLogger",
          "kind": "get",
          "params": []
        },
        {
          "type": "object-method",
          "line": 429,
          "id": "_log",
          "kind": "method",
          "params": [
            "aLogger",
            "aLevel",
            "aStrings",
            "aExprs"
          ]
        },
        {
          "type": "object-method",
          "line": 488,
          "id": "isSupportedPermissionsPrincipal",
          "comments": [
            {
              "description": "Checks whether the principal is supported for permissions.",
              "tags": [
                {
                  "tag": "param",
                  "name": "principal",
                  "type": "nsIPrincipal",
                  "optional": false,
                  "description": "The principal to check.",
                  "problems": [],
                  "source": [
                    {
                      "number": 4,
                      "source": "   * @param {nsIPrincipal} principal",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "principal",
                        "postName": "",
                        "type": "{nsIPrincipal}",
                        "postType": " ",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 5,
                      "source": "   *        The principal to check.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "        ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "The principal to check.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 6,
                      "source": "   *",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "return",
                  "name": "if",
                  "type": "boolean",
                  "optional": false,
                  "description": "the principal is supported.",
                  "problems": [],
                  "source": [
                    {
                      "number": 7,
                      "source": "   * @return {boolean} if the principal is supported.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@return",
                        "postTag": " ",
                        "name": "if",
                        "postName": " ",
                        "type": "{boolean}",
                        "postType": " ",
                        "description": "the principal is supported.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 8,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 9,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Checks whether the principal is supported for permissions.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Checks whether the principal is supported for permissions.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * @param {nsIPrincipal} principal",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "principal",
                    "postName": "",
                    "type": "{nsIPrincipal}",
                    "postType": " ",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   *        The principal to check.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "        ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "The principal to check.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "   * @return {boolean} if the principal is supported.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@return",
                    "postTag": " ",
                    "name": "if",
                    "postName": " ",
                    "type": "{boolean}",
                    "postType": " ",
                    "description": "the principal is supported.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 8,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 9,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "principal"
          ]
        },
        {
          "type": "object-method",
          "line": 505,
          "id": "isSupportedPermissionsScheme",
          "comments": [
            {
              "description": "Checks whether we support managing permissions for a specific scheme.",
              "tags": [
                {
                  "tag": "param",
                  "name": "scheme",
                  "type": "string",
                  "optional": false,
                  "description": "- Scheme to test.",
                  "problems": [],
                  "source": [
                    {
                      "number": 3,
                      "source": "   * @param {string} scheme - Scheme to test.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "scheme",
                        "postName": " ",
                        "type": "{string}",
                        "postType": " ",
                        "description": "- Scheme to test.",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "returns",
                  "name": "Whether",
                  "type": "boolean",
                  "optional": false,
                  "description": "the scheme is supported.",
                  "problems": [],
                  "source": [
                    {
                      "number": 4,
                      "source": "   * @returns {boolean} Whether the scheme is supported.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@returns",
                        "postTag": " ",
                        "name": "Whether",
                        "postName": " ",
                        "type": "{boolean}",
                        "postType": " ",
                        "description": "the scheme is supported.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 5,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 6,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Checks whether we support managing permissions for a specific scheme.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Checks whether we support managing permissions for a specific scheme.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * @param {string} scheme - Scheme to test.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "scheme",
                    "postName": " ",
                    "type": "{string}",
                    "postType": " ",
                    "description": "- Scheme to test.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * @returns {boolean} Whether the scheme is supported.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@returns",
                    "postTag": " ",
                    "name": "Whether",
                    "postName": " ",
                    "type": "{boolean}",
                    "postType": " ",
                    "description": "the scheme is supported.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "scheme"
          ]
        }
      ]
    }
  }
]