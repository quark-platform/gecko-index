export namespace AUSTLMY {
    let EXTERNAL: string;
    let NOTIFY: string;
    let SUBSEQUENT: string;
    let CHK_NO_UPDATE_FOUND: number;
    let CHK_DOWNLOAD_UPDATE: number;
    let CHK_SHOWPROMPT_PREF: number;
    let CHK_HAS_ACTIVEUPDATE: number;
    let CHK_IS_DOWNLOADING: number;
    let CHK_IS_STAGED: number;
    let CHK_IS_DOWNLOADED: number;
    let CHK_NO_MUTEX: number;
    let CHK_UNABLE_TO_CHECK: number;
    let CHK_OFFLINE: number;
    let CHK_GENERAL_ERROR_PROMPT: number;
    let CHK_GENERAL_ERROR_SILENT: number;
    let CHK_NO_COMPAT_UPDATE_FOUND: number;
    let CHK_UPDATE_PREVIOUS_VERSION: number;
    let CHK_UPDATE_INVALID_TYPE: number;
    let CHK_UNSUPPORTED: number;
    let CHK_UNABLE_TO_APPLY: number;
    let CHK_NO_OS_VERSION: number;
    let CHK_NO_OS_ABI: number;
    let CHK_INVALID_DEFAULT_URL: number;
    let CHK_ELEVATION_DISABLED_FOR_VERSION: number;
    let CHK_ELEVATION_OPTOUT_FOR_VERSION: number;
    let CHK_DISABLED_BY_POLICY: number;
    let CHK_ERR_WRITE_FAILURE: number;
    let CHK_OTHER_INSTANCE: number;
    let CHK_NO_PARTIAL_PATCH: number;
    function pingCheckCode(aSuffix: any, aCode: any): void;
    function pingCheckExError(aSuffix: any, aCode: any): void;
    let STARTUP: string;
    let STAGE: string;
    let PATCH_COMPLETE: string;
    let PATCH_PARTIAL: string;
    let PATCH_UNKNOWN: string;
    let DWNLD_SUCCESS: number;
    let DWNLD_RETRY_OFFLINE: number;
    let DWNLD_RETRY_NET_TIMEOUT: number;
    let DWNLD_RETRY_CONNECTION_REFUSED: number;
    let DWNLD_RETRY_NET_RESET: number;
    let DWNLD_ERR_NO_UPDATE: number;
    let DWNLD_ERR_NO_UPDATE_PATCH: number;
    let DWNLD_ERR_PATCH_SIZE_LARGER: number;
    let DWNLD_ERR_PATCH_SIZE_NOT_EQUAL: number;
    let DWNLD_ERR_BINDING_ABORTED: number;
    let DWNLD_ERR_ABORT: number;
    let DWNLD_ERR_DOCUMENT_NOT_CACHED: number;
    let DWNLD_ERR_VERIFY_NO_REQUEST: number;
    let DWNLD_ERR_VERIFY_PATCH_SIZE_NOT_EQUAL: number;
    let DWNLD_ERR_WRITE_FAILURE: number;
    let DWNLD_UNKNOWN_PHASE_ERR_WRITE_FAILURE: number;
    function pingDownloadCode(aIsComplete: any, aCode: any): void;
    let STATE_WRITE_FAILURE: number;
    function pingStateCode(aSuffix: any, aCode: any): void;
    function pingStatusErrorCode(aSuffix: any, aCode: any): void;
    function pingBinaryTransparencyResult(aSuffix: any, aCode: any): void;
    function pingBitsError(aIsComplete: any, aError: any): void;
    function pingBitsSuccess(aIsComplete: any): void;
    function _pingBitsResult(aIsComplete: any, aResultType: any): void;
    function pingLastUpdateTime(aSuffix: any): void;
    function pingServiceInstallStatus(aSuffix: any, aInstalled: any): void;
    function pingBoolPref(aID: any, aPref: any, aDefault: any, aExpected: any): void;
    function pingIntPref(aID: any, aPref: any, aDefault: any, aExpected: any): void;
    function pingGeneric(aID: any, aValue: any, aExpected: any): void;
    let MOVE_RESULT_SUCCESS: string;
    let MOVE_RESULT_UNKNOWN_FAILURE: string;
    function pingMoveResult(aResult: any): void;
    function pingSuppressPrompts(): void;
    function pingPinPolicy(updatePin: any): void;
}
