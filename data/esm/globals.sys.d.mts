export namespace globals {
    let XHTML_NS: string;
    let XUL_NS: string;
    let NS_GFXINFO_CONTRACTID: string;
    let DEBUG_CONTRACTID: string;
    let TYPE_REFTEST_EQUAL: string;
    let TYPE_REFTEST_NOTEQUAL: string;
    let TYPE_LOAD: string;
    let TYPE_SCRIPT: string;
    let TYPE_PRINT: string;
    let URL_TARGET_TYPE_TEST: number;
    let URL_TARGET_TYPE_REFERENCE: number;
    let EXPECTED_PASS: number;
    let EXPECTED_FAIL: number;
    let EXPECTED_RANDOM: number;
    let EXPECTED_FUZZY: number;
    let PREF_BOOLEAN: number;
    let PREF_STRING: number;
    let PREF_INTEGER: number;
    let FOCUS_FILTER_ALL_TESTS: string;
    let FOCUS_FILTER_NEEDS_FOCUS_TESTS: string;
    let FOCUS_FILTER_NON_NEEDS_FOCUS_TESTS: string;
    let BLANK_URL_FOR_CLEARING: string;
    namespace g {
        let loadTimeout: number;
        let timeoutHook: any;
        let remote: boolean;
        let ignoreWindowSize: boolean;
        let shuffle: boolean;
        let repeat: any;
        let runUntilFailure: boolean;
        let cleanupPendingCrashes: boolean;
        let totalChunks: number;
        let thisChunk: number;
        let containingWindow: any;
        let urlFilterRegex: {};
        let contentGfxInfo: any;
        let focusFilterMode: string;
        let compareRetainedDisplayLists: boolean;
        let isCoverageBuild: boolean;
        let browser: any;
        let browserIsRemote: any;
        let browserIsIframe: any;
        let browserMessageManager: any;
        let useDrawSnapshot: any;
        let canvas1: any;
        let canvas2: any;
        let currentCanvas: any;
        let urls: any;
        let uriUseCounts: any;
        let uriCanvases: any;
        namespace testResults {
            let Pass: number;
            let LoadOnly: number;
            let Exception: number;
            let FailedLoad: number;
            let UnexpectedFail: number;
            let UnexpectedPass: number;
            let AssertionUnexpected: number;
            let AssertionUnexpectedFixed: number;
            let KnownFail: number;
            let AssertionKnown: number;
            let Random: number;
            let Skip: number;
            let Slow: number;
        }
        let totalTests: number;
        let currentURL: any;
        let currentURLTargetType: any;
        let testLog: any[];
        let logLevel: any;
        let logFile: any;
        let logger: any;
        let server: any;
        let count: number;
        let assertionCount: number;
        let ioService: any;
        let debug: any;
        let windowUtils: any;
        let slowestTestTime: number;
        let slowestTestURL: any;
        let failedUseWidgetLayers: boolean;
        let drawWindowFlags: any;
        let expectingProcessCrash: boolean;
        let expectedCrashDumpFiles: any[];
        let unexpectedCrashDumpFiles: {};
        let crashDumpDir: any;
        let pendingCrashDumpDir: any;
        let failedNoPaint: boolean;
        let failedNoDisplayList: boolean;
        let failedDisplayList: boolean;
        let failedOpaqueLayer: boolean;
        let failedOpaqueLayerMessages: any[];
        let failedAssignedLayer: boolean;
        let failedAssignedLayerMessages: any[];
        let startAfter: any;
        let suiteStarted: boolean;
        let manageSuite: boolean;
        let prefsToRestore: any[];
        let httpServerPort: number;
        let runSlowTests: boolean;
        let noCanvasCache: boolean;
        let recycledCanvases: any[];
        let testPrintOutput: any;
        let manifestsLoaded: {};
        let dumpedConditionSandbox: boolean;
    }
}
