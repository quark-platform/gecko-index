export function FinderParent(browser: any): void;
export class FinderParent {
    constructor(browser: any);
    _listeners: Set<any>;
    _searchString: string;
    _foundSearchString: any;
    _lastFoundBrowsingContext: any;
    _caseSensitive: boolean;
    _entireWord: boolean;
    _matchDiacritics: boolean;
    get browsingContext(): any;
    get useRemoteSubframes(): any;
    swapBrowser(aBrowser: any): void;
    _browser: any;
    addResultListener(aListener: any): void;
    removeResultListener(aListener: any): void;
    callListeners(aCallback: any, aArgs: any): void;
    getLastFoundBrowsingContext(aList: any): any;
    sendMessageToContext(aMessageName: any, aArgs?: {}): void;
    sendQueryToContext(aMessageName: any, aArgs: any, aBrowsingContext: any): any;
    sendMessageToAllContexts(aMessageName: any, aArgs?: {}): void;
    gatherBrowsingContexts(aBrowsingContext: any): any[];
    needSubFrameSearch(aList: any): boolean;
    onResultFound(aResponse: any): void;
    get searchString(): any;
    get clipboardSearchString(): any;
    set caseSensitive(aSensitive: any);
    set entireWord(aEntireWord: any);
    set matchDiacritics(aMatchDiacritics: any);
    setSearchStringToSelection(): Promise<any>;
    getInitialSelection(): Promise<any>;
    setToSelection(aMessage: any, aInitial: any): Promise<any>;
    doFind(aFindNext: any, aArgs: any): Promise<void>;
    fastFind(aSearchString: any, aLinksOnly: any, aDrawOutline: any): void;
    findAgain(aSearchString: any, aFindBackwards: any, aLinksOnly: any, aDrawOutline: any): void;
    highlight(aHighlight: any, aWord: any, aLinksOnly: any): void;
    requestMatchesCount(aSearchString: any, aLinksOnly: any): void;
    updateHighlightAndMatchCount(options: any): void;
    enableSelection(): void;
    removeSelection(aKeepHighlight: any): void;
    focusContent(): void;
    onFindbarClose(): void;
    onFindbarOpen(): void;
    onModalHighlightChange(aUseModalHighlight: any): void;
    onHighlightAllChange(aHighlightAll: any): void;
    keyPress(aEvent: any): void;
    initNotFoundSound(): void;
    playNotFoundSound(): void;
}
