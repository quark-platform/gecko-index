[
  {
    "type": "class",
    "id": "BasePopup",
    "line": 56,
    "methods": [
      {
        "type": "method",
        "id": "constructor",
        "line": 57,
        "params": [
          {
            "type": "params",
            "id": "extension",
            "line": 58
          },
          {
            "type": "params",
            "id": "viewNode",
            "line": 59
          },
          {
            "type": "params",
            "id": "popupURL",
            "line": 60
          },
          {
            "type": "params",
            "id": "browserStyle",
            "line": 61
          }
        ],
        "kind": "constructor"
      },
      {
        "type": "method",
        "id": "for",
        "line": 96,
        "params": [
          {
            "type": "params",
            "id": "extension",
            "line": 96
          },
          {
            "type": "params",
            "id": "window",
            "line": 96
          }
        ],
        "kind": "method"
      },
      {
        "type": "method",
        "id": "close",
        "line": 100,
        "params": [],
        "kind": "method"
      },
      {
        "type": "method",
        "id": "destroy",
        "line": 104,
        "params": [],
        "kind": "method"
      },
      {
        "type": "method",
        "id": "destroyBrowser",
        "line": 146,
        "params": [
          {
            "type": "params",
            "id": "browser",
            "line": 146
          }
        ],
        "kind": "method"
      },
      {
        "type": "method",
        "id": "DESTROY_EVENT",
        "line": 166,
        "params": [],
        "comments": [
          {
            "description": "Returns the name of the event fired on `viewNode` when the popup is being",
            "tags": [],
            "source": [
              {
                "number": 0,
                "source": "/**",
                "tokens": {
                  "start": "",
                  "delimiter": "/**",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 1,
                "source": " Returns the name of the event fired on `viewNode` when the popup is being",
                "tokens": {
                  "start": " ",
                  "delimiter": "",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "Returns the name of the event fired on `viewNode` when the popup is being",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 2,
                "source": "*/",
                "tokens": {
                  "start": "",
                  "delimiter": "",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "*/",
                  "lineEnd": ""
                }
              }
            ],
            "problems": []
          },
          {
            "description": "destroyed. This must be implemented by every subclass.",
            "tags": [],
            "source": [
              {
                "number": 0,
                "source": "/**",
                "tokens": {
                  "start": "",
                  "delimiter": "/**",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 1,
                "source": " destroyed. This must be implemented by every subclass.",
                "tokens": {
                  "start": " ",
                  "delimiter": "",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "destroyed. This must be implemented by every subclass.",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 2,
                "source": "*/",
                "tokens": {
                  "start": "",
                  "delimiter": "",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "*/",
                  "lineEnd": ""
                }
              }
            ],
            "problems": []
          }
        ],
        "kind": "get"
      },
      {
        "type": "method",
        "id": "STYLESHEETS",
        "line": 170,
        "params": [],
        "kind": "get"
      },
      {
        "type": "method",
        "id": "panel",
        "line": 183,
        "params": [],
        "kind": "get"
      },
      {
        "type": "method",
        "id": "receiveMessage",
        "line": 191,
        "params": [
          {
            "type": "params",
            "id": "param0",
            "line": 191
          }
        ],
        "kind": "method"
      },
      {
        "type": "method",
        "id": "handleEvent",
        "line": 212,
        "params": [
          {
            "type": "params",
            "id": "event",
            "line": 212
          }
        ],
        "kind": "method"
      },
      {
        "type": "method",
        "id": "createBrowser",
        "line": 283,
        "params": [
          {
            "type": "params",
            "id": "viewNode",
            "line": 283
          }
        ],
        "kind": "method"
      },
      {
        "type": "method",
        "id": "unblockParser",
        "line": 401,
        "params": [],
        "kind": "method"
      },
      {
        "type": "method",
        "id": "resizeBrowser",
        "line": 416,
        "params": [
          {
            "type": "params",
            "id": "param0",
            "line": 416
          }
        ],
        "kind": "method"
      },
      {
        "type": "method",
        "id": "setBackground",
        "line": 440,
        "params": [
          {
            "type": "params",
            "id": "background",
            "line": 440
          }
        ],
        "kind": "method"
      }
    ]
  },
  {
    "type": "class",
    "id": "PanelPopup",
    "superClass": "BasePopup",
    "line": 470,
    "methods": [
      {
        "type": "method",
        "id": "constructor",
        "line": 471,
        "params": [
          {
            "type": "params",
            "id": "extension",
            "line": 471
          },
          {
            "type": "params",
            "id": "document",
            "line": 471
          },
          {
            "type": "params",
            "id": "popupURL",
            "line": 471
          },
          {
            "type": "params",
            "id": "browserStyle",
            "line": 471
          }
        ],
        "kind": "constructor"
      },
      {
        "type": "method",
        "id": "DESTROY_EVENT",
        "line": 500,
        "params": [],
        "kind": "get"
      },
      {
        "type": "method",
        "id": "destroy",
        "line": 504,
        "params": [],
        "kind": "method"
      },
      {
        "type": "method",
        "id": "closePopup",
        "line": 510,
        "params": [],
        "kind": "method"
      }
    ]
  },
  {
    "type": "class",
    "id": "ViewPopup",
    "superClass": "BasePopup",
    "line": 520,
    "methods": [
      {
        "type": "method",
        "id": "constructor",
        "line": 521,
        "params": [
          {
            "type": "params",
            "id": "extension",
            "line": 522
          },
          {
            "type": "params",
            "id": "window",
            "line": 523
          },
          {
            "type": "params",
            "id": "popupURL",
            "line": 524
          },
          {
            "type": "params",
            "id": "browserStyle",
            "line": 525
          },
          {
            "type": "params",
            "id": "fixedWidth",
            "line": 526
          },
          {
            "type": "params",
            "id": "blockParser",
            "line": 527
          }
        ],
        "kind": "constructor"
      },
      {
        "type": "method",
        "id": "attach",
        "line": 586,
        "params": [
          {
            "type": "params",
            "id": "viewNode",
            "line": 586
          }
        ],
        "comments": [
          {
            "description": "Attaches the pre-loaded browser to the given view node, and reserves a promise which resolves when the browser is ready.",
            "tags": [
              {
                "tag": "param",
                "name": "viewNode",
                "type": "Element",
                "optional": false,
                "description": "The node to attach the browser to.",
                "problems": [],
                "source": [
                  {
                    "number": 5,
                    "source": "   * @param {Element} viewNode",
                    "tokens": {
                      "start": "   ",
                      "delimiter": "*",
                      "postDelimiter": " ",
                      "tag": "@param",
                      "postTag": " ",
                      "name": "viewNode",
                      "postName": "",
                      "type": "{Element}",
                      "postType": " ",
                      "description": "",
                      "end": "",
                      "lineEnd": ""
                    }
                  },
                  {
                    "number": 6,
                    "source": "   *        The node to attach the browser to.",
                    "tokens": {
                      "start": "   ",
                      "delimiter": "*",
                      "postDelimiter": "        ",
                      "tag": "",
                      "postTag": "",
                      "name": "",
                      "postName": "",
                      "type": "",
                      "postType": "",
                      "description": "The node to attach the browser to.",
                      "end": "",
                      "lineEnd": ""
                    }
                  }
                ]
              },
              {
                "tag": "returns",
                "name": "",
                "type": "Promise<boolean>",
                "optional": false,
                "description": "Resolves when the browser is ready. Resolves to `false` if the browser was destroyed before it was fully loaded, and the popup should be closed, or `true` otherwise.",
                "problems": [],
                "source": [
                  {
                    "number": 7,
                    "source": "   * @returns {Promise<boolean>}",
                    "tokens": {
                      "start": "   ",
                      "delimiter": "*",
                      "postDelimiter": " ",
                      "tag": "@returns",
                      "postTag": " ",
                      "name": "",
                      "postName": "",
                      "type": "{Promise<boolean>}",
                      "postType": "",
                      "description": "",
                      "end": "",
                      "lineEnd": ""
                    }
                  },
                  {
                    "number": 8,
                    "source": "   *        Resolves when the browser is ready. Resolves to `false` if the",
                    "tokens": {
                      "start": "   ",
                      "delimiter": "*",
                      "postDelimiter": "        ",
                      "tag": "",
                      "postTag": "",
                      "name": "",
                      "postName": "",
                      "type": "",
                      "postType": "",
                      "description": "Resolves when the browser is ready. Resolves to `false` if the",
                      "end": "",
                      "lineEnd": ""
                    }
                  },
                  {
                    "number": 9,
                    "source": "   *        browser was destroyed before it was fully loaded, and the popup",
                    "tokens": {
                      "start": "   ",
                      "delimiter": "*",
                      "postDelimiter": "        ",
                      "tag": "",
                      "postTag": "",
                      "name": "",
                      "postName": "",
                      "type": "",
                      "postType": "",
                      "description": "browser was destroyed before it was fully loaded, and the popup",
                      "end": "",
                      "lineEnd": ""
                    }
                  },
                  {
                    "number": 10,
                    "source": "   *        should be closed, or `true` otherwise.",
                    "tokens": {
                      "start": "   ",
                      "delimiter": "*",
                      "postDelimiter": "        ",
                      "tag": "",
                      "postTag": "",
                      "name": "",
                      "postName": "",
                      "type": "",
                      "postType": "",
                      "description": "should be closed, or `true` otherwise.",
                      "end": "",
                      "lineEnd": ""
                    }
                  },
                  {
                    "number": 11,
                    "source": "   ",
                    "tokens": {
                      "start": "   ",
                      "delimiter": "",
                      "postDelimiter": "",
                      "tag": "",
                      "postTag": "",
                      "name": "",
                      "postName": "",
                      "type": "",
                      "postType": "",
                      "description": "",
                      "end": "",
                      "lineEnd": ""
                    }
                  },
                  {
                    "number": 12,
                    "source": "*/",
                    "tokens": {
                      "start": "",
                      "delimiter": "",
                      "postDelimiter": "",
                      "tag": "",
                      "postTag": "",
                      "name": "",
                      "postName": "",
                      "type": "",
                      "postType": "",
                      "description": "",
                      "end": "*/",
                      "lineEnd": ""
                    }
                  }
                ]
              }
            ],
            "source": [
              {
                "number": 0,
                "source": "/**",
                "tokens": {
                  "start": "",
                  "delimiter": "/**",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 1,
                "source": "*",
                "tokens": {
                  "start": "",
                  "delimiter": "*",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 2,
                "source": "   * Attaches the pre-loaded browser to the given view node, and reserves a",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": " ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "Attaches the pre-loaded browser to the given view node, and reserves a",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 3,
                "source": "   * promise which resolves when the browser is ready.",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": " ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "promise which resolves when the browser is ready.",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 4,
                "source": "   *",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 5,
                "source": "   * @param {Element} viewNode",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": " ",
                  "tag": "@param",
                  "postTag": " ",
                  "name": "viewNode",
                  "postName": "",
                  "type": "{Element}",
                  "postType": " ",
                  "description": "",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 6,
                "source": "   *        The node to attach the browser to.",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": "        ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "The node to attach the browser to.",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 7,
                "source": "   * @returns {Promise<boolean>}",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": " ",
                  "tag": "@returns",
                  "postTag": " ",
                  "name": "",
                  "postName": "",
                  "type": "{Promise<boolean>}",
                  "postType": "",
                  "description": "",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 8,
                "source": "   *        Resolves when the browser is ready. Resolves to `false` if the",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": "        ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "Resolves when the browser is ready. Resolves to `false` if the",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 9,
                "source": "   *        browser was destroyed before it was fully loaded, and the popup",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": "        ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "browser was destroyed before it was fully loaded, and the popup",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 10,
                "source": "   *        should be closed, or `true` otherwise.",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": "        ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "should be closed, or `true` otherwise.",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 11,
                "source": "   ",
                "tokens": {
                  "start": "   ",
                  "delimiter": "",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 12,
                "source": "*/",
                "tokens": {
                  "start": "",
                  "delimiter": "",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "*/",
                  "lineEnd": ""
                }
              }
            ],
            "problems": []
          }
        ],
        "kind": "method"
      },
      {
        "type": "method",
        "id": "removeTempPanel",
        "line": 707,
        "params": [],
        "kind": "method"
      },
      {
        "type": "method",
        "id": "destroy",
        "line": 720,
        "params": [],
        "kind": "method"
      },
      {
        "type": "method",
        "id": "DESTROY_EVENT",
        "line": 726,
        "params": [],
        "kind": "get"
      },
      {
        "type": "method",
        "id": "closePopup",
        "line": 730,
        "params": [],
        "kind": "method"
      }
    ]
  }
]