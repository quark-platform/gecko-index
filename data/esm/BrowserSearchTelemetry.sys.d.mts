export const BrowserSearchTelemetry: BrowserSearchTelemetryHandler;
/**
 * This class handles saving search telemetry related to the url bar,
 * search bar and other areas as per the sources above.
 */
declare class BrowserSearchTelemetryHandler {
    KNOWN_SEARCH_SOURCES: Map<string, string>;
    /**
     * Determines if we should record a search for this browser instance.
     * Private Browsing mode is normally skipped.
     *
     * @param {browser} browser
     *   The browser where the search was loaded.
     * @returns {boolean}
     *   True if the search should be recorded, false otherwise.
     */
    shouldRecordSearchCount(browser: any): boolean;
    /**
     * Records the method by which the user selected a result from the urlbar or
     * searchbar.
     *
     * @param {Event} event
     *        The event that triggered the selection.
     * @param {string} source
     *        Either "urlbar" or "searchbar" depending on the source.
     * @param {number} index
     *        The index that the user chose in the popup, or -1 if there wasn't a
     *        selection.
     * @param {string} userSelectionBehavior
     *        How the user cycled through results before picking the current match.
     *        Could be one of "tab", "arrow" or "none".
     */
    recordSearchSuggestionSelectionMethod(event: Event, source: string, index: number, userSelectionBehavior?: string): void;
    /**
     * Records entry into the Urlbar's search mode.
     *
     * Telemetry records only which search mode is entered and how it was entered.
     * It does not record anything pertaining to searches made within search mode.
     *
     * @param {object} searchMode
     *   A search mode object. See UrlbarInput.setSearchMode documentation for
     *   details.
     */
    recordSearchMode(searchMode: object): void;
    /**
     * The main entry point for recording search related Telemetry. This includes
     * search counts and engagement measurements.
     *
     * Telemetry records only search counts per engine and action origin, but
     * nothing pertaining to the search contents themselves.
     *
     * @param {browser} browser
     *        The browser where the search originated.
     * @param {nsISearchEngine} engine
     *        The engine handling the search.
     * @param {string} source
     *        Where the search originated from. See KNOWN_SEARCH_SOURCES for allowed
     *        values.
     * @param {object} [details] Options object.
     * @param {boolean} [details.isOneOff=false]
     *        true if this event was generated by a one-off search.
     * @param {boolean} [details.isSuggestion=false]
     *        true if this event was generated by a suggested search.
     * @param {boolean} [details.isFormHistory=false]
     *        true if this event was generated by a form history result.
     * @param {string} [details.alias=null]
     *        The search engine alias used in the search, if any.
     * @param {string} [details.newtabSessionId=undefined]
     *        The newtab session that prompted this search, if any.
     * @throws if source is not in the known sources list.
     */
    recordSearch(browser: any, engine: nsISearchEngine, source: string, details?: {
        isOneOff?: boolean;
        isSuggestion?: boolean;
        isFormHistory?: boolean;
        alias?: string;
        newtabSessionId?: string;
    }): void;
    /**
     * This function handles the "urlbar", "urlbar-oneoff", "searchbar" and
     * "searchbar-oneoff" sources.
     *
     * @param {browser} browser
     *   The browser where the search originated.
     * @param {nsISearchEngine} engine
     *   The engine handling the search.
     * @param {string} source
     *   Where the search originated from.
     * @param {object} details
     *   See {@link BrowserSearchTelemetryHandler.recordSearch}
     */
    _handleSearchAndUrlbar(browser: any, engine: nsISearchEngine, source: string, details: object): void;
    _recordSearch(browser: any, engine: any, url: any, source: any, action?: any): void;
}
export {};
