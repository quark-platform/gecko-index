[
  {
    "type": "class",
    "id": "DNSLookup",
    "line": 88,
    "methods": [
      {
        "type": "method",
        "id": "constructor",
        "line": 89,
        "params": [
          {
            "type": "params",
            "id": "domain",
            "line": 89
          },
          {
            "type": "params",
            "id": "trrServer",
            "line": 89
          },
          {
            "type": "params",
            "id": "callback",
            "line": 89
          }
        ],
        "kind": "constructor"
      },
      {
        "type": "method",
        "id": "doLookup",
        "line": 96,
        "params": [],
        "kind": "method"
      },
      {
        "type": "method",
        "id": "onLookupComplete",
        "line": 114,
        "params": [
          {
            "type": "params",
            "id": "request",
            "line": 114
          },
          {
            "type": "params",
            "id": "record",
            "line": 114
          },
          {
            "type": "params",
            "id": "status",
            "line": 114
          }
        ],
        "kind": "method"
      }
    ]
  },
  {
    "type": "class",
    "id": "LookupAggregator",
    "line": 131,
    "methods": [
      {
        "type": "method",
        "id": "constructor",
        "line": 132,
        "params": [
          {
            "type": "params",
            "id": "onCompleteCallback",
            "line": 132
          },
          {
            "type": "params",
            "id": "trrList",
            "line": 132
          }
        ],
        "kind": "constructor"
      },
      {
        "type": "method",
        "id": "run",
        "line": 150,
        "params": [],
        "kind": "method"
      },
      {
        "type": "method",
        "id": "abort",
        "line": 184,
        "params": [],
        "kind": "method"
      },
      {
        "type": "method",
        "id": "markUnstableNetwork",
        "line": 188,
        "params": [],
        "kind": "method"
      },
      {
        "type": "method",
        "id": "markCaptivePortal",
        "line": 192,
        "params": [],
        "kind": "method"
      },
      {
        "type": "method",
        "id": "recordResults",
        "line": 196,
        "params": [],
        "kind": "method"
      }
    ]
  },
  {
    "type": "class",
    "id": "TRRRacer",
    "line": 237,
    "methods": [
      {
        "type": "method",
        "id": "constructor",
        "line": 238,
        "params": [
          {
            "type": "params",
            "id": "onCompleteCallback",
            "line": 238
          },
          {
            "type": "params",
            "id": "trrList",
            "line": 238
          }
        ],
        "kind": "constructor"
      },
      {
        "type": "method",
        "id": "run",
        "line": 246,
        "params": [],
        "kind": "method"
      },
      {
        "type": "method",
        "id": "onComplete",
        "line": 265,
        "params": [],
        "kind": "method"
      },
      {
        "type": "method",
        "id": "getFastestTRR",
        "line": 276,
        "params": [],
        "kind": "method"
      },
      {
        "type": "method",
        "id": "_getFastestTRRFromResults",
        "line": 296,
        "params": [
          {
            "type": "params",
            "id": "results",
            "line": 296
          }
        ],
        "comments": [
          {
            "description": "Given an array of { trr, time }, returns the trr with smallest mean time. Separate from _getFastestTRR for easy unit-testing.",
            "tags": [
              {
                "tag": "returns",
                "name": "The",
                "type": "",
                "optional": false,
                "description": "TRR with the fastest average time. If returnRandomDefault is false-y, returns undefined if no valid times were present in the results. Otherwise, returns one of the present TRRs at random.",
                "problems": [],
                "source": [
                  {
                    "number": 5,
                    "source": "   * @returns The TRR with the fastest average time.",
                    "tokens": {
                      "start": "   ",
                      "delimiter": "*",
                      "postDelimiter": " ",
                      "tag": "@returns",
                      "postTag": " ",
                      "name": "The",
                      "postName": " ",
                      "type": "",
                      "postType": "",
                      "description": "TRR with the fastest average time.",
                      "end": "",
                      "lineEnd": ""
                    }
                  },
                  {
                    "number": 6,
                    "source": "   *          If returnRandomDefault is false-y, returns undefined if no valid",
                    "tokens": {
                      "start": "   ",
                      "delimiter": "*",
                      "postDelimiter": "          ",
                      "tag": "",
                      "postTag": "",
                      "name": "",
                      "postName": "",
                      "type": "",
                      "postType": "",
                      "description": "If returnRandomDefault is false-y, returns undefined if no valid",
                      "end": "",
                      "lineEnd": ""
                    }
                  },
                  {
                    "number": 7,
                    "source": "   *          times were present in the results. Otherwise, returns one of the",
                    "tokens": {
                      "start": "   ",
                      "delimiter": "*",
                      "postDelimiter": "          ",
                      "tag": "",
                      "postTag": "",
                      "name": "",
                      "postName": "",
                      "type": "",
                      "postType": "",
                      "description": "times were present in the results. Otherwise, returns one of the",
                      "end": "",
                      "lineEnd": ""
                    }
                  },
                  {
                    "number": 8,
                    "source": "   *          present TRRs at random.",
                    "tokens": {
                      "start": "   ",
                      "delimiter": "*",
                      "postDelimiter": "          ",
                      "tag": "",
                      "postTag": "",
                      "name": "",
                      "postName": "",
                      "type": "",
                      "postType": "",
                      "description": "present TRRs at random.",
                      "end": "",
                      "lineEnd": ""
                    }
                  },
                  {
                    "number": 9,
                    "source": "   ",
                    "tokens": {
                      "start": "   ",
                      "delimiter": "",
                      "postDelimiter": "",
                      "tag": "",
                      "postTag": "",
                      "name": "",
                      "postName": "",
                      "type": "",
                      "postType": "",
                      "description": "",
                      "end": "",
                      "lineEnd": ""
                    }
                  },
                  {
                    "number": 10,
                    "source": "*/",
                    "tokens": {
                      "start": "",
                      "delimiter": "",
                      "postDelimiter": "",
                      "tag": "",
                      "postTag": "",
                      "name": "",
                      "postName": "",
                      "type": "",
                      "postType": "",
                      "description": "",
                      "end": "*/",
                      "lineEnd": ""
                    }
                  }
                ]
              }
            ],
            "source": [
              {
                "number": 0,
                "source": "/**",
                "tokens": {
                  "start": "",
                  "delimiter": "/**",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 1,
                "source": "",
                "tokens": {
                  "start": "",
                  "delimiter": "",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 2,
                "source": "   * Given an array of { trr, time }, returns the trr with smallest mean time.",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": " ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "Given an array of { trr, time }, returns the trr with smallest mean time.",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 3,
                "source": "   * Separate from _getFastestTRR for easy unit-testing.",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": " ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "Separate from _getFastestTRR for easy unit-testing.",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 4,
                "source": "   *",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 5,
                "source": "   * @returns The TRR with the fastest average time.",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": " ",
                  "tag": "@returns",
                  "postTag": " ",
                  "name": "The",
                  "postName": " ",
                  "type": "",
                  "postType": "",
                  "description": "TRR with the fastest average time.",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 6,
                "source": "   *          If returnRandomDefault is false-y, returns undefined if no valid",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": "          ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "If returnRandomDefault is false-y, returns undefined if no valid",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 7,
                "source": "   *          times were present in the results. Otherwise, returns one of the",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": "          ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "times were present in the results. Otherwise, returns one of the",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 8,
                "source": "   *          present TRRs at random.",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": "          ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "present TRRs at random.",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 9,
                "source": "   ",
                "tokens": {
                  "start": "   ",
                  "delimiter": "",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 10,
                "source": "*/",
                "tokens": {
                  "start": "",
                  "delimiter": "",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "*/",
                  "lineEnd": ""
                }
              }
            ],
            "problems": []
          }
        ],
        "kind": "method"
      },
      {
        "type": "method",
        "id": "_runNewAggregator",
        "line": 349,
        "params": [],
        "kind": "method"
      },
      {
        "type": "method",
        "id": "observe",
        "line": 361,
        "params": [
          {
            "type": "params",
            "id": "subject",
            "line": 361
          },
          {
            "type": "params",
            "id": "topic",
            "line": 361
          },
          {
            "type": "params",
            "id": "data",
            "line": 361
          }
        ],
        "comments": [
          {
            "description": "When the link goes *down*, or when we detect a locked captive portal, we",
            "tags": [],
            "source": [
              {
                "number": 0,
                "source": "/**",
                "tokens": {
                  "start": "",
                  "delimiter": "/**",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 1,
                "source": " When the link goes *down*, or when we detect a locked captive portal, we",
                "tokens": {
                  "start": " ",
                  "delimiter": "",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "When the link goes *down*, or when we detect a locked captive portal, we",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 2,
                "source": "*/",
                "tokens": {
                  "start": "",
                  "delimiter": "",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "*/",
                  "lineEnd": ""
                }
              }
            ],
            "problems": []
          },
          {
            "description": "abort any ongoing LookupAggregator run. When the link goes *up*, or we",
            "tags": [],
            "source": [
              {
                "number": 0,
                "source": "/**",
                "tokens": {
                  "start": "",
                  "delimiter": "/**",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 1,
                "source": " abort any ongoing LookupAggregator run. When the link goes *up*, or we",
                "tokens": {
                  "start": " ",
                  "delimiter": "",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "abort any ongoing LookupAggregator run. When the link goes *up*, or we",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 2,
                "source": "*/",
                "tokens": {
                  "start": "",
                  "delimiter": "",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "*/",
                  "lineEnd": ""
                }
              }
            ],
            "problems": []
          },
          {
            "description": "detect a newly unlocked portal, we start a run if one isn't ongoing.",
            "tags": [],
            "source": [
              {
                "number": 0,
                "source": "/**",
                "tokens": {
                  "start": "",
                  "delimiter": "/**",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 1,
                "source": " detect a newly unlocked portal, we start a run if one isn't ongoing.",
                "tokens": {
                  "start": " ",
                  "delimiter": "",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "detect a newly unlocked portal, we start a run if one isn't ongoing.",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 2,
                "source": "*/",
                "tokens": {
                  "start": "",
                  "delimiter": "",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "*/",
                  "lineEnd": ""
                }
              }
            ],
            "problems": []
          }
        ],
        "kind": "method"
      }
    ]
  }
]