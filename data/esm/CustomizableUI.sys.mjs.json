[
  {
    "type": "variable-declaration",
    "id": "CustomizableUI",
    "line": 3703,
    "typeEstimation": {
      "type": "object-estimation",
      "keys": [
        {
          "type": "object-property",
          "line": 3707,
          "id": "AREA_NAVBAR",
          "comments": [
            {
              "description": "Constant reference to the ID of the navigation toolbar.",
              "tags": [],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Constant reference to the ID of the navigation toolbar.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Constant reference to the ID of the navigation toolbar.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ]
        },
        {
          "type": "object-property",
          "line": 3711,
          "id": "AREA_MENUBAR",
          "comments": [
            {
              "description": "Constant reference to the ID of the menubar's toolbar.",
              "tags": [],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Constant reference to the ID of the menubar's toolbar.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Constant reference to the ID of the menubar's toolbar.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ]
        },
        {
          "type": "object-property",
          "line": 3715,
          "id": "AREA_TABSTRIP",
          "comments": [
            {
              "description": "Constant reference to the ID of the tabstrip toolbar.",
              "tags": [],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Constant reference to the ID of the tabstrip toolbar.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Constant reference to the ID of the tabstrip toolbar.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ]
        },
        {
          "type": "object-property",
          "line": 3719,
          "id": "AREA_BOOKMARKS",
          "comments": [
            {
              "description": "Constant reference to the ID of the bookmarks toolbar.",
              "tags": [],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Constant reference to the ID of the bookmarks toolbar.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Constant reference to the ID of the bookmarks toolbar.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ]
        },
        {
          "type": "object-property",
          "line": 3723,
          "id": "AREA_FIXED_OVERFLOW_PANEL",
          "comments": [
            {
              "description": "Constant reference to the ID of the non-dymanic (fixed) list in the overflow panel.",
              "tags": [],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Constant reference to the ID of the non-dymanic (fixed) list in the overflow panel.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Constant reference to the ID of the non-dymanic (fixed) list in the overflow panel.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ]
        },
        {
          "type": "object-property",
          "line": 3727,
          "id": "AREA_ADDONS",
          "comments": [
            {
              "description": "Constant reference to the ID of the addons area.",
              "tags": [],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Constant reference to the ID of the addons area.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Constant reference to the ID of the addons area.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ]
        },
        {
          "type": "object-property",
          "line": 3736,
          "id": "AREA_NO_AREA",
          "comments": [
            {
              "description": "Constant reference to the ID of the customization palette, which is where widgets go when they're not assigned to an area. Note that this area is \"virtual\" in that it's never set as a value for a widgets currentArea or defaultArea. It's only used for the `canWidgetMoveToArea` function to check if widgets can be moved to the palette. Callers who wish to move items to the palette should use `removeWidgetFromArea`.",
              "tags": [],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Constant reference to the ID of the customization palette, which is",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Constant reference to the ID of the customization palette, which is",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * where widgets go when they're not assigned to an area. Note that this",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "where widgets go when they're not assigned to an area. Note that this",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * area is \"virtual\" in that it's never set as a value for a widgets",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "area is \"virtual\" in that it's never set as a value for a widgets",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   * currentArea or defaultArea. It's only used for the `canWidgetMoveToArea`",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "currentArea or defaultArea. It's only used for the `canWidgetMoveToArea`",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   * function to check if widgets can be moved to the palette. Callers who",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "function to check if widgets can be moved to the palette. Callers who",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "   * wish to move items to the palette should use `removeWidgetFromArea`.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "wish to move items to the palette should use `removeWidgetFromArea`.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 8,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 9,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ]
        },
        {
          "type": "object-property",
          "line": 3740,
          "id": "TYPE_PANEL",
          "comments": [
            {
              "description": "Constant indicating the area is a panel.",
              "tags": [],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Constant indicating the area is a panel.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Constant indicating the area is a panel.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ]
        },
        {
          "type": "object-property",
          "line": 3744,
          "id": "TYPE_TOOLBAR",
          "comments": [
            {
              "description": "Constant indicating the area is a toolbar.",
              "tags": [],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Constant indicating the area is a toolbar.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Constant indicating the area is a toolbar.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ]
        },
        {
          "type": "object-property",
          "line": 3749,
          "id": "PROVIDER_XUL",
          "comments": [
            {
              "description": "Constant indicating a XUL-type provider.",
              "tags": [],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Constant indicating a XUL-type provider.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Constant indicating a XUL-type provider.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ]
        },
        {
          "type": "object-property",
          "line": 3753,
          "id": "PROVIDER_API",
          "comments": [
            {
              "description": "Constant indicating an API-type provider.",
              "tags": [],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Constant indicating an API-type provider.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Constant indicating an API-type provider.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ]
        },
        {
          "type": "object-property",
          "line": 3757,
          "id": "PROVIDER_SPECIAL",
          "comments": [
            {
              "description": "Constant indicating dynamic (special) widgets: spring, spacer, and separator.",
              "tags": [],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Constant indicating dynamic (special) widgets: spring, spacer, and separator.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Constant indicating dynamic (special) widgets: spring, spacer, and separator.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ]
        },
        {
          "type": "object-property",
          "line": 3762,
          "id": "SOURCE_BUILTIN",
          "comments": [
            {
              "description": "Constant indicating the widget is built-in",
              "tags": [],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Constant indicating the widget is built-in",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Constant indicating the widget is built-in",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ]
        },
        {
          "type": "object-property",
          "line": 3767,
          "id": "SOURCE_EXTERNAL",
          "comments": [
            {
              "description": "Constant indicating the widget is externally provided (e.g. by add-ons or other items not part of the builtin widget set).",
              "tags": [],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Constant indicating the widget is externally provided",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Constant indicating the widget is externally provided",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * (e.g. by add-ons or other items not part of the builtin widget set).",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "(e.g. by add-ons or other items not part of the builtin widget set).",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ]
        },
        {
          "type": "object-property",
          "line": 3772,
          "id": "REASON_WINDOW_CLOSED",
          "comments": [
            {
              "description": "Constant indicating the reason the event was fired was a window closing",
              "tags": [],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Constant indicating the reason the event was fired was a window closing",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Constant indicating the reason the event was fired was a window closing",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ]
        },
        {
          "type": "object-property",
          "line": 3777,
          "id": "REASON_AREA_UNREGISTERED",
          "comments": [
            {
              "description": "Constant indicating the reason the event was fired was an area being unregistered separately from window closing mechanics.",
              "tags": [],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Constant indicating the reason the event was fired was an area being",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Constant indicating the reason the event was fired was an area being",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * unregistered separately from window closing mechanics.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "unregistered separately from window closing mechanics.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ]
        },
        {
          "type": "object-property",
          "line": 3784,
          "id": "windows",
          "comments": [
            {
              "description": "An iteratable property of windows managed by CustomizableUI. Note that this can *only* be used as an iterator. ie: for (let window of CustomizableUI.windows) { ... }",
              "tags": [],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * An iteratable property of windows managed by CustomizableUI.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "An iteratable property of windows managed by CustomizableUI.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * Note that this can *only* be used as an iterator. ie:",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Note that this can *only* be used as an iterator. ie:",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   *     for (let window of CustomizableUI.windows) { ... }",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "for (let window of CustomizableUI.windows) { ... }",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "typeEstimation": {
            "type": "object-estimation",
            "keys": []
          }
        },
        {
          "type": "object-method",
          "line": 3891,
          "id": "addListener",
          "comments": [
            {
              "description": "Add a listener object that will get fired for various events regarding customization.",
              "tags": [
                {
                  "tag": "param",
                  "name": "aListener",
                  "type": "",
                  "optional": false,
                  "description": "the listener object to add Not all event handler methods need to be defined. CustomizableUI will catch exceptions. Events are dispatched synchronously on the UI thread, so if you can delay any/some of your processing, that is advisable. The following event handlers are supported: - onWidgetAdded(aWidgetId, aArea, aPosition) Fired when a widget is added to an area. aWidgetId is the widget that was added, aArea the area it was added to, and aPosition the position in which it was added. - onWidgetMoved(aWidgetId, aArea, aOldPosition, aNewPosition) Fired when a widget is moved within its area. aWidgetId is the widget that was moved, aArea the area it was moved in, aOldPosition its old position, and aNewPosition its new position. - onWidgetRemoved(aWidgetId, aArea) Fired when a widget is removed from its area. aWidgetId is the widget that was removed, aArea the area it was removed from. - onWidgetBeforeDOMChange(aNode, aNextNode, aContainer, aIsRemoval) Fired *before* a widget's DOM node is acted upon by CustomizableUI (to add, move or remove it). aNode is the DOM node changed, aNextNode the DOM node (if any) before which a widget will be inserted, aContainer the *actual* DOM container (could be an overflow panel in case of an overflowable toolbar), and aWasRemoval is true iff the action about to happen is the removal of the DOM node. - onWidgetAfterDOMChange(aNode, aNextNode, aContainer, aWasRemoval) Like onWidgetBeforeDOMChange, but fired after the change to the DOM node of the widget. - onWidgetReset(aNode, aContainer) Fired after a reset to default placements moves a widget's node to a different location. aNode is the widget's node, aContainer is the area it was moved into (NB: it might already have been there and been moved to a different position!) - onWidgetUndoMove(aNode, aContainer) Fired after undoing a reset to default placements moves a widget's node to a different location. aNode is the widget's node, aContainer is the area it was moved into (NB: it might already have been there and been moved to a different position!) - onAreaReset(aArea, aContainer) Fired after a reset to default placements is complete on an area's DOM node. Note that this is fired for each DOM node. aArea is the area that was reset, aContainer the DOM node that was reset. - onWidgetCreated(aWidgetId) Fired when a widget with id aWidgetId has been created, but before it is added to any placements or any DOM nodes have been constructed. Only fired for API-based widgets. - onWidgetAfterCreation(aWidgetId, aArea) Fired after a widget with id aWidgetId has been created, and has been added to either its default area or the area in which it was placed previously. If the widget has no default area and/or it has never been placed anywhere, aArea may be null. Only fired for API-based widgets. - onWidgetDestroyed(aWidgetId) Fired when widgets are destroyed. aWidgetId is the widget that is being destroyed. Only fired for API-based widgets. - onWidgetInstanceRemoved(aWidgetId, aDocument) Fired when a window is unloaded and a widget's instance is destroyed because of this. Only fired for API-based widgets. - onWidgetDrag(aWidgetId, aArea) Fired both when and after customize mode drag handling system tries to determine the width and height of widget aWidgetId when dragged to a different area. aArea will be the area the item is dragged to, or undefined after the measurements have been done and the node has been moved back to its 'regular' area. - onCustomizeStart(aWindow) Fired when opening customize mode in aWindow. - onCustomizeEnd(aWindow) Fired when exiting customize mode in aWindow. - onWidgetOverflow(aNode, aContainer) Fired when a widget's DOM node is overflowing its container, a toolbar, and will be displayed in the overflow panel. - onWidgetUnderflow(aNode, aContainer) Fired when a widget's DOM node is *not* overflowing its container, a toolbar, anymore. - onWindowOpened(aWindow) Fired when a window has been opened that is managed by CustomizableUI, once all of the prerequisite setup has been done. - onWindowClosed(aWindow) Fired when a window that has been managed by CustomizableUI has been closed. - onAreaNodeRegistered(aArea, aContainer) Fired after an area node is first built when it is registered. This is often when the window has opened, but in the case of add-ons, could fire when the node has just been registered with CustomizableUI after an add-on update or disable/enable sequence. - onAreaNodeUnregistered(aArea, aContainer, aReason) Fired when an area node is explicitly unregistered by an API caller, or by a window closing. The aReason parameter indicates which of these is the case.",
                  "problems": [],
                  "source": [
                    {
                      "number": 5,
                      "source": "   * @param aListener the listener object to add",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aListener",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "the listener object to add",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 6,
                      "source": "   *",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 7,
                      "source": "   * Not all event handler methods need to be defined.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "Not all event handler methods need to be defined.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 8,
                      "source": "   * CustomizableUI will catch exceptions. Events are dispatched",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "CustomizableUI will catch exceptions. Events are dispatched",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 9,
                      "source": "   * synchronously on the UI thread, so if you can delay any/some of your",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "synchronously on the UI thread, so if you can delay any/some of your",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 10,
                      "source": "   * processing, that is advisable. The following event handlers are supported:",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "processing, that is advisable. The following event handlers are supported:",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 11,
                      "source": "   *   - onWidgetAdded(aWidgetId, aArea, aPosition)",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "   ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "- onWidgetAdded(aWidgetId, aArea, aPosition)",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 12,
                      "source": "   *     Fired when a widget is added to an area. aWidgetId is the widget that",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "Fired when a widget is added to an area. aWidgetId is the widget that",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 13,
                      "source": "   *     was added, aArea the area it was added to, and aPosition the position",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "was added, aArea the area it was added to, and aPosition the position",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 14,
                      "source": "   *     in which it was added.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "in which it was added.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 15,
                      "source": "   *   - onWidgetMoved(aWidgetId, aArea, aOldPosition, aNewPosition)",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "   ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "- onWidgetMoved(aWidgetId, aArea, aOldPosition, aNewPosition)",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 16,
                      "source": "   *     Fired when a widget is moved within its area. aWidgetId is the widget",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "Fired when a widget is moved within its area. aWidgetId is the widget",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 17,
                      "source": "   *     that was moved, aArea the area it was moved in, aOldPosition its old",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "that was moved, aArea the area it was moved in, aOldPosition its old",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 18,
                      "source": "   *     position, and aNewPosition its new position.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "position, and aNewPosition its new position.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 19,
                      "source": "   *   - onWidgetRemoved(aWidgetId, aArea)",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "   ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "- onWidgetRemoved(aWidgetId, aArea)",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 20,
                      "source": "   *     Fired when a widget is removed from its area. aWidgetId is the widget",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "Fired when a widget is removed from its area. aWidgetId is the widget",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 21,
                      "source": "   *     that was removed, aArea the area it was removed from.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "that was removed, aArea the area it was removed from.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 22,
                      "source": "   *",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 23,
                      "source": "   *   - onWidgetBeforeDOMChange(aNode, aNextNode, aContainer, aIsRemoval)",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "   ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "- onWidgetBeforeDOMChange(aNode, aNextNode, aContainer, aIsRemoval)",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 24,
                      "source": "   *     Fired *before* a widget's DOM node is acted upon by CustomizableUI",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "Fired *before* a widget's DOM node is acted upon by CustomizableUI",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 25,
                      "source": "   *     (to add, move or remove it). aNode is the DOM node changed, aNextNode",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "(to add, move or remove it). aNode is the DOM node changed, aNextNode",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 26,
                      "source": "   *     the DOM node (if any) before which a widget will be inserted,",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "the DOM node (if any) before which a widget will be inserted,",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 27,
                      "source": "   *     aContainer the *actual* DOM container (could be an overflow panel in",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "aContainer the *actual* DOM container (could be an overflow panel in",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 28,
                      "source": "   *     case of an overflowable toolbar), and aWasRemoval is true iff the",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "case of an overflowable toolbar), and aWasRemoval is true iff the",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 29,
                      "source": "   *     action about to happen is the removal of the DOM node.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "action about to happen is the removal of the DOM node.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 30,
                      "source": "   *   - onWidgetAfterDOMChange(aNode, aNextNode, aContainer, aWasRemoval)",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "   ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "- onWidgetAfterDOMChange(aNode, aNextNode, aContainer, aWasRemoval)",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 31,
                      "source": "   *     Like onWidgetBeforeDOMChange, but fired after the change to the DOM",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "Like onWidgetBeforeDOMChange, but fired after the change to the DOM",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 32,
                      "source": "   *     node of the widget.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "node of the widget.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 33,
                      "source": "   *",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 34,
                      "source": "   *   - onWidgetReset(aNode, aContainer)",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "   ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "- onWidgetReset(aNode, aContainer)",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 35,
                      "source": "   *     Fired after a reset to default placements moves a widget's node to a",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "Fired after a reset to default placements moves a widget's node to a",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 36,
                      "source": "   *     different location. aNode is the widget's node, aContainer is the",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "different location. aNode is the widget's node, aContainer is the",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 37,
                      "source": "   *     area it was moved into (NB: it might already have been there and been",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "area it was moved into (NB: it might already have been there and been",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 38,
                      "source": "   *     moved to a different position!)",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "moved to a different position!)",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 39,
                      "source": "   *   - onWidgetUndoMove(aNode, aContainer)",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "   ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "- onWidgetUndoMove(aNode, aContainer)",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 40,
                      "source": "   *     Fired after undoing a reset to default placements moves a widget's",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "Fired after undoing a reset to default placements moves a widget's",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 41,
                      "source": "   *     node to a different location. aNode is the widget's node, aContainer",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "node to a different location. aNode is the widget's node, aContainer",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 42,
                      "source": "   *     is the area it was moved into (NB: it might already have been there",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "is the area it was moved into (NB: it might already have been there",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 43,
                      "source": "   *     and been moved to a different position!)",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "and been moved to a different position!)",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 44,
                      "source": "   *   - onAreaReset(aArea, aContainer)",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "   ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "- onAreaReset(aArea, aContainer)",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 45,
                      "source": "   *     Fired after a reset to default placements is complete on an area's",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "Fired after a reset to default placements is complete on an area's",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 46,
                      "source": "   *     DOM node. Note that this is fired for each DOM node. aArea is the area",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "DOM node. Note that this is fired for each DOM node. aArea is the area",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 47,
                      "source": "   *     that was reset, aContainer the DOM node that was reset.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "that was reset, aContainer the DOM node that was reset.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 48,
                      "source": "   *",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 49,
                      "source": "   *   - onWidgetCreated(aWidgetId)",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "   ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "- onWidgetCreated(aWidgetId)",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 50,
                      "source": "   *     Fired when a widget with id aWidgetId has been created, but before it",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "Fired when a widget with id aWidgetId has been created, but before it",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 51,
                      "source": "   *     is added to any placements or any DOM nodes have been constructed.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "is added to any placements or any DOM nodes have been constructed.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 52,
                      "source": "   *     Only fired for API-based widgets.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "Only fired for API-based widgets.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 53,
                      "source": "   *   - onWidgetAfterCreation(aWidgetId, aArea)",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "   ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "- onWidgetAfterCreation(aWidgetId, aArea)",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 54,
                      "source": "   *     Fired after a widget with id aWidgetId has been created, and has been",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "Fired after a widget with id aWidgetId has been created, and has been",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 55,
                      "source": "   *     added to either its default area or the area in which it was placed",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "added to either its default area or the area in which it was placed",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 56,
                      "source": "   *     previously. If the widget has no default area and/or it has never",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "previously. If the widget has no default area and/or it has never",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 57,
                      "source": "   *     been placed anywhere, aArea may be null. Only fired for API-based",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "been placed anywhere, aArea may be null. Only fired for API-based",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 58,
                      "source": "   *     widgets.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "widgets.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 59,
                      "source": "   *   - onWidgetDestroyed(aWidgetId)",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "   ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "- onWidgetDestroyed(aWidgetId)",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 60,
                      "source": "   *     Fired when widgets are destroyed. aWidgetId is the widget that is",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "Fired when widgets are destroyed. aWidgetId is the widget that is",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 61,
                      "source": "   *     being destroyed. Only fired for API-based widgets.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "being destroyed. Only fired for API-based widgets.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 62,
                      "source": "   *   - onWidgetInstanceRemoved(aWidgetId, aDocument)",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "   ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "- onWidgetInstanceRemoved(aWidgetId, aDocument)",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 63,
                      "source": "   *     Fired when a window is unloaded and a widget's instance is destroyed",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "Fired when a window is unloaded and a widget's instance is destroyed",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 64,
                      "source": "   *     because of this. Only fired for API-based widgets.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "because of this. Only fired for API-based widgets.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 65,
                      "source": "   *",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 66,
                      "source": "   *   - onWidgetDrag(aWidgetId, aArea)",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "   ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "- onWidgetDrag(aWidgetId, aArea)",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 67,
                      "source": "   *     Fired both when and after customize mode drag handling system tries",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "Fired both when and after customize mode drag handling system tries",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 68,
                      "source": "   *     to determine the width and height of widget aWidgetId when dragged to a",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "to determine the width and height of widget aWidgetId when dragged to a",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 69,
                      "source": "   *     different area. aArea will be the area the item is dragged to, or",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "different area. aArea will be the area the item is dragged to, or",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 70,
                      "source": "   *     undefined after the measurements have been done and the node has been",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "undefined after the measurements have been done and the node has been",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 71,
                      "source": "   *     moved back to its 'regular' area.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "moved back to its 'regular' area.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 72,
                      "source": "   *",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 73,
                      "source": "   *   - onCustomizeStart(aWindow)",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "   ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "- onCustomizeStart(aWindow)",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 74,
                      "source": "   *     Fired when opening customize mode in aWindow.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "Fired when opening customize mode in aWindow.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 75,
                      "source": "   *   - onCustomizeEnd(aWindow)",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "   ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "- onCustomizeEnd(aWindow)",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 76,
                      "source": "   *     Fired when exiting customize mode in aWindow.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "Fired when exiting customize mode in aWindow.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 77,
                      "source": "   *",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 78,
                      "source": "   *   - onWidgetOverflow(aNode, aContainer)",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "   ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "- onWidgetOverflow(aNode, aContainer)",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 79,
                      "source": "   *     Fired when a widget's DOM node is overflowing its container, a toolbar,",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "Fired when a widget's DOM node is overflowing its container, a toolbar,",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 80,
                      "source": "   *     and will be displayed in the overflow panel.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "and will be displayed in the overflow panel.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 81,
                      "source": "   *   - onWidgetUnderflow(aNode, aContainer)",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "   ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "- onWidgetUnderflow(aNode, aContainer)",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 82,
                      "source": "   *     Fired when a widget's DOM node is *not* overflowing its container, a",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "Fired when a widget's DOM node is *not* overflowing its container, a",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 83,
                      "source": "   *     toolbar, anymore.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "toolbar, anymore.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 84,
                      "source": "   *   - onWindowOpened(aWindow)",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "   ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "- onWindowOpened(aWindow)",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 85,
                      "source": "   *     Fired when a window has been opened that is managed by CustomizableUI,",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "Fired when a window has been opened that is managed by CustomizableUI,",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 86,
                      "source": "   *     once all of the prerequisite setup has been done.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "once all of the prerequisite setup has been done.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 87,
                      "source": "   *   - onWindowClosed(aWindow)",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "   ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "- onWindowClosed(aWindow)",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 88,
                      "source": "   *     Fired when a window that has been managed by CustomizableUI has been",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "Fired when a window that has been managed by CustomizableUI has been",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 89,
                      "source": "   *     closed.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "closed.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 90,
                      "source": "   *   - onAreaNodeRegistered(aArea, aContainer)",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "   ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "- onAreaNodeRegistered(aArea, aContainer)",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 91,
                      "source": "   *     Fired after an area node is first built when it is registered. This",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "Fired after an area node is first built when it is registered. This",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 92,
                      "source": "   *     is often when the window has opened, but in the case of add-ons,",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "is often when the window has opened, but in the case of add-ons,",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 93,
                      "source": "   *     could fire when the node has just been registered with CustomizableUI",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "could fire when the node has just been registered with CustomizableUI",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 94,
                      "source": "   *     after an add-on update or disable/enable sequence.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "after an add-on update or disable/enable sequence.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 95,
                      "source": "   *   - onAreaNodeUnregistered(aArea, aContainer, aReason)",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "   ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "- onAreaNodeUnregistered(aArea, aContainer, aReason)",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 96,
                      "source": "   *     Fired when an area node is explicitly unregistered by an API caller,",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "Fired when an area node is explicitly unregistered by an API caller,",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 97,
                      "source": "   *     or by a window closing. The aReason parameter indicates which of",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "or by a window closing. The aReason parameter indicates which of",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 98,
                      "source": "   *     these is the case.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "these is the case.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 99,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 100,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Add a listener object that will get fired for various events regarding",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Add a listener object that will get fired for various events regarding",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * customization.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "customization.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   * @param aListener the listener object to add",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aListener",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "the listener object to add",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "   * Not all event handler methods need to be defined.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Not all event handler methods need to be defined.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 8,
                  "source": "   * CustomizableUI will catch exceptions. Events are dispatched",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "CustomizableUI will catch exceptions. Events are dispatched",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 9,
                  "source": "   * synchronously on the UI thread, so if you can delay any/some of your",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "synchronously on the UI thread, so if you can delay any/some of your",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 10,
                  "source": "   * processing, that is advisable. The following event handlers are supported:",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "processing, that is advisable. The following event handlers are supported:",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 11,
                  "source": "   *   - onWidgetAdded(aWidgetId, aArea, aPosition)",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "   ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- onWidgetAdded(aWidgetId, aArea, aPosition)",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 12,
                  "source": "   *     Fired when a widget is added to an area. aWidgetId is the widget that",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Fired when a widget is added to an area. aWidgetId is the widget that",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 13,
                  "source": "   *     was added, aArea the area it was added to, and aPosition the position",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "was added, aArea the area it was added to, and aPosition the position",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 14,
                  "source": "   *     in which it was added.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "in which it was added.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 15,
                  "source": "   *   - onWidgetMoved(aWidgetId, aArea, aOldPosition, aNewPosition)",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "   ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- onWidgetMoved(aWidgetId, aArea, aOldPosition, aNewPosition)",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 16,
                  "source": "   *     Fired when a widget is moved within its area. aWidgetId is the widget",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Fired when a widget is moved within its area. aWidgetId is the widget",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 17,
                  "source": "   *     that was moved, aArea the area it was moved in, aOldPosition its old",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "that was moved, aArea the area it was moved in, aOldPosition its old",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 18,
                  "source": "   *     position, and aNewPosition its new position.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "position, and aNewPosition its new position.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 19,
                  "source": "   *   - onWidgetRemoved(aWidgetId, aArea)",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "   ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- onWidgetRemoved(aWidgetId, aArea)",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 20,
                  "source": "   *     Fired when a widget is removed from its area. aWidgetId is the widget",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Fired when a widget is removed from its area. aWidgetId is the widget",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 21,
                  "source": "   *     that was removed, aArea the area it was removed from.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "that was removed, aArea the area it was removed from.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 22,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 23,
                  "source": "   *   - onWidgetBeforeDOMChange(aNode, aNextNode, aContainer, aIsRemoval)",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "   ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- onWidgetBeforeDOMChange(aNode, aNextNode, aContainer, aIsRemoval)",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 24,
                  "source": "   *     Fired *before* a widget's DOM node is acted upon by CustomizableUI",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Fired *before* a widget's DOM node is acted upon by CustomizableUI",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 25,
                  "source": "   *     (to add, move or remove it). aNode is the DOM node changed, aNextNode",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "(to add, move or remove it). aNode is the DOM node changed, aNextNode",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 26,
                  "source": "   *     the DOM node (if any) before which a widget will be inserted,",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "the DOM node (if any) before which a widget will be inserted,",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 27,
                  "source": "   *     aContainer the *actual* DOM container (could be an overflow panel in",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "aContainer the *actual* DOM container (could be an overflow panel in",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 28,
                  "source": "   *     case of an overflowable toolbar), and aWasRemoval is true iff the",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "case of an overflowable toolbar), and aWasRemoval is true iff the",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 29,
                  "source": "   *     action about to happen is the removal of the DOM node.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "action about to happen is the removal of the DOM node.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 30,
                  "source": "   *   - onWidgetAfterDOMChange(aNode, aNextNode, aContainer, aWasRemoval)",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "   ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- onWidgetAfterDOMChange(aNode, aNextNode, aContainer, aWasRemoval)",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 31,
                  "source": "   *     Like onWidgetBeforeDOMChange, but fired after the change to the DOM",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Like onWidgetBeforeDOMChange, but fired after the change to the DOM",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 32,
                  "source": "   *     node of the widget.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "node of the widget.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 33,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 34,
                  "source": "   *   - onWidgetReset(aNode, aContainer)",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "   ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- onWidgetReset(aNode, aContainer)",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 35,
                  "source": "   *     Fired after a reset to default placements moves a widget's node to a",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Fired after a reset to default placements moves a widget's node to a",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 36,
                  "source": "   *     different location. aNode is the widget's node, aContainer is the",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "different location. aNode is the widget's node, aContainer is the",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 37,
                  "source": "   *     area it was moved into (NB: it might already have been there and been",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "area it was moved into (NB: it might already have been there and been",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 38,
                  "source": "   *     moved to a different position!)",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "moved to a different position!)",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 39,
                  "source": "   *   - onWidgetUndoMove(aNode, aContainer)",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "   ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- onWidgetUndoMove(aNode, aContainer)",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 40,
                  "source": "   *     Fired after undoing a reset to default placements moves a widget's",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Fired after undoing a reset to default placements moves a widget's",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 41,
                  "source": "   *     node to a different location. aNode is the widget's node, aContainer",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "node to a different location. aNode is the widget's node, aContainer",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 42,
                  "source": "   *     is the area it was moved into (NB: it might already have been there",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "is the area it was moved into (NB: it might already have been there",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 43,
                  "source": "   *     and been moved to a different position!)",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "and been moved to a different position!)",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 44,
                  "source": "   *   - onAreaReset(aArea, aContainer)",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "   ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- onAreaReset(aArea, aContainer)",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 45,
                  "source": "   *     Fired after a reset to default placements is complete on an area's",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Fired after a reset to default placements is complete on an area's",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 46,
                  "source": "   *     DOM node. Note that this is fired for each DOM node. aArea is the area",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "DOM node. Note that this is fired for each DOM node. aArea is the area",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 47,
                  "source": "   *     that was reset, aContainer the DOM node that was reset.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "that was reset, aContainer the DOM node that was reset.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 48,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 49,
                  "source": "   *   - onWidgetCreated(aWidgetId)",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "   ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- onWidgetCreated(aWidgetId)",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 50,
                  "source": "   *     Fired when a widget with id aWidgetId has been created, but before it",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Fired when a widget with id aWidgetId has been created, but before it",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 51,
                  "source": "   *     is added to any placements or any DOM nodes have been constructed.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "is added to any placements or any DOM nodes have been constructed.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 52,
                  "source": "   *     Only fired for API-based widgets.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Only fired for API-based widgets.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 53,
                  "source": "   *   - onWidgetAfterCreation(aWidgetId, aArea)",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "   ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- onWidgetAfterCreation(aWidgetId, aArea)",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 54,
                  "source": "   *     Fired after a widget with id aWidgetId has been created, and has been",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Fired after a widget with id aWidgetId has been created, and has been",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 55,
                  "source": "   *     added to either its default area or the area in which it was placed",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "added to either its default area or the area in which it was placed",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 56,
                  "source": "   *     previously. If the widget has no default area and/or it has never",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "previously. If the widget has no default area and/or it has never",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 57,
                  "source": "   *     been placed anywhere, aArea may be null. Only fired for API-based",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "been placed anywhere, aArea may be null. Only fired for API-based",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 58,
                  "source": "   *     widgets.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "widgets.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 59,
                  "source": "   *   - onWidgetDestroyed(aWidgetId)",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "   ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- onWidgetDestroyed(aWidgetId)",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 60,
                  "source": "   *     Fired when widgets are destroyed. aWidgetId is the widget that is",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Fired when widgets are destroyed. aWidgetId is the widget that is",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 61,
                  "source": "   *     being destroyed. Only fired for API-based widgets.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "being destroyed. Only fired for API-based widgets.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 62,
                  "source": "   *   - onWidgetInstanceRemoved(aWidgetId, aDocument)",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "   ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- onWidgetInstanceRemoved(aWidgetId, aDocument)",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 63,
                  "source": "   *     Fired when a window is unloaded and a widget's instance is destroyed",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Fired when a window is unloaded and a widget's instance is destroyed",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 64,
                  "source": "   *     because of this. Only fired for API-based widgets.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "because of this. Only fired for API-based widgets.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 65,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 66,
                  "source": "   *   - onWidgetDrag(aWidgetId, aArea)",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "   ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- onWidgetDrag(aWidgetId, aArea)",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 67,
                  "source": "   *     Fired both when and after customize mode drag handling system tries",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Fired both when and after customize mode drag handling system tries",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 68,
                  "source": "   *     to determine the width and height of widget aWidgetId when dragged to a",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "to determine the width and height of widget aWidgetId when dragged to a",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 69,
                  "source": "   *     different area. aArea will be the area the item is dragged to, or",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "different area. aArea will be the area the item is dragged to, or",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 70,
                  "source": "   *     undefined after the measurements have been done and the node has been",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "undefined after the measurements have been done and the node has been",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 71,
                  "source": "   *     moved back to its 'regular' area.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "moved back to its 'regular' area.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 72,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 73,
                  "source": "   *   - onCustomizeStart(aWindow)",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "   ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- onCustomizeStart(aWindow)",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 74,
                  "source": "   *     Fired when opening customize mode in aWindow.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Fired when opening customize mode in aWindow.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 75,
                  "source": "   *   - onCustomizeEnd(aWindow)",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "   ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- onCustomizeEnd(aWindow)",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 76,
                  "source": "   *     Fired when exiting customize mode in aWindow.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Fired when exiting customize mode in aWindow.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 77,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 78,
                  "source": "   *   - onWidgetOverflow(aNode, aContainer)",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "   ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- onWidgetOverflow(aNode, aContainer)",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 79,
                  "source": "   *     Fired when a widget's DOM node is overflowing its container, a toolbar,",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Fired when a widget's DOM node is overflowing its container, a toolbar,",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 80,
                  "source": "   *     and will be displayed in the overflow panel.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "and will be displayed in the overflow panel.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 81,
                  "source": "   *   - onWidgetUnderflow(aNode, aContainer)",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "   ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- onWidgetUnderflow(aNode, aContainer)",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 82,
                  "source": "   *     Fired when a widget's DOM node is *not* overflowing its container, a",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Fired when a widget's DOM node is *not* overflowing its container, a",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 83,
                  "source": "   *     toolbar, anymore.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "toolbar, anymore.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 84,
                  "source": "   *   - onWindowOpened(aWindow)",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "   ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- onWindowOpened(aWindow)",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 85,
                  "source": "   *     Fired when a window has been opened that is managed by CustomizableUI,",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Fired when a window has been opened that is managed by CustomizableUI,",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 86,
                  "source": "   *     once all of the prerequisite setup has been done.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "once all of the prerequisite setup has been done.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 87,
                  "source": "   *   - onWindowClosed(aWindow)",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "   ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- onWindowClosed(aWindow)",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 88,
                  "source": "   *     Fired when a window that has been managed by CustomizableUI has been",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Fired when a window that has been managed by CustomizableUI has been",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 89,
                  "source": "   *     closed.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "closed.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 90,
                  "source": "   *   - onAreaNodeRegistered(aArea, aContainer)",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "   ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- onAreaNodeRegistered(aArea, aContainer)",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 91,
                  "source": "   *     Fired after an area node is first built when it is registered. This",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Fired after an area node is first built when it is registered. This",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 92,
                  "source": "   *     is often when the window has opened, but in the case of add-ons,",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "is often when the window has opened, but in the case of add-ons,",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 93,
                  "source": "   *     could fire when the node has just been registered with CustomizableUI",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "could fire when the node has just been registered with CustomizableUI",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 94,
                  "source": "   *     after an add-on update or disable/enable sequence.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "after an add-on update or disable/enable sequence.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 95,
                  "source": "   *   - onAreaNodeUnregistered(aArea, aContainer, aReason)",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "   ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- onAreaNodeUnregistered(aArea, aContainer, aReason)",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 96,
                  "source": "   *     Fired when an area node is explicitly unregistered by an API caller,",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Fired when an area node is explicitly unregistered by an API caller,",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 97,
                  "source": "   *     or by a window closing. The aReason parameter indicates which of",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "or by a window closing. The aReason parameter indicates which of",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 98,
                  "source": "   *     these is the case.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "these is the case.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 99,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 100,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aListener"
          ]
        },
        {
          "type": "object-method",
          "line": 3898,
          "id": "removeListener",
          "comments": [
            {
              "description": "Remove a listener added with addListener",
              "tags": [
                {
                  "tag": "param",
                  "name": "aListener",
                  "type": "",
                  "optional": false,
                  "description": "the listener object to remove",
                  "problems": [],
                  "source": [
                    {
                      "number": 3,
                      "source": "   * @param aListener the listener object to remove",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aListener",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "the listener object to remove",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 4,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 5,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Remove a listener added with addListener",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Remove a listener added with addListener",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * @param aListener the listener object to remove",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aListener",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "the listener object to remove",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aListener"
          ]
        },
        {
          "type": "object-method",
          "line": 3922,
          "id": "registerArea",
          "comments": [
            {
              "description": "Register a customizable area with CustomizableUI.",
              "tags": [
                {
                  "tag": "param",
                  "name": "aName",
                  "type": "",
                  "optional": false,
                  "description": "the name of the area to register. Can only contain alphanumeric characters, dashes (-) and underscores (_).",
                  "problems": [],
                  "source": [
                    {
                      "number": 3,
                      "source": "   * @param aName   the name of the area to register. Can only contain",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aName",
                        "postName": "   ",
                        "type": "",
                        "postType": "",
                        "description": "the name of the area to register. Can only contain",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 4,
                      "source": "   *                alphanumeric characters, dashes (-) and underscores (_).",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "alphanumeric characters, dashes (-) and underscores (_).",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "param",
                  "name": "aProps",
                  "type": "",
                  "optional": false,
                  "description": "the properties of the area. The following properties are recognized: - type:   the type of area. Either TYPE_TOOLBAR (default) or TYPE_PANEL; - anchor: for a menu panel or overflowable toolbar, the anchoring node for the panel. - overflowable: set to true if your toolbar is overflowable. This requires an anchor, and only has an effect for toolbars. - defaultPlacements: an array of widget IDs making up the default contents of the area - defaultCollapsed: (INTERNAL ONLY) applies if the type is TYPE_TOOLBAR, specifies if toolbar is collapsed by default (default to true). Specify null to ensure that reset/inDefaultArea don't care about a toolbar's collapsed state",
                  "problems": [],
                  "source": [
                    {
                      "number": 5,
                      "source": "   * @param aProps  the properties of the area. The following properties are",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aProps",
                        "postName": "  ",
                        "type": "",
                        "postType": "",
                        "description": "the properties of the area. The following properties are",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 6,
                      "source": "   *                recognized:",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "recognized:",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 7,
                      "source": "   *                - type:   the type of area. Either TYPE_TOOLBAR (default) or",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "- type:   the type of area. Either TYPE_TOOLBAR (default) or",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 8,
                      "source": "   *                          TYPE_PANEL;",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                          ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "TYPE_PANEL;",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 9,
                      "source": "   *                - anchor: for a menu panel or overflowable toolbar, the",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "- anchor: for a menu panel or overflowable toolbar, the",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 10,
                      "source": "   *                          anchoring node for the panel.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                          ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "anchoring node for the panel.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 11,
                      "source": "   *                - overflowable: set to true if your toolbar is overflowable.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "- overflowable: set to true if your toolbar is overflowable.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 12,
                      "source": "   *                                This requires an anchor, and only has an",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                                ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "This requires an anchor, and only has an",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 13,
                      "source": "   *                                effect for toolbars.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                                ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "effect for toolbars.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 14,
                      "source": "   *                - defaultPlacements: an array of widget IDs making up the",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "- defaultPlacements: an array of widget IDs making up the",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 15,
                      "source": "   *                                     default contents of the area",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                                     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "default contents of the area",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 16,
                      "source": "   *                - defaultCollapsed: (INTERNAL ONLY) applies if the type is TYPE_TOOLBAR, specifies",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "- defaultCollapsed: (INTERNAL ONLY) applies if the type is TYPE_TOOLBAR, specifies",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 17,
                      "source": "   *                                    if toolbar is collapsed by default (default to true).",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                                    ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "if toolbar is collapsed by default (default to true).",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 18,
                      "source": "   *                                    Specify null to ensure that reset/inDefaultArea don't care",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                                    ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "Specify null to ensure that reset/inDefaultArea don't care",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 19,
                      "source": "   *                                    about a toolbar's collapsed state",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                                    ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "about a toolbar's collapsed state",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 20,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 21,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Register a customizable area with CustomizableUI.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Register a customizable area with CustomizableUI.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * @param aName   the name of the area to register. Can only contain",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aName",
                    "postName": "   ",
                    "type": "",
                    "postType": "",
                    "description": "the name of the area to register. Can only contain",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   *                alphanumeric characters, dashes (-) and underscores (_).",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "alphanumeric characters, dashes (-) and underscores (_).",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   * @param aProps  the properties of the area. The following properties are",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aProps",
                    "postName": "  ",
                    "type": "",
                    "postType": "",
                    "description": "the properties of the area. The following properties are",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   *                recognized:",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "recognized:",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "   *                - type:   the type of area. Either TYPE_TOOLBAR (default) or",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- type:   the type of area. Either TYPE_TOOLBAR (default) or",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 8,
                  "source": "   *                          TYPE_PANEL;",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                          ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "TYPE_PANEL;",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 9,
                  "source": "   *                - anchor: for a menu panel or overflowable toolbar, the",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- anchor: for a menu panel or overflowable toolbar, the",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 10,
                  "source": "   *                          anchoring node for the panel.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                          ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "anchoring node for the panel.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 11,
                  "source": "   *                - overflowable: set to true if your toolbar is overflowable.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- overflowable: set to true if your toolbar is overflowable.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 12,
                  "source": "   *                                This requires an anchor, and only has an",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                                ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "This requires an anchor, and only has an",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 13,
                  "source": "   *                                effect for toolbars.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                                ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "effect for toolbars.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 14,
                  "source": "   *                - defaultPlacements: an array of widget IDs making up the",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- defaultPlacements: an array of widget IDs making up the",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 15,
                  "source": "   *                                     default contents of the area",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                                     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "default contents of the area",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 16,
                  "source": "   *                - defaultCollapsed: (INTERNAL ONLY) applies if the type is TYPE_TOOLBAR, specifies",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- defaultCollapsed: (INTERNAL ONLY) applies if the type is TYPE_TOOLBAR, specifies",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 17,
                  "source": "   *                                    if toolbar is collapsed by default (default to true).",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                                    ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "if toolbar is collapsed by default (default to true).",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 18,
                  "source": "   *                                    Specify null to ensure that reset/inDefaultArea don't care",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                                    ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Specify null to ensure that reset/inDefaultArea don't care",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 19,
                  "source": "   *                                    about a toolbar's collapsed state",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                                    ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "about a toolbar's collapsed state",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 20,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 21,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aName",
            "aProperties"
          ]
        },
        {
          "type": "object-method",
          "line": 3936,
          "id": "registerToolbarNode",
          "comments": [
            {
              "description": "Register a concrete node for a registered area. This method needs to be called with any toolbar in the main browser window that has its \"customizable\" attribute set to true. Note that ideally, you should register your toolbar using registerArea before calling this. If you don't, the node will be saved for processing when you call registerArea. Note that CustomizableUI won't restore state in the area, allow the user to customize it in customize mode, or otherwise deal with it, until the area has been registered.",
              "tags": [],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Register a concrete node for a registered area. This method needs to be called",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Register a concrete node for a registered area. This method needs to be called",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * with any toolbar in the main browser window that has its \"customizable\" attribute",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "with any toolbar in the main browser window that has its \"customizable\" attribute",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * set to true.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "set to true.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   * Note that ideally, you should register your toolbar using registerArea",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Note that ideally, you should register your toolbar using registerArea",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "   * before calling this. If you don't, the node will be saved for processing when",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "before calling this. If you don't, the node will be saved for processing when",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 8,
                  "source": "   * you call registerArea. Note that CustomizableUI won't restore state in the area,",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "you call registerArea. Note that CustomizableUI won't restore state in the area,",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 9,
                  "source": "   * allow the user to customize it in customize mode, or otherwise deal",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "allow the user to customize it in customize mode, or otherwise deal",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 10,
                  "source": "   * with it, until the area has been registered.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "with it, until the area has been registered.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 11,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 12,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aToolbar"
          ]
        },
        {
          "type": "object-method",
          "line": 3947,
          "id": "registerPanelNode",
          "comments": [
            {
              "description": "Register a panel node. A panel treated slightly differently from a toolbar in terms of what items can be moved into it. For example, a panel cannot have a spacer or a spring put into it.",
              "tags": [
                {
                  "tag": "param",
                  "name": "aPanelContents",
                  "type": "",
                  "optional": false,
                  "description": "the panel contents DOM node being registered.",
                  "problems": [],
                  "source": [
                    {
                      "number": 6,
                      "source": "   * @param aPanelContents the panel contents DOM node being registered.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aPanelContents",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "the panel contents DOM node being registered.",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "param",
                  "name": "aArea",
                  "type": "",
                  "optional": false,
                  "description": "the area for which to register this node.",
                  "problems": [],
                  "source": [
                    {
                      "number": 7,
                      "source": "   * @param aArea the area for which to register this node.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aArea",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "the area for which to register this node.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 8,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 9,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Register a panel node. A panel treated slightly differently from a toolbar in",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Register a panel node. A panel treated slightly differently from a toolbar in",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * terms of what items can be moved into it. For example, a panel cannot have a",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "terms of what items can be moved into it. For example, a panel cannot have a",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * spacer or a spring put into it.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "spacer or a spring put into it.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   * @param aPanelContents the panel contents DOM node being registered.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aPanelContents",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "the panel contents DOM node being registered.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "   * @param aArea the area for which to register this node.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aArea",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "the area for which to register this node.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 8,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 9,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aNode",
            "aArea"
          ]
        },
        {
          "type": "object-method",
          "line": 3971,
          "id": "unregisterArea",
          "comments": [
            {
              "description": "Unregister a customizable area. The inverse of registerArea. Unregistering an area will remove all the (removable) widgets in the area, which will return to the panel, and destroy all other traces of the area within CustomizableUI. Note that this means the *contents* of the area's DOM nodes will be moved to the panel or removed, but the area's DOM nodes *themselves* will stay. Furthermore, by default the placements of the area will be kept in the saved state (!) and restored if you re-register the area at a later point. This is useful for e.g. add-ons that get disabled and then re-enabled (e.g. when they update). You can override this last behaviour (and destroy the placements information in the saved state) by passing true for aDestroyPlacements.",
              "tags": [
                {
                  "tag": "param",
                  "name": "aName",
                  "type": "",
                  "optional": false,
                  "description": "the name of the area to unregister",
                  "problems": [],
                  "source": [
                    {
                      "number": 18,
                      "source": "   * @param aName              the name of the area to unregister",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aName",
                        "postName": "              ",
                        "type": "",
                        "postType": "",
                        "description": "the name of the area to unregister",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "param",
                  "name": "aDestroyPlacements",
                  "type": "",
                  "optional": false,
                  "description": "whether to destroy the placements information for the area, too.",
                  "problems": [],
                  "source": [
                    {
                      "number": 19,
                      "source": "   * @param aDestroyPlacements whether to destroy the placements information",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aDestroyPlacements",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "whether to destroy the placements information",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 20,
                      "source": "   *                           for the area, too.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                           ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "for the area, too.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 21,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 22,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Unregister a customizable area. The inverse of registerArea.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Unregister a customizable area. The inverse of registerArea.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * Unregistering an area will remove all the (removable) widgets in the",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Unregistering an area will remove all the (removable) widgets in the",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   * area, which will return to the panel, and destroy all other traces",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "area, which will return to the panel, and destroy all other traces",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   * of the area within CustomizableUI. Note that this means the *contents*",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "of the area within CustomizableUI. Note that this means the *contents*",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "   * of the area's DOM nodes will be moved to the panel or removed, but",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "of the area's DOM nodes will be moved to the panel or removed, but",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 8,
                  "source": "   * the area's DOM nodes *themselves* will stay.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "the area's DOM nodes *themselves* will stay.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 9,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 10,
                  "source": "   * Furthermore, by default the placements of the area will be kept in the",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Furthermore, by default the placements of the area will be kept in the",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 11,
                  "source": "   * saved state (!) and restored if you re-register the area at a later",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "saved state (!) and restored if you re-register the area at a later",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 12,
                  "source": "   * point. This is useful for e.g. add-ons that get disabled and then",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "point. This is useful for e.g. add-ons that get disabled and then",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 13,
                  "source": "   * re-enabled (e.g. when they update).",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "re-enabled (e.g. when they update).",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 14,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 15,
                  "source": "   * You can override this last behaviour (and destroy the placements",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "You can override this last behaviour (and destroy the placements",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 16,
                  "source": "   * information in the saved state) by passing true for aDestroyPlacements.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "information in the saved state) by passing true for aDestroyPlacements.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 17,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 18,
                  "source": "   * @param aName              the name of the area to unregister",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aName",
                    "postName": "              ",
                    "type": "",
                    "postType": "",
                    "description": "the name of the area to unregister",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 19,
                  "source": "   * @param aDestroyPlacements whether to destroy the placements information",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aDestroyPlacements",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "whether to destroy the placements information",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 20,
                  "source": "   *                           for the area, too.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                           ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "for the area, too.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 21,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 22,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aName",
            "aDestroyPlacements"
          ]
        },
        {
          "type": "object-method",
          "line": 3994,
          "id": "addWidgetToArea",
          "comments": [
            {
              "description": "Add a widget to an area. If the area to which you try to add is not known to CustomizableUI, this will throw. If the area to which you try to add is the same as the area in which the widget is currently placed, this will do the same as moveWidgetWithinArea. If the widget cannot be removed from its original location, this will no-op. This will fire an onWidgetAdded notification, and an onWidgetBeforeDOMChange and onWidgetAfterDOMChange notification for each window CustomizableUI knows about.",
              "tags": [
                {
                  "tag": "param",
                  "name": "aWidgetId",
                  "type": "",
                  "optional": false,
                  "description": "the ID of the widget to add",
                  "problems": [],
                  "source": [
                    {
                      "number": 15,
                      "source": "   * @param aWidgetId the ID of the widget to add",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aWidgetId",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "the ID of the widget to add",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "param",
                  "name": "aArea",
                  "type": "",
                  "optional": false,
                  "description": "the ID of the area to add the widget to",
                  "problems": [],
                  "source": [
                    {
                      "number": 16,
                      "source": "   * @param aArea     the ID of the area to add the widget to",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aArea",
                        "postName": "     ",
                        "type": "",
                        "postType": "",
                        "description": "the ID of the area to add the widget to",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "param",
                  "name": "aPosition",
                  "type": "",
                  "optional": false,
                  "description": "the position at which to add the widget. If you do not pass a position, the widget will be added to the end of the area.",
                  "problems": [],
                  "source": [
                    {
                      "number": 17,
                      "source": "   * @param aPosition the position at which to add the widget. If you do not",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aPosition",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "the position at which to add the widget. If you do not",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 18,
                      "source": "   *                  pass a position, the widget will be added to the end",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                  ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "pass a position, the widget will be added to the end",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 19,
                      "source": "   *                  of the area.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                  ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "of the area.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 20,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 21,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Add a widget to an area.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Add a widget to an area.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * If the area to which you try to add is not known to CustomizableUI,",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "If the area to which you try to add is not known to CustomizableUI,",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * this will throw.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "this will throw.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   * If the area to which you try to add is the same as the area in which",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "If the area to which you try to add is the same as the area in which",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   * the widget is currently placed, this will do the same as",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "the widget is currently placed, this will do the same as",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "   * moveWidgetWithinArea.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "moveWidgetWithinArea.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 8,
                  "source": "   * If the widget cannot be removed from its original location, this will",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "If the widget cannot be removed from its original location, this will",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 9,
                  "source": "   * no-op.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "no-op.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 10,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 11,
                  "source": "   * This will fire an onWidgetAdded notification,",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "This will fire an onWidgetAdded notification,",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 12,
                  "source": "   * and an onWidgetBeforeDOMChange and onWidgetAfterDOMChange notification",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "and an onWidgetBeforeDOMChange and onWidgetAfterDOMChange notification",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 13,
                  "source": "   * for each window CustomizableUI knows about.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "for each window CustomizableUI knows about.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 14,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 15,
                  "source": "   * @param aWidgetId the ID of the widget to add",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aWidgetId",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "the ID of the widget to add",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 16,
                  "source": "   * @param aArea     the ID of the area to add the widget to",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aArea",
                    "postName": "     ",
                    "type": "",
                    "postType": "",
                    "description": "the ID of the area to add the widget to",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 17,
                  "source": "   * @param aPosition the position at which to add the widget. If you do not",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aPosition",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "the position at which to add the widget. If you do not",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 18,
                  "source": "   *                  pass a position, the widget will be added to the end",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "pass a position, the widget will be added to the end",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 19,
                  "source": "   *                  of the area.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "of the area.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 20,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 21,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aWidgetId",
            "aArea",
            "aPosition"
          ]
        },
        {
          "type": "object-method",
          "line": 4006,
          "id": "removeWidgetFromArea",
          "comments": [
            {
              "description": "Remove a widget from its area. If the widget cannot be removed from its area, or is not in any area, this will no-op. Otherwise, this will fire an onWidgetRemoved notification, and an onWidgetBeforeDOMChange and onWidgetAfterDOMChange notification for each window CustomizableUI knows about.",
              "tags": [
                {
                  "tag": "param",
                  "name": "aWidgetId",
                  "type": "",
                  "optional": false,
                  "description": "the ID of the widget to remove",
                  "problems": [],
                  "source": [
                    {
                      "number": 8,
                      "source": "   * @param aWidgetId the ID of the widget to remove",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aWidgetId",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "the ID of the widget to remove",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 9,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 10,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Remove a widget from its area. If the widget cannot be removed from its",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Remove a widget from its area. If the widget cannot be removed from its",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * area, or is not in any area, this will no-op. Otherwise, this will fire an",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "area, or is not in any area, this will no-op. Otherwise, this will fire an",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * onWidgetRemoved notification, and an onWidgetBeforeDOMChange and",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "onWidgetRemoved notification, and an onWidgetBeforeDOMChange and",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   * onWidgetAfterDOMChange notification for each window CustomizableUI knows",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "onWidgetAfterDOMChange notification for each window CustomizableUI knows",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   * about.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "about.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 8,
                  "source": "   * @param aWidgetId the ID of the widget to remove",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aWidgetId",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "the ID of the widget to remove",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 9,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 10,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aWidgetId"
          ]
        },
        {
          "type": "object-method",
          "line": 4024,
          "id": "moveWidgetWithinArea",
          "comments": [
            {
              "description": "Move a widget within an area. If the widget is not in any area, this will no-op. If the widget is already at the indicated position, this will no-op. Otherwise, this will move the widget and fire an onWidgetMoved notification, and an onWidgetBeforeDOMChange and onWidgetAfterDOMChange notification for each window CustomizableUI knows about.",
              "tags": [
                {
                  "tag": "param",
                  "name": "aWidgetId",
                  "type": "",
                  "optional": false,
                  "description": "the ID of the widget to move",
                  "problems": [],
                  "source": [
                    {
                      "number": 10,
                      "source": "   * @param aWidgetId the ID of the widget to move",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aWidgetId",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "the ID of the widget to move",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "param",
                  "name": "aPosition",
                  "type": "",
                  "optional": false,
                  "description": "the position to move the widget to. Negative values or values greater than the number of widgets will be interpreted to mean moving the widget to respectively the first or last position.",
                  "problems": [],
                  "source": [
                    {
                      "number": 11,
                      "source": "   * @param aPosition the position to move the widget to.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aPosition",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "the position to move the widget to.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 12,
                      "source": "   *                  Negative values or values greater than the number of",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                  ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "Negative values or values greater than the number of",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 13,
                      "source": "   *                  widgets will be interpreted to mean moving the widget to",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                  ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "widgets will be interpreted to mean moving the widget to",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 14,
                      "source": "   *                  respectively the first or last position.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                  ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "respectively the first or last position.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 15,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 16,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Move a widget within an area.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Move a widget within an area.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * If the widget is not in any area, this will no-op.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "If the widget is not in any area, this will no-op.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * If the widget is already at the indicated position, this will no-op.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "If the widget is already at the indicated position, this will no-op.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   * Otherwise, this will move the widget and fire an onWidgetMoved notification,",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Otherwise, this will move the widget and fire an onWidgetMoved notification,",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "   * and an onWidgetBeforeDOMChange and onWidgetAfterDOMChange notification for",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "and an onWidgetBeforeDOMChange and onWidgetAfterDOMChange notification for",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 8,
                  "source": "   * each window CustomizableUI knows about.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "each window CustomizableUI knows about.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 9,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 10,
                  "source": "   * @param aWidgetId the ID of the widget to move",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aWidgetId",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "the ID of the widget to move",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 11,
                  "source": "   * @param aPosition the position to move the widget to.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aPosition",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "the position to move the widget to.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 12,
                  "source": "   *                  Negative values or values greater than the number of",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Negative values or values greater than the number of",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 13,
                  "source": "   *                  widgets will be interpreted to mean moving the widget to",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "widgets will be interpreted to mean moving the widget to",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 14,
                  "source": "   *                  respectively the first or last position.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "respectively the first or last position.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 15,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 16,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aWidgetId",
            "aPosition"
          ]
        },
        {
          "type": "object-method",
          "line": 4039,
          "id": "ensureWidgetPlacedInWindow",
          "comments": [
            {
              "description": "Ensure a XUL-based widget created in a window after areas were initialized moves to its correct position. Always prefer this over moving items in the DOM yourself.",
              "tags": [
                {
                  "tag": "param",
                  "name": "aWidgetId",
                  "type": "",
                  "optional": false,
                  "description": "the ID of the widget that was just created",
                  "problems": [],
                  "source": [
                    {
                      "number": 6,
                      "source": "   * @param aWidgetId the ID of the widget that was just created",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aWidgetId",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "the ID of the widget that was just created",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "param",
                  "name": "aWindow",
                  "type": "",
                  "optional": false,
                  "description": "the window in which you want to ensure it was added. NB: why is this API per-window, you wonder? Because if you need this, presumably you yourself need to create the widget in all the windows and need to loop through them anyway.",
                  "problems": [],
                  "source": [
                    {
                      "number": 7,
                      "source": "   * @param aWindow the window in which you want to ensure it was added.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aWindow",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "the window in which you want to ensure it was added.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 8,
                      "source": "   *",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 9,
                      "source": "   * NB: why is this API per-window, you wonder? Because if you need this,",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "NB: why is this API per-window, you wonder? Because if you need this,",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 10,
                      "source": "   * presumably you yourself need to create the widget in all the windows",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "presumably you yourself need to create the widget in all the windows",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 11,
                      "source": "   * and need to loop through them anyway.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "and need to loop through them anyway.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 12,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 13,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Ensure a XUL-based widget created in a window after areas were",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Ensure a XUL-based widget created in a window after areas were",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * initialized moves to its correct position.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "initialized moves to its correct position.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * Always prefer this over moving items in the DOM yourself.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Always prefer this over moving items in the DOM yourself.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   * @param aWidgetId the ID of the widget that was just created",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aWidgetId",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "the ID of the widget that was just created",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "   * @param aWindow the window in which you want to ensure it was added.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aWindow",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "the window in which you want to ensure it was added.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 8,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 9,
                  "source": "   * NB: why is this API per-window, you wonder? Because if you need this,",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "NB: why is this API per-window, you wonder? Because if you need this,",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 10,
                  "source": "   * presumably you yourself need to create the widget in all the windows",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "presumably you yourself need to create the widget in all the windows",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 11,
                  "source": "   * and need to loop through them anyway.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "and need to loop through them anyway.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 12,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 13,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aWidgetId",
            "aWindow"
          ]
        },
        {
          "type": "object-method",
          "line": 4057,
          "id": "beginBatchUpdate",
          "comments": [
            {
              "description": "Start a batch update of items. During a batch update, the customization state is not saved to the user's preferences file, in order to reduce (possibly sync) IO. Calls to begin/endBatchUpdate may be nested. Callers should ensure that NO MATTER WHAT they call endBatchUpdate once for each call to beginBatchUpdate, even if there are exceptions in the code in the batch update. Otherwise, for the duration of the Firefox session, customization state is never saved. Typically, you would do this using a try...finally block.",
              "tags": [],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Start a batch update of items.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Start a batch update of items.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * During a batch update, the customization state is not saved to the user's",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "During a batch update, the customization state is not saved to the user's",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * preferences file, in order to reduce (possibly sync) IO.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "preferences file, in order to reduce (possibly sync) IO.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   * Calls to begin/endBatchUpdate may be nested.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Calls to begin/endBatchUpdate may be nested.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "   * Callers should ensure that NO MATTER WHAT they call endBatchUpdate once",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Callers should ensure that NO MATTER WHAT they call endBatchUpdate once",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 8,
                  "source": "   * for each call to beginBatchUpdate, even if there are exceptions in the",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "for each call to beginBatchUpdate, even if there are exceptions in the",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 9,
                  "source": "   * code in the batch update. Otherwise, for the duration of the",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "code in the batch update. Otherwise, for the duration of the",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 10,
                  "source": "   * Firefox session, customization state is never saved. Typically, you",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Firefox session, customization state is never saved. Typically, you",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 11,
                  "source": "   * would do this using a try...finally block.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "would do this using a try...finally block.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 12,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 13,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": []
        },
        {
          "type": "object-method",
          "line": 4072,
          "id": "endBatchUpdate",
          "comments": [
            {
              "description": "End a batch update. See the documentation for beginBatchUpdate above. State is not saved if we believe it is identical to the last known saved state. State is only ever saved when all batch updates have finished (ie there has been 1 endBatchUpdate call for each beginBatchUpdate call). If any of the endBatchUpdate calls pass aForceDirty=true, we will flush to the prefs file.",
              "tags": [
                {
                  "tag": "param",
                  "name": "aForceDirty",
                  "type": "",
                  "optional": false,
                  "description": "force CustomizableUI to flush to the prefs file when all batch updates have finished.",
                  "problems": [],
                  "source": [
                    {
                      "number": 10,
                      "source": "   * @param aForceDirty force CustomizableUI to flush to the prefs file when",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aForceDirty",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "force CustomizableUI to flush to the prefs file when",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 11,
                      "source": "   *                    all batch updates have finished.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                    ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "all batch updates have finished.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 12,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 13,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * End a batch update. See the documentation for beginBatchUpdate above.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "End a batch update. See the documentation for beginBatchUpdate above.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * State is not saved if we believe it is identical to the last known",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "State is not saved if we believe it is identical to the last known",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   * saved state. State is only ever saved when all batch updates have",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "saved state. State is only ever saved when all batch updates have",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   * finished (ie there has been 1 endBatchUpdate call for each",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "finished (ie there has been 1 endBatchUpdate call for each",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "   * beginBatchUpdate call). If any of the endBatchUpdate calls pass",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "beginBatchUpdate call). If any of the endBatchUpdate calls pass",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 8,
                  "source": "   * aForceDirty=true, we will flush to the prefs file.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "aForceDirty=true, we will flush to the prefs file.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 9,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 10,
                  "source": "   * @param aForceDirty force CustomizableUI to flush to the prefs file when",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aForceDirty",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "force CustomizableUI to flush to the prefs file when",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 11,
                  "source": "   *                    all batch updates have finished.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                    ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "all batch updates have finished.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 12,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 13,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aForceDirty"
          ]
        },
        {
          "type": "object-method",
          "line": 4188,
          "id": "createWidget",
          "comments": [
            {
              "description": "Create a widget. To create a widget, you should pass an object with its desired properties. The following properties are supported: - id:            the ID of the widget (required). - type:          a string indicating the type of widget. Possible types are: 'button' - for simple button widgets (the default) 'view'   - for buttons that open a panel or subview, depending on where they are placed. 'button-and-view' - A combination of 'button' and 'view', which looks different depending on whether it's located in the toolbar or in the panel: When located in the toolbar, the widget is shown as a combined item of a button and a dropmarker button. The button triggers the command and the dropmarker button opens the view. When located in the panel, shown as one item which opens the view, and the button command cannot be triggered separately. 'custom' - for fine-grained control over the creation of the widget. - viewId:        Only useful for views and button-and-view widgets (and required there): the id of the <panelview> that should be shown when clicking the widget.  If used with a custom widget, the widget must also provide a toolbaritem where the first child is the view button. - onBuild(aDoc): Only useful for custom widgets (and required there); a function that will be invoked with the document in which to build a widget. Should return the DOM node that has been constructed. - onBeforeCreated(aDoc): Attached to all non-custom widgets; a function that will be invoked before the widget gets a DOM node constructed, passing the document in which that will happen. This is useful especially for 'view' type widgets that need to construct their views on the fly (e.g. from bootstrapped add-ons). If the function returns `false`, the widget will not be created. - onCreated(aNode): Attached to all widgets; a function that will be invoked whenever the widget has a DOM node constructed, passing the constructed node as an argument. - onDestroyed(aDoc): Attached to all non-custom widgets; a function that will be invoked after the widget has a DOM node destroyed, passing the document from which it was removed. This is useful especially for 'view' type widgets that need to cleanup after views that were constructed on the fly. - onBeforeCommand(aEvt, aNode): A function that will be invoked when the user activates the button but before the command is evaluated. Useful if code needs to run to change the button's icon in preparation to the pending command action. Called for any type that supports the handler.  The command type, either \"view\" or \"command\", may be returned to force the action that will occur.  View will open the panel and command will result in calling onCommand. - onCommand(aEvt): Useful for custom, button and button-and-view widgets; a function that will be invoked when the user activates the button. A custom widget with a view should return \"view\" or \"command\" to continue processing the command per the needs of the widget. - onClick(aEvt): Attached to all widgets; a function that will be invoked when the user clicks the widget. - onViewShowing(aEvt): Only useful for views and button-and-view widgets; a function that will be invoked when a user shows your view. If any event handler calls aEvt.preventDefault(), the view will not be shown. The event's `detail` property is an object with an `addBlocker` method. Handlers which need to perform asynchronous operations before the view is shown may pass this method a Promise, which will prevent the view from showing until it resolves. Additionally, if the promise resolves to the exact value `false`, the view will not be shown. - onViewHiding(aEvt): Only useful for views; a function that will be invoked when a user hides your view. - l10nId:        fluent string identifier to use for localizing attributes on the widget. If present, preferred over the label/tooltiptext. - tooltiptext:   string to use for the tooltip of the widget - label:         string to use for the label of the widget - localized:     If true, or undefined, attempt to retrieve the widget's string properties from the customizable widgets string bundle. - removable:     whether the widget is removable (optional, default: true) NB: if you specify false here, you must provide a defaultArea, too. - overflows:     whether widget can overflow when in an overflowable toolbar (optional, default: true) - defaultArea:   default area to add the widget to (optional, default: none; required if non-removable) - shortcutId:    id of an element that has a shortcut for this widget (optional, default: null). This is only used to display the shortcut as part of the tooltip for builtin widgets (which have strings inside customizableWidgets.properties). If you're in an add-on, you should not set this property. If l10nId is provided, the resulting shortcut is passed as the \"$shortcut\" variable to the fluent message. - showInPrivateBrowsing: whether to show the widget in private browsing mode (optional, default: true) - tabSpecific:      If true, closes the panel if the tab changes. - locationSpecific: If true, closes the panel if the location changes. This is similar to tabSpecific, but also if the location changes in the same tab, we may want to close the panel. - webExtension:  Set to true if this widget is being created on behalf of an extension.",
              "tags": [
                {
                  "tag": "param",
                  "name": "aProperties",
                  "type": "",
                  "optional": false,
                  "description": "the specifications for the widget.",
                  "problems": [],
                  "source": [
                    {
                      "number": 111,
                      "source": "   * @param aProperties the specifications for the widget.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aProperties",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "the specifications for the widget.",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "return",
                  "name": "a",
                  "type": "",
                  "optional": false,
                  "description": "wrapper around the created widget (see getWidget)",
                  "problems": [],
                  "source": [
                    {
                      "number": 112,
                      "source": "   * @return a wrapper around the created widget (see getWidget)",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@return",
                        "postTag": " ",
                        "name": "a",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "wrapper around the created widget (see getWidget)",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 113,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 114,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Create a widget.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Create a widget.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * To create a widget, you should pass an object with its desired",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "To create a widget, you should pass an object with its desired",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   * properties. The following properties are supported:",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "properties. The following properties are supported:",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "   * - id:            the ID of the widget (required).",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- id:            the ID of the widget (required).",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 8,
                  "source": "   * - type:          a string indicating the type of widget. Possible types",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- type:          a string indicating the type of widget. Possible types",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 9,
                  "source": "   *                  are:",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "are:",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 10,
                  "source": "   *                  'button' - for simple button widgets (the default)",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "'button' - for simple button widgets (the default)",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 11,
                  "source": "   *                  'view'   - for buttons that open a panel or subview,",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "'view'   - for buttons that open a panel or subview,",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 12,
                  "source": "   *                             depending on where they are placed.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                             ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "depending on where they are placed.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 13,
                  "source": "   *                  'button-and-view' - A combination of 'button' and 'view',",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "'button-and-view' - A combination of 'button' and 'view',",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 14,
                  "source": "   *                             which looks different depending on whether it's",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                             ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "which looks different depending on whether it's",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 15,
                  "source": "   *                             located in the toolbar or in the panel: When",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                             ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "located in the toolbar or in the panel: When",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 16,
                  "source": "   *                             located in the toolbar, the widget is shown as",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                             ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "located in the toolbar, the widget is shown as",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 17,
                  "source": "   *                             a combined item of a button and a dropmarker",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                             ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "a combined item of a button and a dropmarker",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 18,
                  "source": "   *                             button. The button triggers the command and the",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                             ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "button. The button triggers the command and the",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 19,
                  "source": "   *                             dropmarker button opens the view. When located",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                             ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "dropmarker button opens the view. When located",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 20,
                  "source": "   *                             in the panel, shown as one item which opens the",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                             ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "in the panel, shown as one item which opens the",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 21,
                  "source": "   *                             view, and the button command cannot be",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                             ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "view, and the button command cannot be",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 22,
                  "source": "   *                             triggered separately.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                             ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "triggered separately.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 23,
                  "source": "   *                  'custom' - for fine-grained control over the creation",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "'custom' - for fine-grained control over the creation",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 24,
                  "source": "   *                             of the widget.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                             ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "of the widget.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 25,
                  "source": "   * - viewId:        Only useful for views and button-and-view widgets (and",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- viewId:        Only useful for views and button-and-view widgets (and",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 26,
                  "source": "   *                  required there): the id of the <panelview> that should be",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "required there): the id of the <panelview> that should be",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 27,
                  "source": "   *                  shown when clicking the widget.  If used with a custom",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "shown when clicking the widget.  If used with a custom",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 28,
                  "source": "   *                  widget, the widget must also provide a toolbaritem where",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "widget, the widget must also provide a toolbaritem where",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 29,
                  "source": "   *                  the first child is the view button.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "the first child is the view button.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 30,
                  "source": "   * - onBuild(aDoc): Only useful for custom widgets (and required there); a",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- onBuild(aDoc): Only useful for custom widgets (and required there); a",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 31,
                  "source": "   *                  function that will be invoked with the document in which",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "function that will be invoked with the document in which",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 32,
                  "source": "   *                  to build a widget. Should return the DOM node that has",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "to build a widget. Should return the DOM node that has",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 33,
                  "source": "   *                  been constructed.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "been constructed.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 34,
                  "source": "   * - onBeforeCreated(aDoc): Attached to all non-custom widgets; a function",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- onBeforeCreated(aDoc): Attached to all non-custom widgets; a function",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 35,
                  "source": "   *                  that will be invoked before the widget gets a DOM node",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "that will be invoked before the widget gets a DOM node",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 36,
                  "source": "   *                  constructed, passing the document in which that will happen.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "constructed, passing the document in which that will happen.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 37,
                  "source": "   *                  This is useful especially for 'view' type widgets that need",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "This is useful especially for 'view' type widgets that need",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 38,
                  "source": "   *                  to construct their views on the fly (e.g. from bootstrapped",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "to construct their views on the fly (e.g. from bootstrapped",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 39,
                  "source": "   *                  add-ons). If the function returns `false`, the widget will",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "add-ons). If the function returns `false`, the widget will",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 40,
                  "source": "   *                  not be created.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "not be created.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 41,
                  "source": "   * - onCreated(aNode): Attached to all widgets; a function that will be invoked",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- onCreated(aNode): Attached to all widgets; a function that will be invoked",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 42,
                  "source": "   *                  whenever the widget has a DOM node constructed, passing the",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "whenever the widget has a DOM node constructed, passing the",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 43,
                  "source": "   *                  constructed node as an argument.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "constructed node as an argument.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 44,
                  "source": "   * - onDestroyed(aDoc): Attached to all non-custom widgets; a function that",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- onDestroyed(aDoc): Attached to all non-custom widgets; a function that",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 45,
                  "source": "   *                  will be invoked after the widget has a DOM node destroyed,",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "will be invoked after the widget has a DOM node destroyed,",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 46,
                  "source": "   *                  passing the document from which it was removed. This is",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "passing the document from which it was removed. This is",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 47,
                  "source": "   *                  useful especially for 'view' type widgets that need to",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "useful especially for 'view' type widgets that need to",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 48,
                  "source": "   *                  cleanup after views that were constructed on the fly.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "cleanup after views that were constructed on the fly.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 49,
                  "source": "   * - onBeforeCommand(aEvt, aNode): A function that will be invoked when the user",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- onBeforeCommand(aEvt, aNode): A function that will be invoked when the user",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 50,
                  "source": "   *                          activates the button but before the command",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                          ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "activates the button but before the command",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 51,
                  "source": "   *                          is evaluated. Useful if code needs to run to",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                          ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "is evaluated. Useful if code needs to run to",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 52,
                  "source": "   *                          change the button's icon in preparation to the",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                          ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "change the button's icon in preparation to the",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 53,
                  "source": "   *                          pending command action. Called for any type that",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                          ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "pending command action. Called for any type that",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 54,
                  "source": "   *                          supports the handler.  The command type, either",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                          ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "supports the handler.  The command type, either",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 55,
                  "source": "   *                          \"view\" or \"command\", may be returned to force the",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                          ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "\"view\" or \"command\", may be returned to force the",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 56,
                  "source": "   *                          action that will occur.  View will open the panel",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                          ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "action that will occur.  View will open the panel",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 57,
                  "source": "   *                          and command will result in calling onCommand.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                          ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "and command will result in calling onCommand.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 58,
                  "source": "   * - onCommand(aEvt): Useful for custom, button and button-and-view widgets; a",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- onCommand(aEvt): Useful for custom, button and button-and-view widgets; a",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 59,
                  "source": "   *                    function that will be invoked when the user activates",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                    ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "function that will be invoked when the user activates",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 60,
                  "source": "   *                    the button. A custom widget with a view should",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                    ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "the button. A custom widget with a view should",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 61,
                  "source": "   *                    return \"view\" or \"command\" to continue processing",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                    ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "return \"view\" or \"command\" to continue processing",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 62,
                  "source": "   *                    the command per the needs of the widget.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                    ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "the command per the needs of the widget.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 63,
                  "source": "   * - onClick(aEvt): Attached to all widgets; a function that will be invoked",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- onClick(aEvt): Attached to all widgets; a function that will be invoked",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 64,
                  "source": "   *                  when the user clicks the widget.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "when the user clicks the widget.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 65,
                  "source": "   * - onViewShowing(aEvt): Only useful for views and button-and-view widgets; a",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- onViewShowing(aEvt): Only useful for views and button-and-view widgets; a",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 66,
                  "source": "   *                  function that will be invoked when a user shows your view.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "function that will be invoked when a user shows your view.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 67,
                  "source": "   *                  If any event handler calls aEvt.preventDefault(), the view",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "If any event handler calls aEvt.preventDefault(), the view",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 68,
                  "source": "   *                  will not be shown.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "will not be shown.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 69,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 70,
                  "source": "   *                  The event's `detail` property is an object with an",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "The event's `detail` property is an object with an",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 71,
                  "source": "   *                  `addBlocker` method. Handlers which need to",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "`addBlocker` method. Handlers which need to",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 72,
                  "source": "   *                  perform asynchronous operations before the view is",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "perform asynchronous operations before the view is",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 73,
                  "source": "   *                  shown may pass this method a Promise, which will",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "shown may pass this method a Promise, which will",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 74,
                  "source": "   *                  prevent the view from showing until it resolves.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "prevent the view from showing until it resolves.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 75,
                  "source": "   *                  Additionally, if the promise resolves to the exact",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Additionally, if the promise resolves to the exact",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 76,
                  "source": "   *                  value `false`, the view will not be shown.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "value `false`, the view will not be shown.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 77,
                  "source": "   * - onViewHiding(aEvt): Only useful for views; a function that will be",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- onViewHiding(aEvt): Only useful for views; a function that will be",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 78,
                  "source": "   *                  invoked when a user hides your view.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "invoked when a user hides your view.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 79,
                  "source": "   * - l10nId:        fluent string identifier to use for localizing attributes",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- l10nId:        fluent string identifier to use for localizing attributes",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 80,
                  "source": "   *                  on the widget. If present, preferred over the",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "on the widget. If present, preferred over the",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 81,
                  "source": "   *                  label/tooltiptext.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "label/tooltiptext.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 82,
                  "source": "   * - tooltiptext:   string to use for the tooltip of the widget",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- tooltiptext:   string to use for the tooltip of the widget",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 83,
                  "source": "   * - label:         string to use for the label of the widget",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- label:         string to use for the label of the widget",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 84,
                  "source": "   * - localized:     If true, or undefined, attempt to retrieve the",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- localized:     If true, or undefined, attempt to retrieve the",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 85,
                  "source": "   *                  widget's string properties from the customizable",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "widget's string properties from the customizable",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 86,
                  "source": "   *                  widgets string bundle.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "widgets string bundle.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 87,
                  "source": "   * - removable:     whether the widget is removable (optional, default: true)",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- removable:     whether the widget is removable (optional, default: true)",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 88,
                  "source": "   *                  NB: if you specify false here, you must provide a",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "NB: if you specify false here, you must provide a",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 89,
                  "source": "   *                  defaultArea, too.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "defaultArea, too.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 90,
                  "source": "   * - overflows:     whether widget can overflow when in an overflowable",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- overflows:     whether widget can overflow when in an overflowable",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 91,
                  "source": "   *                  toolbar (optional, default: true)",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "toolbar (optional, default: true)",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 92,
                  "source": "   * - defaultArea:   default area to add the widget to",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- defaultArea:   default area to add the widget to",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 93,
                  "source": "   *                  (optional, default: none; required if non-removable)",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "(optional, default: none; required if non-removable)",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 94,
                  "source": "   * - shortcutId:    id of an element that has a shortcut for this widget",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- shortcutId:    id of an element that has a shortcut for this widget",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 95,
                  "source": "   *                  (optional, default: null). This is only used to display",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "(optional, default: null). This is only used to display",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 96,
                  "source": "   *                  the shortcut as part of the tooltip for builtin widgets",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "the shortcut as part of the tooltip for builtin widgets",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 97,
                  "source": "   *                  (which have strings inside",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "(which have strings inside",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 98,
                  "source": "   *                  customizableWidgets.properties). If you're in an add-on,",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "customizableWidgets.properties). If you're in an add-on,",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 99,
                  "source": "   *                  you should not set this property.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "you should not set this property.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 100,
                  "source": "   *                  If l10nId is provided, the resulting shortcut is passed",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "If l10nId is provided, the resulting shortcut is passed",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 101,
                  "source": "   *                  as the \"$shortcut\" variable to the fluent message.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "as the \"$shortcut\" variable to the fluent message.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 102,
                  "source": "   * - showInPrivateBrowsing: whether to show the widget in private browsing",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- showInPrivateBrowsing: whether to show the widget in private browsing",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 103,
                  "source": "   *                          mode (optional, default: true)",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                          ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "mode (optional, default: true)",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 104,
                  "source": "   * - tabSpecific:      If true, closes the panel if the tab changes.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- tabSpecific:      If true, closes the panel if the tab changes.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 105,
                  "source": "   * - locationSpecific: If true, closes the panel if the location changes.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- locationSpecific: If true, closes the panel if the location changes.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 106,
                  "source": "   *                     This is similar to tabSpecific, but also if the location",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "This is similar to tabSpecific, but also if the location",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 107,
                  "source": "   *                     changes in the same tab, we may want to close the panel.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "changes in the same tab, we may want to close the panel.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 108,
                  "source": "   * - webExtension:  Set to true if this widget is being created on behalf of an",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- webExtension:  Set to true if this widget is being created on behalf of an",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 109,
                  "source": "   *                  extension.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "extension.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 110,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 111,
                  "source": "   * @param aProperties the specifications for the widget.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aProperties",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "the specifications for the widget.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 112,
                  "source": "   * @return a wrapper around the created widget (see getWidget)",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@return",
                    "postTag": " ",
                    "name": "a",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "wrapper around the created widget (see getWidget)",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 113,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 114,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aProperties"
          ]
        },
        {
          "type": "object-method",
          "line": 4204,
          "id": "destroyWidget",
          "comments": [
            {
              "description": "Destroy a widget If the widget is part of the default placements in an area, this will remove it from there. It will also remove any DOM instances. However, it will keep the widget in the placements for whatever area it was in at the time. You can remove it from there yourself by calling CustomizableUI.removeWidgetFromArea(aWidgetId).",
              "tags": [
                {
                  "tag": "param",
                  "name": "aWidgetId",
                  "type": "",
                  "optional": false,
                  "description": "the ID of the widget to destroy",
                  "problems": [],
                  "source": [
                    {
                      "number": 10,
                      "source": "   * @param aWidgetId the ID of the widget to destroy",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aWidgetId",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "the ID of the widget to destroy",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 11,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 12,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Destroy a widget",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Destroy a widget",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * If the widget is part of the default placements in an area, this will",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "If the widget is part of the default placements in an area, this will",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   * remove it from there. It will also remove any DOM instances. However,",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "remove it from there. It will also remove any DOM instances. However,",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   * it will keep the widget in the placements for whatever area it was",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "it will keep the widget in the placements for whatever area it was",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "   * in at the time. You can remove it from there yourself by calling",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "in at the time. You can remove it from there yourself by calling",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 8,
                  "source": "   * CustomizableUI.removeWidgetFromArea(aWidgetId).",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "CustomizableUI.removeWidgetFromArea(aWidgetId).",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 9,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 10,
                  "source": "   * @param aWidgetId the ID of the widget to destroy",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aWidgetId",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "the ID of the widget to destroy",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 11,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 12,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aWidgetId"
          ]
        },
        {
          "type": "object-method",
          "line": 4267,
          "id": "getWidget",
          "comments": [
            {
              "description": "Get a wrapper object with information about the widget. The object provides the following properties (all read-only unless otherwise indicated): - id:            the widget's ID; - type:          the type of widget (button, view, custom). For XUL-provided widgets, this is always 'custom'; - provider:      the provider type of the widget, id est one of PROVIDER_API or PROVIDER_XUL; - forWindow(w):  a method to obtain a single window wrapper for a widget, in the window w passed as the only argument; - instances:     an array of all instances (single window wrappers) of the widget. This array is NOT live; - areaType:      the type of the widget's current area - isGroup:       true; will be false for wrappers around single widget nodes; - source:        for API-provided widgets, whether they are built-in to Firefox or add-on-provided; - disabled:      for API-provided widgets, whether the widget is currently disabled. NB: this property is writable, and will toggle all the widgets' nodes' disabled states; - label:         for API-provied widgets, the label of the widget; - tooltiptext:   for API-provided widgets, the tooltip of the widget; - showInPrivateBrowsing: for API-provided widgets, whether the widget is visible in private browsing; Single window wrappers obtained through forWindow(someWindow) or from the instances array have the following properties (all read-only unless otherwise indicated): - id:            the widget's ID; - type:          the type of widget (button, view, custom). For XUL-provided widgets, this is always 'custom'; - provider:      the provider type of the widget, id est one of PROVIDER_API or PROVIDER_XUL; - node:          reference to the corresponding DOM node; - anchor:        the anchor on which to anchor panels opened from this node. This will point to the overflow chevron on overflowable toolbars if and only if your widget node is overflowed, to the anchor for the panel menu if your widget is inside the panel menu, and to the node itself in all other cases; - overflowed:    boolean indicating whether the node is currently in the overflow panel of the toolbar; - isGroup:       false; will be true for the group widget; - label:         for API-provided widgets, convenience getter for the label attribute of the DOM node; - tooltiptext:   for API-provided widgets, convenience getter for the tooltiptext attribute of the DOM node; - disabled:      for API-provided widgets, convenience getter *and setter* for the disabled state of this single widget. Note that you may prefer to use the group wrapper's getter/setter instead.",
              "tags": [
                {
                  "tag": "param",
                  "name": "aWidgetId",
                  "type": "",
                  "optional": false,
                  "description": "the ID of the widget whose information you need",
                  "problems": [],
                  "source": [
                    {
                      "number": 55,
                      "source": "   * @param aWidgetId the ID of the widget whose information you need",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aWidgetId",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "the ID of the widget whose information you need",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "return",
                  "name": "a",
                  "type": "",
                  "optional": false,
                  "description": "wrapper around the widget as described above, or null if the widget is known not to exist (anymore). NB: non-null return is no guarantee the widget exists because we cannot know in advance if a XUL widget exists or not.",
                  "problems": [],
                  "source": [
                    {
                      "number": 56,
                      "source": "   * @return a wrapper around the widget as described above, or null if the",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@return",
                        "postTag": " ",
                        "name": "a",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "wrapper around the widget as described above, or null if the",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 57,
                      "source": "   *         widget is known not to exist (anymore). NB: non-null return",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "         ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "widget is known not to exist (anymore). NB: non-null return",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 58,
                      "source": "   *         is no guarantee the widget exists because we cannot know in",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "         ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "is no guarantee the widget exists because we cannot know in",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 59,
                      "source": "   *         advance if a XUL widget exists or not.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "         ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "advance if a XUL widget exists or not.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 60,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 61,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Get a wrapper object with information about the widget.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Get a wrapper object with information about the widget.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * The object provides the following properties",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "The object provides the following properties",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * (all read-only unless otherwise indicated):",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "(all read-only unless otherwise indicated):",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   * - id:            the widget's ID;",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- id:            the widget's ID;",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "   * - type:          the type of widget (button, view, custom). For",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- type:          the type of widget (button, view, custom). For",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 8,
                  "source": "   *                  XUL-provided widgets, this is always 'custom';",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "XUL-provided widgets, this is always 'custom';",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 9,
                  "source": "   * - provider:      the provider type of the widget, id est one of",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- provider:      the provider type of the widget, id est one of",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 10,
                  "source": "   *                  PROVIDER_API or PROVIDER_XUL;",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "PROVIDER_API or PROVIDER_XUL;",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 11,
                  "source": "   * - forWindow(w):  a method to obtain a single window wrapper for a widget,",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- forWindow(w):  a method to obtain a single window wrapper for a widget,",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 12,
                  "source": "   *                  in the window w passed as the only argument;",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "in the window w passed as the only argument;",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 13,
                  "source": "   * - instances:     an array of all instances (single window wrappers)",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- instances:     an array of all instances (single window wrappers)",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 14,
                  "source": "   *                  of the widget. This array is NOT live;",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "of the widget. This array is NOT live;",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 15,
                  "source": "   * - areaType:      the type of the widget's current area",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- areaType:      the type of the widget's current area",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 16,
                  "source": "   * - isGroup:       true; will be false for wrappers around single widget nodes;",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- isGroup:       true; will be false for wrappers around single widget nodes;",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 17,
                  "source": "   * - source:        for API-provided widgets, whether they are built-in to",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- source:        for API-provided widgets, whether they are built-in to",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 18,
                  "source": "   *                  Firefox or add-on-provided;",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Firefox or add-on-provided;",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 19,
                  "source": "   * - disabled:      for API-provided widgets, whether the widget is currently",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- disabled:      for API-provided widgets, whether the widget is currently",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 20,
                  "source": "   *                  disabled. NB: this property is writable, and will toggle",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "disabled. NB: this property is writable, and will toggle",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 21,
                  "source": "   *                  all the widgets' nodes' disabled states;",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "all the widgets' nodes' disabled states;",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 22,
                  "source": "   * - label:         for API-provied widgets, the label of the widget;",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- label:         for API-provied widgets, the label of the widget;",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 23,
                  "source": "   * - tooltiptext:   for API-provided widgets, the tooltip of the widget;",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- tooltiptext:   for API-provided widgets, the tooltip of the widget;",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 24,
                  "source": "   * - showInPrivateBrowsing: for API-provided widgets, whether the widget is",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- showInPrivateBrowsing: for API-provided widgets, whether the widget is",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 25,
                  "source": "   *                          visible in private browsing;",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                          ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "visible in private browsing;",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 26,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 27,
                  "source": "   * Single window wrappers obtained through forWindow(someWindow) or from the",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Single window wrappers obtained through forWindow(someWindow) or from the",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 28,
                  "source": "   * instances array have the following properties",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "instances array have the following properties",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 29,
                  "source": "   * (all read-only unless otherwise indicated):",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "(all read-only unless otherwise indicated):",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 30,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 31,
                  "source": "   * - id:            the widget's ID;",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- id:            the widget's ID;",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 32,
                  "source": "   * - type:          the type of widget (button, view, custom). For",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- type:          the type of widget (button, view, custom). For",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 33,
                  "source": "   *                  XUL-provided widgets, this is always 'custom';",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "XUL-provided widgets, this is always 'custom';",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 34,
                  "source": "   * - provider:      the provider type of the widget, id est one of",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- provider:      the provider type of the widget, id est one of",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 35,
                  "source": "   *                  PROVIDER_API or PROVIDER_XUL;",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "PROVIDER_API or PROVIDER_XUL;",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 36,
                  "source": "   * - node:          reference to the corresponding DOM node;",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- node:          reference to the corresponding DOM node;",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 37,
                  "source": "   * - anchor:        the anchor on which to anchor panels opened from this",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- anchor:        the anchor on which to anchor panels opened from this",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 38,
                  "source": "   *                  node. This will point to the overflow chevron on",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "node. This will point to the overflow chevron on",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 39,
                  "source": "   *                  overflowable toolbars if and only if your widget node",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "overflowable toolbars if and only if your widget node",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 40,
                  "source": "   *                  is overflowed, to the anchor for the panel menu",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "is overflowed, to the anchor for the panel menu",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 41,
                  "source": "   *                  if your widget is inside the panel menu, and to the",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "if your widget is inside the panel menu, and to the",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 42,
                  "source": "   *                  node itself in all other cases;",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "node itself in all other cases;",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 43,
                  "source": "   * - overflowed:    boolean indicating whether the node is currently in the",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- overflowed:    boolean indicating whether the node is currently in the",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 44,
                  "source": "   *                  overflow panel of the toolbar;",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "overflow panel of the toolbar;",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 45,
                  "source": "   * - isGroup:       false; will be true for the group widget;",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- isGroup:       false; will be true for the group widget;",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 46,
                  "source": "   * - label:         for API-provided widgets, convenience getter for the",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- label:         for API-provided widgets, convenience getter for the",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 47,
                  "source": "   *                  label attribute of the DOM node;",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "label attribute of the DOM node;",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 48,
                  "source": "   * - tooltiptext:   for API-provided widgets, convenience getter for the",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- tooltiptext:   for API-provided widgets, convenience getter for the",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 49,
                  "source": "   *                  tooltiptext attribute of the DOM node;",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "tooltiptext attribute of the DOM node;",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 50,
                  "source": "   * - disabled:      for API-provided widgets, convenience getter *and setter*",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "- disabled:      for API-provided widgets, convenience getter *and setter*",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 51,
                  "source": "   *                  for the disabled state of this single widget. Note that",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "for the disabled state of this single widget. Note that",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 52,
                  "source": "   *                  you may prefer to use the group wrapper's getter/setter",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "you may prefer to use the group wrapper's getter/setter",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 53,
                  "source": "   *                  instead.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "instead.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 54,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 55,
                  "source": "   * @param aWidgetId the ID of the widget whose information you need",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aWidgetId",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "the ID of the widget whose information you need",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 56,
                  "source": "   * @return a wrapper around the widget as described above, or null if the",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@return",
                    "postTag": " ",
                    "name": "a",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "wrapper around the widget as described above, or null if the",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 57,
                  "source": "   *         widget is known not to exist (anymore). NB: non-null return",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "         ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "widget is known not to exist (anymore). NB: non-null return",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 58,
                  "source": "   *         is no guarantee the widget exists because we cannot know in",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "         ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "is no guarantee the widget exists because we cannot know in",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 59,
                  "source": "   *         advance if a XUL widget exists or not.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "         ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "advance if a XUL widget exists or not.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 60,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 61,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aWidgetId"
          ]
        },
        {
          "type": "object-method",
          "line": 4284,
          "id": "getUnusedWidgets",
          "comments": [
            {
              "description": "Get an array of widget wrappers (see getWidget) for all the widgets which are currently not in any area (so which are in the palette).",
              "tags": [
                {
                  "tag": "param",
                  "name": "aWindowPalette",
                  "type": "",
                  "optional": false,
                  "description": "the palette (and by extension, the window) in which CustomizableUI should look. This matters because of course XUL-provided widgets could be available in some windows but not others, and likewise API-provided widgets might not exist in a private window (because of the showInPrivateBrowsing property).",
                  "problems": [],
                  "source": [
                    {
                      "number": 5,
                      "source": "   * @param aWindowPalette the palette (and by extension, the window) in which",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aWindowPalette",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "the palette (and by extension, the window) in which",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 6,
                      "source": "   *                       CustomizableUI should look. This matters because of",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                       ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "CustomizableUI should look. This matters because of",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 7,
                      "source": "   *                       course XUL-provided widgets could be available in",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                       ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "course XUL-provided widgets could be available in",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 8,
                      "source": "   *                       some windows but not others, and likewise",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                       ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "some windows but not others, and likewise",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 9,
                      "source": "   *                       API-provided widgets might not exist in a private",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                       ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "API-provided widgets might not exist in a private",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 10,
                      "source": "   *                       window (because of the showInPrivateBrowsing",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                       ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "window (because of the showInPrivateBrowsing",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 11,
                      "source": "   *                       property).",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                       ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "property).",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 12,
                      "source": "   *",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "return",
                  "name": "an",
                  "type": "",
                  "optional": false,
                  "description": "array of widget wrappers (see getWidget)",
                  "problems": [],
                  "source": [
                    {
                      "number": 13,
                      "source": "   * @return an array of widget wrappers (see getWidget)",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@return",
                        "postTag": " ",
                        "name": "an",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "array of widget wrappers (see getWidget)",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 14,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 15,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Get an array of widget wrappers (see getWidget) for all the widgets",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Get an array of widget wrappers (see getWidget) for all the widgets",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * which are currently not in any area (so which are in the palette).",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "which are currently not in any area (so which are in the palette).",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   * @param aWindowPalette the palette (and by extension, the window) in which",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aWindowPalette",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "the palette (and by extension, the window) in which",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   *                       CustomizableUI should look. This matters because of",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                       ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "CustomizableUI should look. This matters because of",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "   *                       course XUL-provided widgets could be available in",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                       ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "course XUL-provided widgets could be available in",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 8,
                  "source": "   *                       some windows but not others, and likewise",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                       ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "some windows but not others, and likewise",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 9,
                  "source": "   *                       API-provided widgets might not exist in a private",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                       ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "API-provided widgets might not exist in a private",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 10,
                  "source": "   *                       window (because of the showInPrivateBrowsing",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                       ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "window (because of the showInPrivateBrowsing",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 11,
                  "source": "   *                       property).",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                       ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "property).",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 12,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 13,
                  "source": "   * @return an array of widget wrappers (see getWidget)",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@return",
                    "postTag": " ",
                    "name": "an",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "array of widget wrappers (see getWidget)",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 14,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 15,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aWindowPalette"
          ]
        },
        {
          "type": "object-method",
          "line": 4300,
          "id": "getWidgetIdsInArea",
          "comments": [
            {
              "description": "Get an array of all the widget IDs placed in an area. Modifying the array will not affect CustomizableUI.",
              "tags": [
                {
                  "tag": "param",
                  "name": "aArea",
                  "type": "",
                  "optional": false,
                  "description": "the ID of the area whose placements you want to obtain.",
                  "problems": [],
                  "source": [
                    {
                      "number": 5,
                      "source": "   * @param aArea the ID of the area whose placements you want to obtain.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aArea",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "the ID of the area whose placements you want to obtain.",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "return",
                  "name": "an",
                  "type": "",
                  "optional": false,
                  "description": "array containing the widget IDs that are in the area. NB: will throw if called too early (before placements have been fetched) or if the area is not currently known to CustomizableUI.",
                  "problems": [],
                  "source": [
                    {
                      "number": 6,
                      "source": "   * @return an array containing the widget IDs that are in the area.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@return",
                        "postTag": " ",
                        "name": "an",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "array containing the widget IDs that are in the area.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 7,
                      "source": "   *",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 8,
                      "source": "   * NB: will throw if called too early (before placements have been fetched)",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "NB: will throw if called too early (before placements have been fetched)",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 9,
                      "source": "   *     or if the area is not currently known to CustomizableUI.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "or if the area is not currently known to CustomizableUI.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 10,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 11,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Get an array of all the widget IDs placed in an area.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Get an array of all the widget IDs placed in an area.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * Modifying the array will not affect CustomizableUI.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Modifying the array will not affect CustomizableUI.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   * @param aArea the ID of the area whose placements you want to obtain.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aArea",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "the ID of the area whose placements you want to obtain.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   * @return an array containing the widget IDs that are in the area.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@return",
                    "postTag": " ",
                    "name": "an",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "array containing the widget IDs that are in the area.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 8,
                  "source": "   * NB: will throw if called too early (before placements have been fetched)",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "NB: will throw if called too early (before placements have been fetched)",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 9,
                  "source": "   *     or if the area is not currently known to CustomizableUI.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "or if the area is not currently known to CustomizableUI.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 10,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 11,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aArea"
          ]
        },
        {
          "type": "object-method",
          "line": 4325,
          "id": "getWidgetsInArea",
          "comments": [
            {
              "description": "Get an array of widget wrappers for all the widgets in an area. This is the same as calling getWidgetIdsInArea and .map() ing the result through CustomizableUI.getWidget. Careful: this means that if there are IDs in there which don't have corresponding DOM nodes, there might be nulls in this array, or items for which wrapper.forWindow(win) will return null.",
              "tags": [
                {
                  "tag": "param",
                  "name": "aArea",
                  "type": "",
                  "optional": false,
                  "description": "the ID of the area whose widgets you want to obtain.",
                  "problems": [],
                  "source": [
                    {
                      "number": 8,
                      "source": "   * @param aArea the ID of the area whose widgets you want to obtain.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aArea",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "the ID of the area whose widgets you want to obtain.",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "return",
                  "name": "an",
                  "type": "",
                  "optional": false,
                  "description": "array of widget wrappers and/or null values for the widget IDs placed in an area. NB: will throw if called too early (before placements have been fetched) or if the area is not currently known to CustomizableUI.",
                  "problems": [],
                  "source": [
                    {
                      "number": 9,
                      "source": "   * @return an array of widget wrappers and/or null values for the widget IDs",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@return",
                        "postTag": " ",
                        "name": "an",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "array of widget wrappers and/or null values for the widget IDs",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 10,
                      "source": "   *         placed in an area.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "         ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "placed in an area.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 11,
                      "source": "   *",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 12,
                      "source": "   * NB: will throw if called too early (before placements have been fetched)",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "NB: will throw if called too early (before placements have been fetched)",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 13,
                      "source": "   *     or if the area is not currently known to CustomizableUI.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "or if the area is not currently known to CustomizableUI.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 14,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 15,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Get an array of widget wrappers for all the widgets in an area. This is",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Get an array of widget wrappers for all the widgets in an area. This is",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * the same as calling getWidgetIdsInArea and .map() ing the result through",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "the same as calling getWidgetIdsInArea and .map() ing the result through",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * CustomizableUI.getWidget. Careful: this means that if there are IDs in there",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "CustomizableUI.getWidget. Careful: this means that if there are IDs in there",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   * which don't have corresponding DOM nodes, there might be nulls in this array,",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "which don't have corresponding DOM nodes, there might be nulls in this array,",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   * or items for which wrapper.forWindow(win) will return null.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "or items for which wrapper.forWindow(win) will return null.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 8,
                  "source": "   * @param aArea the ID of the area whose widgets you want to obtain.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aArea",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "the ID of the area whose widgets you want to obtain.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 9,
                  "source": "   * @return an array of widget wrappers and/or null values for the widget IDs",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@return",
                    "postTag": " ",
                    "name": "an",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "array of widget wrappers and/or null values for the widget IDs",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 10,
                  "source": "   *         placed in an area.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "         ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "placed in an area.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 11,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 12,
                  "source": "   * NB: will throw if called too early (before placements have been fetched)",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "NB: will throw if called too early (before placements have been fetched)",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 13,
                  "source": "   *     or if the area is not currently known to CustomizableUI.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "or if the area is not currently known to CustomizableUI.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 14,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 15,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aArea"
          ]
        },
        {
          "type": "object-method",
          "line": 4339,
          "id": "ensureSubviewListeners",
          "comments": [
            {
              "description": "Ensure the customizable widget that matches up with this view node will get the right subview showing/shown/hiding/hidden events when they fire.",
              "tags": [
                {
                  "tag": "param",
                  "name": "aViewNode",
                  "type": "",
                  "optional": false,
                  "description": "the view node to add listeners to if they haven't been added already.",
                  "problems": [],
                  "source": [
                    {
                      "number": 5,
                      "source": "   * @param aViewNode the view node to add listeners to if they haven't",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aViewNode",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "the view node to add listeners to if they haven't",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 6,
                      "source": "   *                  been added already.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                  ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "been added already.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 7,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 8,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Ensure the customizable widget that matches up with this view node",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Ensure the customizable widget that matches up with this view node",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * will get the right subview showing/shown/hiding/hidden events when",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "will get the right subview showing/shown/hiding/hidden events when",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * they fire.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "they fire.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   * @param aViewNode the view node to add listeners to if they haven't",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aViewNode",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "the view node to add listeners to if they haven't",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   *                  been added already.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "been added already.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 8,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aViewNode"
          ]
        },
        {
          "type": "object-method",
          "line": 4347,
          "id": "areas",
          "comments": [
            {
              "description": "Obtain an array of all the area IDs known to CustomizableUI. This array is created for you, so is modifiable without CustomizableUI being affected.",
              "tags": [],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Obtain an array of all the area IDs known to CustomizableUI.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Obtain an array of all the area IDs known to CustomizableUI.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * This array is created for you, so is modifiable without CustomizableUI",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "This array is created for you, so is modifiable without CustomizableUI",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * being affected.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "being affected.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "get",
          "params": []
        },
        {
          "type": "object-method",
          "line": 4360,
          "id": "getAreaType",
          "comments": [
            {
              "description": "Check what kind of area (toolbar or menu panel) an area is. This is useful if you have a widget that needs to behave differently depending on its location. Note that widget wrappers have a convenience getter property (areaType) for this purpose.",
              "tags": [
                {
                  "tag": "param",
                  "name": "aArea",
                  "type": "",
                  "optional": false,
                  "description": "the ID of the area whose type you want to know",
                  "problems": [],
                  "source": [
                    {
                      "number": 7,
                      "source": "   * @param aArea the ID of the area whose type you want to know",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aArea",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "the ID of the area whose type you want to know",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "return",
                  "name": "TYPE_TOOLBAR",
                  "type": "",
                  "optional": false,
                  "description": "or TYPE_PANEL depending on the area, null if the area is unknown.",
                  "problems": [],
                  "source": [
                    {
                      "number": 8,
                      "source": "   * @return TYPE_TOOLBAR or TYPE_PANEL depending on the area, null if",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@return",
                        "postTag": " ",
                        "name": "TYPE_TOOLBAR",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "or TYPE_PANEL depending on the area, null if",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 9,
                      "source": "   *         the area is unknown.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "         ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "the area is unknown.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 10,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 11,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Check what kind of area (toolbar or menu panel) an area is. This is",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Check what kind of area (toolbar or menu panel) an area is. This is",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * useful if you have a widget that needs to behave differently depending",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "useful if you have a widget that needs to behave differently depending",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * on its location. Note that widget wrappers have a convenience getter",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "on its location. Note that widget wrappers have a convenience getter",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   * property (areaType) for this purpose.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "property (areaType) for this purpose.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "   * @param aArea the ID of the area whose type you want to know",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aArea",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "the ID of the area whose type you want to know",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 8,
                  "source": "   * @return TYPE_TOOLBAR or TYPE_PANEL depending on the area, null if",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@return",
                    "postTag": " ",
                    "name": "TYPE_TOOLBAR",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "or TYPE_PANEL depending on the area, null if",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 9,
                  "source": "   *         the area is unknown.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "         ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "the area is unknown.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 10,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 11,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aArea"
          ]
        },
        {
          "type": "object-method",
          "line": 4371,
          "id": "isToolbarDefaultCollapsed",
          "comments": [
            {
              "description": "Check if a toolbar is collapsed by default.",
              "tags": [
                {
                  "tag": "param",
                  "name": "aArea",
                  "type": "",
                  "optional": false,
                  "description": "the ID of the area whose default-collapsed state you want to know.",
                  "problems": [],
                  "source": [
                    {
                      "number": 4,
                      "source": "   * @param aArea the ID of the area whose default-collapsed state you want to know.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aArea",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "the ID of the area whose default-collapsed state you want to know.",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "return",
                  "name": "`true`",
                  "type": "",
                  "optional": false,
                  "description": "or `false` depending on the area, null if the area is unknown, or its collapsed state cannot normally be controlled by the user",
                  "problems": [],
                  "source": [
                    {
                      "number": 5,
                      "source": "   * @return `true` or `false` depending on the area, null if the area is unknown,",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@return",
                        "postTag": " ",
                        "name": "`true`",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "or `false` depending on the area, null if the area is unknown,",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 6,
                      "source": "   *         or its collapsed state cannot normally be controlled by the user",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "         ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "or its collapsed state cannot normally be controlled by the user",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 7,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 8,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Check if a toolbar is collapsed by default.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Check if a toolbar is collapsed by default.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * @param aArea the ID of the area whose default-collapsed state you want to know.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aArea",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "the ID of the area whose default-collapsed state you want to know.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   * @return `true` or `false` depending on the area, null if the area is unknown,",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@return",
                    "postTag": " ",
                    "name": "`true`",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "or `false` depending on the area, null if the area is unknown,",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   *         or its collapsed state cannot normally be controlled by the user",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "         ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "or its collapsed state cannot normally be controlled by the user",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 8,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aArea"
          ]
        },
        {
          "type": "object-method",
          "line": 4399,
          "id": "getCustomizeTargetForArea",
          "comments": [
            {
              "description": "Obtain the DOM node that is the customize target for an area in a specific window. Areas can have a customization target that does not correspond to the node itself. In particular, toolbars that have a customizationtarget attribute set will have their customization target set to that node. This means widgets will end up in the customization target, not in the DOM node with the ID that corresponds to the area ID. This is useful because it lets you have fixed content in a toolbar (e.g. the panel menu item in the navbar) and have all the customizable widgets use the customization target. Using this API yourself is discouraged; you should generally not need to be asking for the DOM container node used for a particular area. In particular, if you're wanting to check it in relation to a widget's node, your DOM node might not be a direct child of the customize target in a window if, for instance, the window is in customization mode, or if this is an overflowable toolbar and the widget has been overflowed.",
              "tags": [
                {
                  "tag": "param",
                  "name": "aArea",
                  "type": "",
                  "optional": false,
                  "description": "the ID of the area whose customize target you want to have",
                  "problems": [],
                  "source": [
                    {
                      "number": 21,
                      "source": "   * @param aArea   the ID of the area whose customize target you want to have",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aArea",
                        "postName": "   ",
                        "type": "",
                        "postType": "",
                        "description": "the ID of the area whose customize target you want to have",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "param",
                  "name": "aWindow",
                  "type": "",
                  "optional": false,
                  "description": "the window where you want to fetch the DOM node.",
                  "problems": [],
                  "source": [
                    {
                      "number": 22,
                      "source": "   * @param aWindow the window where you want to fetch the DOM node.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aWindow",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "the window where you want to fetch the DOM node.",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "return",
                  "name": "the",
                  "type": "",
                  "optional": false,
                  "description": "customize target DOM node for aArea in aWindow",
                  "problems": [],
                  "source": [
                    {
                      "number": 23,
                      "source": "   * @return the customize target DOM node for aArea in aWindow",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@return",
                        "postTag": " ",
                        "name": "the",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "customize target DOM node for aArea in aWindow",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 24,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 25,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Obtain the DOM node that is the customize target for an area in a",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Obtain the DOM node that is the customize target for an area in a",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * specific window.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "specific window.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   * Areas can have a customization target that does not correspond to the",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Areas can have a customization target that does not correspond to the",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   * node itself. In particular, toolbars that have a customizationtarget",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "node itself. In particular, toolbars that have a customizationtarget",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "   * attribute set will have their customization target set to that node.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "attribute set will have their customization target set to that node.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 8,
                  "source": "   * This means widgets will end up in the customization target, not in the",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "This means widgets will end up in the customization target, not in the",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 9,
                  "source": "   * DOM node with the ID that corresponds to the area ID. This is useful",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "DOM node with the ID that corresponds to the area ID. This is useful",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 10,
                  "source": "   * because it lets you have fixed content in a toolbar (e.g. the panel",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "because it lets you have fixed content in a toolbar (e.g. the panel",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 11,
                  "source": "   * menu item in the navbar) and have all the customizable widgets use",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "menu item in the navbar) and have all the customizable widgets use",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 12,
                  "source": "   * the customization target.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "the customization target.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 13,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 14,
                  "source": "   * Using this API yourself is discouraged; you should generally not need",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Using this API yourself is discouraged; you should generally not need",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 15,
                  "source": "   * to be asking for the DOM container node used for a particular area.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "to be asking for the DOM container node used for a particular area.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 16,
                  "source": "   * In particular, if you're wanting to check it in relation to a widget's",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "In particular, if you're wanting to check it in relation to a widget's",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 17,
                  "source": "   * node, your DOM node might not be a direct child of the customize target",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "node, your DOM node might not be a direct child of the customize target",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 18,
                  "source": "   * in a window if, for instance, the window is in customization mode, or if",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "in a window if, for instance, the window is in customization mode, or if",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 19,
                  "source": "   * this is an overflowable toolbar and the widget has been overflowed.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "this is an overflowable toolbar and the widget has been overflowed.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 20,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 21,
                  "source": "   * @param aArea   the ID of the area whose customize target you want to have",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aArea",
                    "postName": "   ",
                    "type": "",
                    "postType": "",
                    "description": "the ID of the area whose customize target you want to have",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 22,
                  "source": "   * @param aWindow the window where you want to fetch the DOM node.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aWindow",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "the window where you want to fetch the DOM node.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 23,
                  "source": "   * @return the customize target DOM node for aArea in aWindow",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@return",
                    "postTag": " ",
                    "name": "the",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "customize target DOM node for aArea in aWindow",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 24,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 25,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aArea",
            "aWindow"
          ]
        },
        {
          "type": "object-method",
          "line": 4409,
          "id": "reset",
          "comments": [
            {
              "description": "Reset the customization state back to its default. This is the nuclear option. You should never call this except if the user explicitly requests it. Firefox does this when the user clicks the \"Restore Defaults\" button in customize mode.",
              "tags": [],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Reset the customization state back to its default.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Reset the customization state back to its default.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * This is the nuclear option. You should never call this except if the user",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "This is the nuclear option. You should never call this except if the user",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   * explicitly requests it. Firefox does this when the user clicks the",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "explicitly requests it. Firefox does this when the user clicks the",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   * \"Restore Defaults\" button in customize mode.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "\"Restore Defaults\" button in customize mode.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 8,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": []
        },
        {
          "type": "object-method",
          "line": 4417,
          "id": "undoReset",
          "comments": [
            {
              "description": "Undo the previous reset, can only be called immediately after a reset.",
              "tags": [
                {
                  "tag": "return",
                  "name": "a",
                  "type": "",
                  "optional": false,
                  "description": "promise that will be resolved when the operation is complete.",
                  "problems": [],
                  "source": [
                    {
                      "number": 3,
                      "source": "   * @return a promise that will be resolved when the operation is complete.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@return",
                        "postTag": " ",
                        "name": "a",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "promise that will be resolved when the operation is complete.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 4,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 5,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Undo the previous reset, can only be called immediately after a reset.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Undo the previous reset, can only be called immediately after a reset.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * @return a promise that will be resolved when the operation is complete.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@return",
                    "postTag": " ",
                    "name": "a",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "promise that will be resolved when the operation is complete.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": []
        },
        {
          "type": "object-method",
          "line": 4428,
          "id": "removeExtraToolbar",
          "comments": [
            {
              "description": "Remove a custom toolbar added in a previous version of Firefox or using an add-on. NB: only works on the customizable toolbars generated by the toolbox itself. Intended for use from CustomizeMode, not by other consumers.",
              "tags": [
                {
                  "tag": "param",
                  "name": "aToolbarId",
                  "type": "",
                  "optional": false,
                  "description": "the ID of the toolbar to remove",
                  "problems": [],
                  "source": [
                    {
                      "number": 6,
                      "source": "   * @param aToolbarId the ID of the toolbar to remove",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aToolbarId",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "the ID of the toolbar to remove",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 7,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 8,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Remove a custom toolbar added in a previous version of Firefox or using",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Remove a custom toolbar added in a previous version of Firefox or using",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * an add-on. NB: only works on the customizable toolbars generated by",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "an add-on. NB: only works on the customizable toolbars generated by",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * the toolbox itself. Intended for use from CustomizeMode, not by",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "the toolbox itself. Intended for use from CustomizeMode, not by",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   * other consumers.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "other consumers.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   * @param aToolbarId the ID of the toolbar to remove",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aToolbarId",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "the ID of the toolbar to remove",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 8,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aToolbarId"
          ]
        },
        {
          "type": "object-method",
          "line": 4438,
          "id": "canUndoReset",
          "comments": [
            {
              "description": "Can the last Restore Defaults operation be undone.",
              "tags": [
                {
                  "tag": "return",
                  "name": "A",
                  "type": "",
                  "optional": false,
                  "description": "boolean stating whether an undo of the Restore Defaults can be performed.",
                  "problems": [],
                  "source": [
                    {
                      "number": 4,
                      "source": "   * @return A boolean stating whether an undo of the",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@return",
                        "postTag": " ",
                        "name": "A",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "boolean stating whether an undo of the",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 5,
                      "source": "   *         Restore Defaults can be performed.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "         ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "Restore Defaults can be performed.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 6,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 7,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Can the last Restore Defaults operation be undone.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Can the last Restore Defaults operation be undone.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * @return A boolean stating whether an undo of the",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@return",
                    "postTag": " ",
                    "name": "A",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "boolean stating whether an undo of the",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   *         Restore Defaults can be performed.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "         ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Restore Defaults can be performed.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "get",
          "params": []
        },
        {
          "type": "object-method",
          "line": 4466,
          "id": "getPlacementOfWidget",
          "comments": [
            {
              "description": "Get the placement of a widget. This is by far the best way to obtain information about what the state of your widget is. The internals of this call are cheap (no DOM necessary) and you will know where the user has put your widget.",
              "tags": [
                {
                  "tag": "param",
                  "name": "aWidgetId",
                  "type": "",
                  "optional": false,
                  "description": "the ID of the widget whose placement you want to know",
                  "problems": [],
                  "source": [
                    {
                      "number": 7,
                      "source": "   * @param aWidgetId the ID of the widget whose placement you want to know",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aWidgetId",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "the ID of the widget whose placement you want to know",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "return",
                  "name": "",
                  "type": "",
                  "optional": false,
                  "description": "{ area: \"somearea\", // The ID of the area where the widget is placed position: 42 // the index in the placements array corresponding to // your widget. } OR null // if the widget is not placed anywhere (ie in the palette)",
                  "problems": [],
                  "source": [
                    {
                      "number": 8,
                      "source": "   * @return",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@return",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 9,
                      "source": "   *   {",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "   ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "{",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 10,
                      "source": "   *     area: \"somearea\", // The ID of the area where the widget is placed",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "area: \"somearea\", // The ID of the area where the widget is placed",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 11,
                      "source": "   *     position: 42 // the index in the placements array corresponding to",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "     ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "position: 42 // the index in the placements array corresponding to",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 12,
                      "source": "   *                  // your widget.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                  ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "// your widget.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 13,
                      "source": "   *   }",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "   ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "}",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 14,
                      "source": "   *",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 15,
                      "source": "   *   OR",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "   ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "OR",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 16,
                      "source": "   *",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 17,
                      "source": "   *   null // if the widget is not placed anywhere (ie in the palette)",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "   ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "null // if the widget is not placed anywhere (ie in the palette)",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 18,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 19,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Get the placement of a widget. This is by far the best way to obtain",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Get the placement of a widget. This is by far the best way to obtain",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * information about what the state of your widget is. The internals of",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "information about what the state of your widget is. The internals of",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * this call are cheap (no DOM necessary) and you will know where the user",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "this call are cheap (no DOM necessary) and you will know where the user",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   * has put your widget.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "has put your widget.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "   * @param aWidgetId the ID of the widget whose placement you want to know",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aWidgetId",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "the ID of the widget whose placement you want to know",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 8,
                  "source": "   * @return",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@return",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 9,
                  "source": "   *   {",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "   ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "{",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 10,
                  "source": "   *     area: \"somearea\", // The ID of the area where the widget is placed",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "area: \"somearea\", // The ID of the area where the widget is placed",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 11,
                  "source": "   *     position: 42 // the index in the placements array corresponding to",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "position: 42 // the index in the placements array corresponding to",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 12,
                  "source": "   *                  // your widget.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "// your widget.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 13,
                  "source": "   *   }",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "   ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "}",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 14,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 15,
                  "source": "   *   OR",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "   ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "OR",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 16,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 17,
                  "source": "   *   null // if the widget is not placed anywhere (ie in the palette)",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "   ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "null // if the widget is not placed anywhere (ie in the palette)",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 18,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 19,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aWidgetId",
            "aOnlyRegistered",
            "aDeadAreas"
          ]
        },
        {
          "type": "object-method",
          "line": 4491,
          "id": "isWidgetRemovable",
          "comments": [
            {
              "description": "Check if a widget can be removed from the area it's in. Note that if you're wanting to move the widget somewhere, you should generally be checking canWidgetMoveToArea, because that will return true if the widget is already in the area where you want to move it (!). NB: oh, also, this method might lie if the widget in question is a XUL-provided widget and there are no windows open, because it can obviously not check anything in this case. It will return true. You will be able to move the widget elsewhere. However, once the user reopens a window, the widget will move back to its 'proper' area automagically.",
              "tags": [
                {
                  "tag": "param",
                  "name": "aWidgetId",
                  "type": "",
                  "optional": false,
                  "description": "a widget ID or DOM node to check",
                  "problems": [],
                  "source": [
                    {
                      "number": 15,
                      "source": "   * @param aWidgetId a widget ID or DOM node to check",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aWidgetId",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "a widget ID or DOM node to check",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "return",
                  "name": "true",
                  "type": "",
                  "optional": false,
                  "description": "if the widget can be removed from its area, false otherwise.",
                  "problems": [],
                  "source": [
                    {
                      "number": 16,
                      "source": "   * @return true if the widget can be removed from its area,",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@return",
                        "postTag": " ",
                        "name": "true",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "if the widget can be removed from its area,",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 17,
                      "source": "   *          false otherwise.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "          ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "false otherwise.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 18,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 19,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Check if a widget can be removed from the area it's in.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Check if a widget can be removed from the area it's in.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * Note that if you're wanting to move the widget somewhere, you should",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Note that if you're wanting to move the widget somewhere, you should",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   * generally be checking canWidgetMoveToArea, because that will return",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "generally be checking canWidgetMoveToArea, because that will return",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   * true if the widget is already in the area where you want to move it (!).",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "true if the widget is already in the area where you want to move it (!).",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 8,
                  "source": "   * NB: oh, also, this method might lie if the widget in question is a",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "NB: oh, also, this method might lie if the widget in question is a",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 9,
                  "source": "   *     XUL-provided widget and there are no windows open, because it",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "XUL-provided widget and there are no windows open, because it",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 10,
                  "source": "   *     can obviously not check anything in this case. It will return",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "can obviously not check anything in this case. It will return",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 11,
                  "source": "   *     true. You will be able to move the widget elsewhere. However,",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "true. You will be able to move the widget elsewhere. However,",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 12,
                  "source": "   *     once the user reopens a window, the widget will move back to its",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "once the user reopens a window, the widget will move back to its",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 13,
                  "source": "   *     'proper' area automagically.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "'proper' area automagically.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 14,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 15,
                  "source": "   * @param aWidgetId a widget ID or DOM node to check",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aWidgetId",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "a widget ID or DOM node to check",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 16,
                  "source": "   * @return true if the widget can be removed from its area,",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@return",
                    "postTag": " ",
                    "name": "true",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "if the widget can be removed from its area,",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 17,
                  "source": "   *          false otherwise.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "          ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "false otherwise.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 18,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 19,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aWidgetId"
          ]
        },
        {
          "type": "object-method",
          "line": 4506,
          "id": "canWidgetMoveToArea",
          "comments": [
            {
              "description": "Check if a widget can be moved to a particular area. Like isWidgetRemovable but better, because it'll return true if the widget is already in the right area.",
              "tags": [
                {
                  "tag": "param",
                  "name": "aWidgetId",
                  "type": "",
                  "optional": false,
                  "description": "the widget ID or DOM node you want to move somewhere",
                  "problems": [],
                  "source": [
                    {
                      "number": 6,
                      "source": "   * @param aWidgetId the widget ID or DOM node you want to move somewhere",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aWidgetId",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "the widget ID or DOM node you want to move somewhere",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "param",
                  "name": "aArea",
                  "type": "",
                  "optional": false,
                  "description": "the area ID you want to move it to. This can also be AREA_NO_AREA to see if the widget can move to the customization palette, whether it's removable or not.",
                  "problems": [],
                  "source": [
                    {
                      "number": 7,
                      "source": "   * @param aArea     the area ID you want to move it to. This can also be",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aArea",
                        "postName": "     ",
                        "type": "",
                        "postType": "",
                        "description": "the area ID you want to move it to. This can also be",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 8,
                      "source": "   *                  AREA_NO_AREA to see if the widget can move to the",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                  ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "AREA_NO_AREA to see if the widget can move to the",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 9,
                      "source": "   *                  customization palette, whether it's removable or not.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                  ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "customization palette, whether it's removable or not.",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "return",
                  "name": "true",
                  "type": "",
                  "optional": false,
                  "description": "if this is possible, false if it is not. The same caveats as for isWidgetRemovable apply, however, if no windows are open.",
                  "problems": [],
                  "source": [
                    {
                      "number": 10,
                      "source": "   * @return true if this is possible, false if it is not. The same caveats as",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@return",
                        "postTag": " ",
                        "name": "true",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "if this is possible, false if it is not. The same caveats as",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 11,
                      "source": "   *              for isWidgetRemovable apply, however, if no windows are open.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "              ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "for isWidgetRemovable apply, however, if no windows are open.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 12,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 13,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Check if a widget can be moved to a particular area. Like",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Check if a widget can be moved to a particular area. Like",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * isWidgetRemovable but better, because it'll return true if the widget",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "isWidgetRemovable but better, because it'll return true if the widget",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * is already in the right area.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "is already in the right area.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   * @param aWidgetId the widget ID or DOM node you want to move somewhere",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aWidgetId",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "the widget ID or DOM node you want to move somewhere",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "   * @param aArea     the area ID you want to move it to. This can also be",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aArea",
                    "postName": "     ",
                    "type": "",
                    "postType": "",
                    "description": "the area ID you want to move it to. This can also be",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 8,
                  "source": "   *                  AREA_NO_AREA to see if the widget can move to the",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "AREA_NO_AREA to see if the widget can move to the",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 9,
                  "source": "   *                  customization palette, whether it's removable or not.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                  ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "customization palette, whether it's removable or not.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 10,
                  "source": "   * @return true if this is possible, false if it is not. The same caveats as",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@return",
                    "postTag": " ",
                    "name": "true",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "if this is possible, false if it is not. The same caveats as",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 11,
                  "source": "   *              for isWidgetRemovable apply, however, if no windows are open.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "              ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "for isWidgetRemovable apply, however, if no windows are open.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 12,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 13,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aWidgetId",
            "aArea"
          ]
        },
        {
          "type": "object-method",
          "line": 4518,
          "id": "inDefaultState",
          "comments": [
            {
              "description": "Whether we're in a default state. Note that non-removable non-default widgets and non-existing widgets are not taken into account in determining whether we're in the default state. NB: this is a property with a getter. The getter is NOT cheap, because it does smart things with non-removable non-default items, non-existent items, and so forth. Please don't call unless necessary.",
              "tags": [],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Whether we're in a default state. Note that non-removable non-default",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Whether we're in a default state. Note that non-removable non-default",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * widgets and non-existing widgets are not taken into account in determining",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "widgets and non-existing widgets are not taken into account in determining",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * whether we're in the default state.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "whether we're in the default state.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   * NB: this is a property with a getter. The getter is NOT cheap, because",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "NB: this is a property with a getter. The getter is NOT cheap, because",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "   * it does smart things with non-removable non-default items, non-existent",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "it does smart things with non-removable non-default items, non-existent",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 8,
                  "source": "   * items, and so forth. Please don't call unless necessary.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "items, and so forth. Please don't call unless necessary.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 9,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 10,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "get",
          "params": []
        },
        {
          "type": "object-method",
          "line": 4527,
          "id": "setToolbarVisibility",
          "comments": [
            {
              "description": "Set a toolbar's visibility state in all windows.",
              "tags": [
                {
                  "tag": "param",
                  "name": "aToolbarId",
                  "type": "",
                  "optional": false,
                  "description": "the toolbar whose visibility should be adjusted",
                  "problems": [],
                  "source": [
                    {
                      "number": 3,
                      "source": "   * @param aToolbarId    the toolbar whose visibility should be adjusted",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aToolbarId",
                        "postName": "    ",
                        "type": "",
                        "postType": "",
                        "description": "the toolbar whose visibility should be adjusted",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "param",
                  "name": "aIsVisible",
                  "type": "",
                  "optional": false,
                  "description": "whether the toolbar should be visible",
                  "problems": [],
                  "source": [
                    {
                      "number": 4,
                      "source": "   * @param aIsVisible    whether the toolbar should be visible",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aIsVisible",
                        "postName": "    ",
                        "type": "",
                        "postType": "",
                        "description": "whether the toolbar should be visible",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 5,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 6,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Set a toolbar's visibility state in all windows.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Set a toolbar's visibility state in all windows.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * @param aToolbarId    the toolbar whose visibility should be adjusted",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aToolbarId",
                    "postName": "    ",
                    "type": "",
                    "postType": "",
                    "description": "the toolbar whose visibility should be adjusted",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * @param aIsVisible    whether the toolbar should be visible",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aIsVisible",
                    "postName": "    ",
                    "type": "",
                    "postType": "",
                    "description": "whether the toolbar should be visible",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aToolbarId",
            "aIsVisible"
          ]
        },
        {
          "type": "object-method",
          "line": 4540,
          "id": "getCollapsedToolbarIds",
          "comments": [
            {
              "description": "Returns a Set with the IDs of any registered toolbar areas that are currently collapsed in a particular window. Menubars that are set to autohide and are in the temporary \"open\" state are still considered collapsed by default.",
              "tags": [
                {
                  "tag": "param",
                  "name": "window",
                  "type": "Window",
                  "optional": false,
                  "description": "The browser window to check for collapsed toolbars.",
                  "problems": [],
                  "source": [
                    {
                      "number": 7,
                      "source": "   * @param {Window} window The browser window to check for collapsed toolbars.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "window",
                        "postName": " ",
                        "type": "{Window}",
                        "postType": " ",
                        "description": "The browser window to check for collapsed toolbars.",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "return",
                  "name": "",
                  "type": "Set<string>",
                  "optional": false,
                  "description": "",
                  "problems": [],
                  "source": [
                    {
                      "number": 8,
                      "source": "   * @return {Set<string>}",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@return",
                        "postTag": " ",
                        "name": "",
                        "postName": "",
                        "type": "{Set<string>}",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 9,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 10,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Returns a Set with the IDs of any registered toolbar areas that are",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Returns a Set with the IDs of any registered toolbar areas that are",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * currently collapsed in a particular window. Menubars that are set to",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "currently collapsed in a particular window. Menubars that are set to",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * autohide and are in the temporary \"open\" state are still considered",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "autohide and are in the temporary \"open\" state are still considered",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   * collapsed by default.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "collapsed by default.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "   * @param {Window} window The browser window to check for collapsed toolbars.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "window",
                    "postName": " ",
                    "type": "{Window}",
                    "postType": " ",
                    "description": "The browser window to check for collapsed toolbars.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 8,
                  "source": "   * @return {Set<string>}",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@return",
                    "postTag": " ",
                    "name": "",
                    "postName": "",
                    "type": "{Set<string>}",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 9,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 10,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "window"
          ]
        },
        {
          "type": "object-method",
          "line": 4569,
          "id": "getLocalizedProperty",
          "comments": [
            {
              "description": "DEPRECATED! Use fluent instead. Get a localized property off a (widget?) object. NB: this is unlikely to be useful unless you're in Firefox code, because this code uses the builtin widget stringbundle, and can't be told to use add-on-provided strings. It's mainly here as convenience for custom builtin widgets that build their own DOM but use the same stringbundle as the other builtin widgets.",
              "tags": [
                {
                  "tag": "param",
                  "name": "aWidget",
                  "type": "",
                  "optional": false,
                  "description": "the object whose property we should use to fetch a localizable string;",
                  "problems": [],
                  "source": [
                    {
                      "number": 12,
                      "source": "   * @param aWidget     the object whose property we should use to fetch a",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aWidget",
                        "postName": "     ",
                        "type": "",
                        "postType": "",
                        "description": "the object whose property we should use to fetch a",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 13,
                      "source": "   *                    localizable string;",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                    ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "localizable string;",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "param",
                  "name": "aProp",
                  "type": "",
                  "optional": false,
                  "description": "the property on the object to use for the fetching;",
                  "problems": [],
                  "source": [
                    {
                      "number": 14,
                      "source": "   * @param aProp       the property on the object to use for the fetching;",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aProp",
                        "postName": "       ",
                        "type": "",
                        "postType": "",
                        "description": "the property on the object to use for the fetching;",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "param",
                  "name": "aFormatArgs",
                  "type": "",
                  "optional": false,
                  "description": "(optional) any extra arguments to use for a formatted string;",
                  "problems": [],
                  "source": [
                    {
                      "number": 15,
                      "source": "   * @param aFormatArgs (optional) any extra arguments to use for a formatted",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aFormatArgs",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "(optional) any extra arguments to use for a formatted",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 16,
                      "source": "   *                    string;",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                    ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "string;",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "param",
                  "name": "aDef",
                  "type": "",
                  "optional": false,
                  "description": "(optional) the default to return if we don't find the string in the stringbundle;",
                  "problems": [],
                  "source": [
                    {
                      "number": 17,
                      "source": "   * @param aDef        (optional) the default to return if we don't find the",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aDef",
                        "postName": "        ",
                        "type": "",
                        "postType": "",
                        "description": "(optional) the default to return if we don't find the",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 18,
                      "source": "   *                    string in the stringbundle;",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                    ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "string in the stringbundle;",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 19,
                      "source": "   *",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "return",
                  "name": "the",
                  "type": "",
                  "optional": false,
                  "description": "localized string, or aDef if the string isn't in the bundle. If no default is provided, if aProp exists on aWidget, we'll return that, otherwise we'll return the empty string",
                  "problems": [],
                  "source": [
                    {
                      "number": 20,
                      "source": "   * @return the localized string, or aDef if the string isn't in the bundle.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@return",
                        "postTag": " ",
                        "name": "the",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "localized string, or aDef if the string isn't in the bundle.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 21,
                      "source": "   *         If no default is provided,",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "         ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "If no default is provided,",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 22,
                      "source": "   *           if aProp exists on aWidget, we'll return that,",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "           ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "if aProp exists on aWidget, we'll return that,",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 23,
                      "source": "   *           otherwise we'll return the empty string",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "           ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "otherwise we'll return the empty string",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 24,
                      "source": "   *",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 25,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 26,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * DEPRECATED! Use fluent instead.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "DEPRECATED! Use fluent instead.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * Get a localized property off a (widget?) object.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Get a localized property off a (widget?) object.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   * NB: this is unlikely to be useful unless you're in Firefox code, because",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "NB: this is unlikely to be useful unless you're in Firefox code, because",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "   *     this code uses the builtin widget stringbundle, and can't be told",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "this code uses the builtin widget stringbundle, and can't be told",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 8,
                  "source": "   *     to use add-on-provided strings. It's mainly here as convenience for",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "to use add-on-provided strings. It's mainly here as convenience for",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 9,
                  "source": "   *     custom builtin widgets that build their own DOM but use the same",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "custom builtin widgets that build their own DOM but use the same",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 10,
                  "source": "   *     stringbundle as the other builtin widgets.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "     ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "stringbundle as the other builtin widgets.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 11,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 12,
                  "source": "   * @param aWidget     the object whose property we should use to fetch a",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aWidget",
                    "postName": "     ",
                    "type": "",
                    "postType": "",
                    "description": "the object whose property we should use to fetch a",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 13,
                  "source": "   *                    localizable string;",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                    ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "localizable string;",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 14,
                  "source": "   * @param aProp       the property on the object to use for the fetching;",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aProp",
                    "postName": "       ",
                    "type": "",
                    "postType": "",
                    "description": "the property on the object to use for the fetching;",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 15,
                  "source": "   * @param aFormatArgs (optional) any extra arguments to use for a formatted",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aFormatArgs",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "(optional) any extra arguments to use for a formatted",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 16,
                  "source": "   *                    string;",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                    ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "string;",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 17,
                  "source": "   * @param aDef        (optional) the default to return if we don't find the",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aDef",
                    "postName": "        ",
                    "type": "",
                    "postType": "",
                    "description": "(optional) the default to return if we don't find the",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 18,
                  "source": "   *                    string in the stringbundle;",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                    ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "string in the stringbundle;",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 19,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 20,
                  "source": "   * @return the localized string, or aDef if the string isn't in the bundle.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@return",
                    "postTag": " ",
                    "name": "the",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "localized string, or aDef if the string isn't in the bundle.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 21,
                  "source": "   *         If no default is provided,",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "         ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "If no default is provided,",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 22,
                  "source": "   *           if aProp exists on aWidget, we'll return that,",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "           ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "if aProp exists on aWidget, we'll return that,",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 23,
                  "source": "   *           otherwise we'll return the empty string",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "           ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "otherwise we'll return the empty string",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 24,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 25,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 26,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aWidget",
            "aProp",
            "aFormatArgs",
            "aDef"
          ]
        },
        {
          "type": "object-method",
          "line": 4586,
          "id": "addShortcut",
          "comments": [
            {
              "description": "Utility function to detect, find and set a keyboard shortcut for a menuitem or (toolbar)button.",
              "tags": [
                {
                  "tag": "param",
                  "name": "aShortcutNode",
                  "type": "",
                  "optional": false,
                  "description": "the XUL node where the shortcut will be derived from;",
                  "problems": [],
                  "source": [
                    {
                      "number": 5,
                      "source": "   * @param aShortcutNode the XUL node where the shortcut will be derived from;",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aShortcutNode",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "the XUL node where the shortcut will be derived from;",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "param",
                  "name": "aTargetNode",
                  "type": "",
                  "optional": false,
                  "description": "(optional) the XUL node on which the `shortcut` attribute will be set. If NULL, the shortcut will be set on aShortcutNode;",
                  "problems": [],
                  "source": [
                    {
                      "number": 6,
                      "source": "   * @param aTargetNode   (optional) the XUL node on which the `shortcut`",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aTargetNode",
                        "postName": "   ",
                        "type": "",
                        "postType": "",
                        "description": "(optional) the XUL node on which the `shortcut`",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 7,
                      "source": "   *                      attribute will be set. If NULL, the shortcut will be",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                      ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "attribute will be set. If NULL, the shortcut will be",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 8,
                      "source": "   *                      set on aShortcutNode;",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "                      ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "set on aShortcutNode;",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 9,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 10,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Utility function to detect, find and set a keyboard shortcut for a menuitem",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Utility function to detect, find and set a keyboard shortcut for a menuitem",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * or (toolbar)button.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "or (toolbar)button.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   * @param aShortcutNode the XUL node where the shortcut will be derived from;",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aShortcutNode",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "the XUL node where the shortcut will be derived from;",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   * @param aTargetNode   (optional) the XUL node on which the `shortcut`",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aTargetNode",
                    "postName": "   ",
                    "type": "",
                    "postType": "",
                    "description": "(optional) the XUL node on which the `shortcut`",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "   *                      attribute will be set. If NULL, the shortcut will be",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                      ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "attribute will be set. If NULL, the shortcut will be",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 8,
                  "source": "   *                      set on aShortcutNode;",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "                      ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "set on aShortcutNode;",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 9,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 10,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aShortcutNode",
            "aTargetNode"
          ]
        },
        {
          "type": "object-method",
          "line": 4595,
          "id": "hidePanelForNode",
          "comments": [
            {
              "description": "Given a node, walk up to the first panel in its ancestor chain, and close it.",
              "tags": [
                {
                  "tag": "param",
                  "name": "aNode",
                  "type": "",
                  "optional": false,
                  "description": "a node whose panel should be closed;",
                  "problems": [],
                  "source": [
                    {
                      "number": 5,
                      "source": "   * @param aNode a node whose panel should be closed;",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aNode",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "a node whose panel should be closed;",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 6,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 7,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Given a node, walk up to the first panel in its ancestor chain, and",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Given a node, walk up to the first panel in its ancestor chain, and",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * close it.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "close it.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   * @param aNode a node whose panel should be closed;",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aNode",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "a node whose panel should be closed;",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aNode"
          ]
        },
        {
          "type": "object-method",
          "line": 4604,
          "id": "isSpecialWidget",
          "comments": [
            {
              "description": "Check if a widget is a \"special\" widget: a spring, spacer or separator.",
              "tags": [
                {
                  "tag": "param",
                  "name": "aWidgetId",
                  "type": "",
                  "optional": false,
                  "description": "the widget ID to check.",
                  "problems": [],
                  "source": [
                    {
                      "number": 4,
                      "source": "   * @param aWidgetId the widget ID to check.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aWidgetId",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "the widget ID to check.",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "return",
                  "name": "true",
                  "type": "",
                  "optional": false,
                  "description": "if the widget is 'special', false otherwise.",
                  "problems": [],
                  "source": [
                    {
                      "number": 5,
                      "source": "   * @return true if the widget is 'special', false otherwise.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@return",
                        "postTag": " ",
                        "name": "true",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "if the widget is 'special', false otherwise.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 6,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 7,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Check if a widget is a \"special\" widget: a spring, spacer or separator.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Check if a widget is a \"special\" widget: a spring, spacer or separator.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * @param aWidgetId the widget ID to check.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aWidgetId",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "the widget ID to check.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   * @return true if the widget is 'special', false otherwise.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@return",
                    "postTag": " ",
                    "name": "true",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "if the widget is 'special', false otherwise.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aWidgetId"
          ]
        },
        {
          "type": "object-method",
          "line": 4618,
          "id": "isWebExtensionWidget",
          "comments": [
            {
              "description": "Check if a widget is provided by an extension. This effectively checks whether `webExtension: true` passed when the widget was being created. If the widget being referred to hasn't yet been created, or has been destroyed, we fallback to checking the ID for the \"-browser-action\" suffix.",
              "tags": [
                {
                  "tag": "param",
                  "name": "aWidgetId",
                  "type": "",
                  "optional": false,
                  "description": "the widget ID to check.",
                  "problems": [],
                  "source": [
                    {
                      "number": 9,
                      "source": "   * @param aWidgetId the widget ID to check.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aWidgetId",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "the widget ID to check.",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "return",
                  "name": "true",
                  "type": "",
                  "optional": false,
                  "description": "if the widget was provided by an extension, false otherwise.",
                  "problems": [],
                  "source": [
                    {
                      "number": 10,
                      "source": "   * @return true if the widget was provided by an extension, false otherwise.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@return",
                        "postTag": " ",
                        "name": "true",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "if the widget was provided by an extension, false otherwise.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 11,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 12,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Check if a widget is provided by an extension. This effectively checks",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Check if a widget is provided by an extension. This effectively checks",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * whether `webExtension: true` passed when the widget was being created.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "whether `webExtension: true` passed when the widget was being created.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   * If the widget being referred to hasn't yet been created, or has been",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "If the widget being referred to hasn't yet been created, or has been",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   * destroyed, we fallback to checking the ID for the \"-browser-action\"",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "destroyed, we fallback to checking the ID for the \"-browser-action\"",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "   * suffix.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "suffix.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 8,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 9,
                  "source": "   * @param aWidgetId the widget ID to check.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aWidgetId",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "the widget ID to check.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 10,
                  "source": "   * @return true if the widget was provided by an extension, false otherwise.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@return",
                    "postTag": " ",
                    "name": "true",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "if the widget was provided by an extension, false otherwise.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 11,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 12,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aWidgetId"
          ]
        },
        {
          "type": "object-method",
          "line": 4629,
          "id": "addPanelCloseListeners",
          "comments": [
            {
              "description": "Add listeners to a panel that will close it. For use from the menu panel and overflowable toolbar implementations, unlikely to be useful for consumers.",
              "tags": [
                {
                  "tag": "param",
                  "name": "aPanel",
                  "type": "",
                  "optional": false,
                  "description": "the panel to which listeners should be attached.",
                  "problems": [],
                  "source": [
                    {
                      "number": 6,
                      "source": "   * @param aPanel the panel to which listeners should be attached.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aPanel",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "the panel to which listeners should be attached.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 7,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 8,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Add listeners to a panel that will close it. For use from the menu panel",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Add listeners to a panel that will close it. For use from the menu panel",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * and overflowable toolbar implementations, unlikely to be useful for",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "and overflowable toolbar implementations, unlikely to be useful for",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * consumers.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "consumers.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   * @param aPanel the panel to which listeners should be attached.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aPanel",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "the panel to which listeners should be attached.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 8,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aPanel"
          ]
        },
        {
          "type": "object-method",
          "line": 4639,
          "id": "removePanelCloseListeners",
          "comments": [
            {
              "description": "Remove close listeners that have been added to a panel with addPanelCloseListeners. For use from the menu panel and overflowable toolbar implementations, unlikely to be useful for consumers.",
              "tags": [
                {
                  "tag": "param",
                  "name": "aPanel",
                  "type": "",
                  "optional": false,
                  "description": "the panel from which listeners should be removed.",
                  "problems": [],
                  "source": [
                    {
                      "number": 6,
                      "source": "   * @param aPanel the panel from which listeners should be removed.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aPanel",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "the panel from which listeners should be removed.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 7,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 8,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Remove close listeners that have been added to a panel with",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Remove close listeners that have been added to a panel with",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * addPanelCloseListeners. For use from the menu panel and overflowable",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "addPanelCloseListeners. For use from the menu panel and overflowable",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * toolbar implementations, unlikely to be useful for consumers.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "toolbar implementations, unlikely to be useful for consumers.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   * @param aPanel the panel from which listeners should be removed.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aPanel",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "the panel from which listeners should be removed.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 8,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aPanel"
          ]
        },
        {
          "type": "object-method",
          "line": 4649,
          "id": "onWidgetDrag",
          "comments": [
            {
              "description": "Notify listeners a widget is about to be dragged to an area. For use from Customize Mode only, do not use otherwise.",
              "tags": [
                {
                  "tag": "param",
                  "name": "aWidgetId",
                  "type": "",
                  "optional": false,
                  "description": "the ID of the widget that is being dragged to an area.",
                  "problems": [],
                  "source": [
                    {
                      "number": 5,
                      "source": "   * @param aWidgetId the ID of the widget that is being dragged to an area.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aWidgetId",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "the ID of the widget that is being dragged to an area.",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "param",
                  "name": "aArea",
                  "type": "",
                  "optional": false,
                  "description": "the ID of the area to which the widget is being dragged.",
                  "problems": [],
                  "source": [
                    {
                      "number": 6,
                      "source": "   * @param aArea     the ID of the area to which the widget is being dragged.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aArea",
                        "postName": "     ",
                        "type": "",
                        "postType": "",
                        "description": "the ID of the area to which the widget is being dragged.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 7,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 8,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Notify listeners a widget is about to be dragged to an area. For use from",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Notify listeners a widget is about to be dragged to an area. For use from",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * Customize Mode only, do not use otherwise.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Customize Mode only, do not use otherwise.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   * @param aWidgetId the ID of the widget that is being dragged to an area.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aWidgetId",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "the ID of the widget that is being dragged to an area.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   * @param aArea     the ID of the area to which the widget is being dragged.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aArea",
                    "postName": "     ",
                    "type": "",
                    "postType": "",
                    "description": "the ID of the area to which the widget is being dragged.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 8,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aWidgetId",
            "aArea"
          ]
        },
        {
          "type": "object-method",
          "line": 4657,
          "id": "notifyStartCustomizing",
          "comments": [
            {
              "description": "Notify listeners that a window is entering customize mode. For use from Customize Mode only, do not use otherwise.",
              "tags": [
                {
                  "tag": "param",
                  "name": "aWindow",
                  "type": "",
                  "optional": false,
                  "description": "the window entering customize mode",
                  "problems": [],
                  "source": [
                    {
                      "number": 4,
                      "source": "   * @param aWindow the window entering customize mode",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aWindow",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "the window entering customize mode",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 5,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 6,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Notify listeners that a window is entering customize mode. For use from",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Notify listeners that a window is entering customize mode. For use from",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * Customize Mode only, do not use otherwise.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Customize Mode only, do not use otherwise.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * @param aWindow the window entering customize mode",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aWindow",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "the window entering customize mode",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aWindow"
          ]
        },
        {
          "type": "object-method",
          "line": 4665,
          "id": "notifyEndCustomizing",
          "comments": [
            {
              "description": "Notify listeners that a window is exiting customize mode. For use from Customize Mode only, do not use otherwise.",
              "tags": [
                {
                  "tag": "param",
                  "name": "aWindow",
                  "type": "",
                  "optional": false,
                  "description": "the window exiting customize mode",
                  "problems": [],
                  "source": [
                    {
                      "number": 4,
                      "source": "   * @param aWindow the window exiting customize mode",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aWindow",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "the window exiting customize mode",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 5,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 6,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Notify listeners that a window is exiting customize mode. For use from",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Notify listeners that a window is exiting customize mode. For use from",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * Customize Mode only, do not use otherwise.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Customize Mode only, do not use otherwise.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * @param aWindow the window exiting customize mode",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aWindow",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "the window exiting customize mode",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aWindow"
          ]
        },
        {
          "type": "object-method",
          "line": 4677,
          "id": "dispatchToolboxEvent",
          "comments": [
            {
              "description": "Notify toolbox(es) of a particular event. If you don't pass aWindow, all toolboxes will be notified. For use from Customize Mode only, do not use otherwise.",
              "tags": [
                {
                  "tag": "param",
                  "name": "aEvent",
                  "type": "",
                  "optional": false,
                  "description": "the name of the event to send.",
                  "problems": [],
                  "source": [
                    {
                      "number": 5,
                      "source": "   * @param aEvent the name of the event to send.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aEvent",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "the name of the event to send.",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "param",
                  "name": "aDetails",
                  "type": "",
                  "optional": false,
                  "description": "optional, the details of the event.",
                  "problems": [],
                  "source": [
                    {
                      "number": 6,
                      "source": "   * @param aDetails optional, the details of the event.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aDetails",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "optional, the details of the event.",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "param",
                  "name": "aWindow",
                  "type": "",
                  "optional": false,
                  "description": "optional, the window in which to send the event.",
                  "problems": [],
                  "source": [
                    {
                      "number": 7,
                      "source": "   * @param aWindow optional, the window in which to send the event.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aWindow",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "optional, the window in which to send the event.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 8,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 9,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Notify toolbox(es) of a particular event. If you don't pass aWindow,",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Notify toolbox(es) of a particular event. If you don't pass aWindow,",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * all toolboxes will be notified. For use from Customize Mode only,",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "all toolboxes will be notified. For use from Customize Mode only,",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * do not use otherwise.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "do not use otherwise.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   * @param aEvent the name of the event to send.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aEvent",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "the name of the event to send.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   * @param aDetails optional, the details of the event.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aDetails",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "optional, the details of the event.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "   * @param aWindow optional, the window in which to send the event.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aWindow",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "optional, the window in which to send the event.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 8,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 9,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aEvent",
            "aDetails",
            "aWindow"
          ]
        },
        {
          "type": "object-method",
          "line": 4687,
          "id": "isAreaOverflowable",
          "comments": [
            {
              "description": "Check whether an area is overflowable.",
              "tags": [
                {
                  "tag": "param",
                  "name": "aAreaId",
                  "type": "",
                  "optional": false,
                  "description": "the ID of an area to check for overflowable-ness",
                  "problems": [],
                  "source": [
                    {
                      "number": 4,
                      "source": "   * @param aAreaId the ID of an area to check for overflowable-ness",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aAreaId",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "the ID of an area to check for overflowable-ness",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "return",
                  "name": "true",
                  "type": "",
                  "optional": false,
                  "description": "if the area is overflowable, false otherwise.",
                  "problems": [],
                  "source": [
                    {
                      "number": 5,
                      "source": "   * @return true if the area is overflowable, false otherwise.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@return",
                        "postTag": " ",
                        "name": "true",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "if the area is overflowable, false otherwise.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 6,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 7,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Check whether an area is overflowable.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Check whether an area is overflowable.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * @param aAreaId the ID of an area to check for overflowable-ness",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aAreaId",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "the ID of an area to check for overflowable-ness",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   * @return true if the area is overflowable, false otherwise.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@return",
                    "postTag": " ",
                    "name": "true",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "if the area is overflowable, false otherwise.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aAreaId"
          ]
        },
        {
          "type": "object-method",
          "line": 4703,
          "id": "getPlaceForItem",
          "comments": [
            {
              "description": "Obtain a string indicating the place of an element. This is intended for use from customize mode; You should generally use getPlacementOfWidget instead, which is cheaper because it does not use the DOM.",
              "tags": [
                {
                  "tag": "param",
                  "name": "aElement",
                  "type": "",
                  "optional": false,
                  "description": "the DOM node whose place we need to check",
                  "problems": [],
                  "source": [
                    {
                      "number": 6,
                      "source": "   * @param aElement the DOM node whose place we need to check",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aElement",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "the DOM node whose place we need to check",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "return",
                  "name": "toolbar",
                  "type": "",
                  "optional": false,
                  "description": "if the node is in a toolbar, \"panel\" if it is in the menu panel, \"palette\" if it is in the (visible!) customization palette, undefined otherwise.",
                  "problems": [],
                  "source": [
                    {
                      "number": 7,
                      "source": "   * @return \"toolbar\" if the node is in a toolbar, \"panel\" if it is in the",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@return",
                        "postTag": " ",
                        "name": "\"toolbar\"",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "if the node is in a toolbar, \"panel\" if it is in the",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 8,
                      "source": "   *         menu panel, \"palette\" if it is in the (visible!) customization",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "         ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "menu panel, \"palette\" if it is in the (visible!) customization",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 9,
                      "source": "   *         palette, undefined otherwise.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": "         ",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "palette, undefined otherwise.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 10,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 11,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Obtain a string indicating the place of an element. This is intended",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Obtain a string indicating the place of an element. This is intended",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * for use from customize mode; You should generally use getPlacementOfWidget",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "for use from customize mode; You should generally use getPlacementOfWidget",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * instead, which is cheaper because it does not use the DOM.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "instead, which is cheaper because it does not use the DOM.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   *",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "   * @param aElement the DOM node whose place we need to check",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aElement",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "the DOM node whose place we need to check",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 7,
                  "source": "   * @return \"toolbar\" if the node is in a toolbar, \"panel\" if it is in the",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@return",
                    "postTag": " ",
                    "name": "\"toolbar\"",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "if the node is in a toolbar, \"panel\" if it is in the",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 8,
                  "source": "   *         menu panel, \"palette\" if it is in the (visible!) customization",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "         ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "menu panel, \"palette\" if it is in the (visible!) customization",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 9,
                  "source": "   *         palette, undefined otherwise.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": "         ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "palette, undefined otherwise.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 10,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 11,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aElement"
          ]
        },
        {
          "type": "object-method",
          "line": 4724,
          "id": "isBuiltinToolbar",
          "comments": [
            {
              "description": "Check if a toolbar is builtin or not.",
              "tags": [
                {
                  "tag": "param",
                  "name": "aToolbarId",
                  "type": "",
                  "optional": false,
                  "description": "the ID of the toolbar you want to check",
                  "problems": [],
                  "source": [
                    {
                      "number": 3,
                      "source": "   * @param aToolbarId the ID of the toolbar you want to check",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aToolbarId",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "the ID of the toolbar you want to check",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 4,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 5,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Check if a toolbar is builtin or not.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Check if a toolbar is builtin or not.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * @param aToolbarId the ID of the toolbar you want to check",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aToolbarId",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "the ID of the toolbar you want to check",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aToolbarId"
          ]
        },
        {
          "type": "object-method",
          "line": 4733,
          "id": "createSpecialWidget",
          "comments": [
            {
              "description": "Create an instance of a spring, spacer or separator.",
              "tags": [
                {
                  "tag": "param",
                  "name": "aId",
                  "type": "",
                  "optional": false,
                  "description": "the type of special widget (spring, spacer or separator)",
                  "problems": [],
                  "source": [
                    {
                      "number": 3,
                      "source": "   * @param aId       the type of special widget (spring, spacer or separator)",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aId",
                        "postName": "       ",
                        "type": "",
                        "postType": "",
                        "description": "the type of special widget (spring, spacer or separator)",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "param",
                  "name": "aDocument",
                  "type": "",
                  "optional": false,
                  "description": "the document in which to create it.",
                  "problems": [],
                  "source": [
                    {
                      "number": 4,
                      "source": "   * @param aDocument the document in which to create it.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aDocument",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "the document in which to create it.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 5,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 6,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Create an instance of a spring, spacer or separator.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Create an instance of a spring, spacer or separator.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * @param aId       the type of special widget (spring, spacer or separator)",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aId",
                    "postName": "       ",
                    "type": "",
                    "postType": "",
                    "description": "the type of special widget (spring, spacer or separator)",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * @param aDocument the document in which to create it.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aDocument",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "the document in which to create it.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aId",
            "aDocument"
          ]
        },
        {
          "type": "object-method",
          "line": 4742,
          "id": "fillSubviewFromMenuItems",
          "comments": [
            {
              "description": "Fills a submenu with menu items.",
              "tags": [
                {
                  "tag": "param",
                  "name": "aMenuItems",
                  "type": "",
                  "optional": false,
                  "description": "the menu items to display.",
                  "problems": [],
                  "source": [
                    {
                      "number": 3,
                      "source": "   * @param aMenuItems the menu items to display.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aMenuItems",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "the menu items to display.",
                        "end": "",
                        "lineEnd": ""
                      }
                    }
                  ]
                },
                {
                  "tag": "param",
                  "name": "aSubview",
                  "type": "",
                  "optional": false,
                  "description": "the subview to fill.",
                  "problems": [],
                  "source": [
                    {
                      "number": 4,
                      "source": "   * @param aSubview   the subview to fill.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aSubview",
                        "postName": "   ",
                        "type": "",
                        "postType": "",
                        "description": "the subview to fill.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 5,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 6,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * Fills a submenu with menu items.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "Fills a submenu with menu items.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * @param aMenuItems the menu items to display.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aMenuItems",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "the menu items to display.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   * @param aSubview   the subview to fill.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aSubview",
                    "postName": "   ",
                    "type": "",
                    "postType": "",
                    "description": "the subview to fill.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 6,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aMenuItems",
            "aSubview"
          ]
        },
        {
          "type": "object-method",
          "line": 4849,
          "id": "clearSubview",
          "comments": [
            {
              "description": "A helper function for clearing subviews.",
              "tags": [
                {
                  "tag": "param",
                  "name": "aSubview",
                  "type": "",
                  "optional": false,
                  "description": "the subview to clear.",
                  "problems": [],
                  "source": [
                    {
                      "number": 3,
                      "source": "   * @param aSubview the subview to clear.",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "*",
                        "postDelimiter": " ",
                        "tag": "@param",
                        "postTag": " ",
                        "name": "aSubview",
                        "postName": " ",
                        "type": "",
                        "postType": "",
                        "description": "the subview to clear.",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 4,
                      "source": "   ",
                      "tokens": {
                        "start": "   ",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "",
                        "lineEnd": ""
                      }
                    },
                    {
                      "number": 5,
                      "source": "*/",
                      "tokens": {
                        "start": "",
                        "delimiter": "",
                        "postDelimiter": "",
                        "tag": "",
                        "postTag": "",
                        "name": "",
                        "postName": "",
                        "type": "",
                        "postType": "",
                        "description": "",
                        "end": "*/",
                        "lineEnd": ""
                      }
                    }
                  ]
                }
              ],
              "source": [
                {
                  "number": 0,
                  "source": "/**",
                  "tokens": {
                    "start": "",
                    "delimiter": "/**",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 1,
                  "source": "*",
                  "tokens": {
                    "start": "",
                    "delimiter": "*",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 2,
                  "source": "   * A helper function for clearing subviews.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "A helper function for clearing subviews.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 3,
                  "source": "   * @param aSubview the subview to clear.",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "*",
                    "postDelimiter": " ",
                    "tag": "@param",
                    "postTag": " ",
                    "name": "aSubview",
                    "postName": " ",
                    "type": "",
                    "postType": "",
                    "description": "the subview to clear.",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 4,
                  "source": "   ",
                  "tokens": {
                    "start": "   ",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "",
                    "lineEnd": ""
                  }
                },
                {
                  "number": 5,
                  "source": "*/",
                  "tokens": {
                    "start": "",
                    "delimiter": "",
                    "postDelimiter": "",
                    "tag": "",
                    "postTag": "",
                    "name": "",
                    "postName": "",
                    "type": "",
                    "postType": "",
                    "description": "",
                    "end": "*/",
                    "lineEnd": ""
                  }
                }
              ],
              "problems": []
            }
          ],
          "kind": "method",
          "params": [
            "aSubview"
          ]
        },
        {
          "type": "object-method",
          "line": 4862,
          "id": "getCustomizationTarget",
          "kind": "method",
          "params": [
            "aElement"
          ]
        },
        {
          "type": "object-method",
          "line": 4866,
          "id": "getTestOnlyInternalProp",
          "kind": "method",
          "params": [
            "aProp"
          ]
        },
        {
          "type": "object-method",
          "line": 4890,
          "id": "setTestOnlyInternalProp",
          "kind": "method",
          "params": [
            "aProp",
            "aValue"
          ]
        }
      ]
    }
  }
]