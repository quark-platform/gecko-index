[
  {
    "type": "class",
    "id": "ClientEnvironment",
    "superClass": "ClientEnvironmentBase",
    "line": 22,
    "methods": [
      {
        "type": "method",
        "id": "getClientClassification",
        "line": 30,
        "params": [],
        "comments": [
          {
            "description": "Fetches information about the client that is calculated on the server, like geolocation and the current time. The server request is made lazily and is cached for the entire browser session.",
            "tags": [],
            "source": [
              {
                "number": 0,
                "source": "/**",
                "tokens": {
                  "start": "",
                  "delimiter": "/**",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 1,
                "source": "*",
                "tokens": {
                  "start": "",
                  "delimiter": "*",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 2,
                "source": "   * Fetches information about the client that is calculated on the server,",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": " ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "Fetches information about the client that is calculated on the server,",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 3,
                "source": "   * like geolocation and the current time.",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": " ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "like geolocation and the current time.",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 4,
                "source": "   *",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 5,
                "source": "   * The server request is made lazily and is cached for the entire browser",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": " ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "The server request is made lazily and is cached for the entire browser",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 6,
                "source": "   * session.",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": " ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "session.",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 7,
                "source": "   ",
                "tokens": {
                  "start": "   ",
                  "delimiter": "",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 8,
                "source": "*/",
                "tokens": {
                  "start": "",
                  "delimiter": "",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "*/",
                  "lineEnd": ""
                }
              }
            ],
            "problems": []
          }
        ],
        "kind": "method"
      },
      {
        "type": "method",
        "id": "clearClassifyCache",
        "line": 37,
        "params": [],
        "kind": "method"
      },
      {
        "type": "method",
        "id": "withMockClassify",
        "line": 46,
        "params": [
          {
            "type": "params",
            "id": "data",
            "line": 46
          },
          {
            "type": "params",
            "id": "testFunction",
            "line": 46
          }
        ],
        "comments": [
          {
            "description": "Test wrapper that mocks the server request for classifying the client.",
            "tags": [
              {
                "tag": "param",
                "name": "data",
                "type": "Object",
                "optional": false,
                "description": "Fake server data to use",
                "problems": [],
                "source": [
                  {
                    "number": 3,
                    "source": "   * @param  {Object}   data          Fake server data to use",
                    "tokens": {
                      "start": "   ",
                      "delimiter": "*",
                      "postDelimiter": " ",
                      "tag": "@param",
                      "postTag": "  ",
                      "name": "data",
                      "postName": "          ",
                      "type": "{Object}",
                      "postType": "   ",
                      "description": "Fake server data to use",
                      "end": "",
                      "lineEnd": ""
                    }
                  }
                ]
              },
              {
                "tag": "param",
                "name": "testFunction",
                "type": "Function",
                "optional": false,
                "description": "Test function to execute while mock data is in effect.",
                "problems": [],
                "source": [
                  {
                    "number": 4,
                    "source": "   * @param  {Function} testFunction  Test function to execute while mock data is in effect.",
                    "tokens": {
                      "start": "   ",
                      "delimiter": "*",
                      "postDelimiter": " ",
                      "tag": "@param",
                      "postTag": "  ",
                      "name": "testFunction",
                      "postName": "  ",
                      "type": "{Function}",
                      "postType": " ",
                      "description": "Test function to execute while mock data is in effect.",
                      "end": "",
                      "lineEnd": ""
                    }
                  },
                  {
                    "number": 5,
                    "source": "   ",
                    "tokens": {
                      "start": "   ",
                      "delimiter": "",
                      "postDelimiter": "",
                      "tag": "",
                      "postTag": "",
                      "name": "",
                      "postName": "",
                      "type": "",
                      "postType": "",
                      "description": "",
                      "end": "",
                      "lineEnd": ""
                    }
                  },
                  {
                    "number": 6,
                    "source": "*/",
                    "tokens": {
                      "start": "",
                      "delimiter": "",
                      "postDelimiter": "",
                      "tag": "",
                      "postTag": "",
                      "name": "",
                      "postName": "",
                      "type": "",
                      "postType": "",
                      "description": "",
                      "end": "*/",
                      "lineEnd": ""
                    }
                  }
                ]
              }
            ],
            "source": [
              {
                "number": 0,
                "source": "/**",
                "tokens": {
                  "start": "",
                  "delimiter": "/**",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 1,
                "source": "*",
                "tokens": {
                  "start": "",
                  "delimiter": "*",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 2,
                "source": "   * Test wrapper that mocks the server request for classifying the client.",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": " ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "Test wrapper that mocks the server request for classifying the client.",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 3,
                "source": "   * @param  {Object}   data          Fake server data to use",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": " ",
                  "tag": "@param",
                  "postTag": "  ",
                  "name": "data",
                  "postName": "          ",
                  "type": "{Object}",
                  "postType": "   ",
                  "description": "Fake server data to use",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 4,
                "source": "   * @param  {Function} testFunction  Test function to execute while mock data is in effect.",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": " ",
                  "tag": "@param",
                  "postTag": "  ",
                  "name": "testFunction",
                  "postName": "  ",
                  "type": "{Function}",
                  "postType": " ",
                  "description": "Test function to execute while mock data is in effect.",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 5,
                "source": "   ",
                "tokens": {
                  "start": "   ",
                  "delimiter": "",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 6,
                "source": "*/",
                "tokens": {
                  "start": "",
                  "delimiter": "",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "*/",
                  "lineEnd": ""
                }
              }
            ],
            "problems": []
          }
        ],
        "kind": "method"
      },
      {
        "type": "method",
        "id": "userId",
        "line": 55,
        "params": [],
        "kind": "get"
      },
      {
        "type": "method",
        "id": "country",
        "line": 59,
        "params": [],
        "kind": "get"
      },
      {
        "type": "method",
        "id": "request_time",
        "line": 66,
        "params": [],
        "kind": "get"
      },
      {
        "type": "method",
        "id": "experiments",
        "line": 74,
        "params": [],
        "kind": "get"
      },
      {
        "type": "method",
        "id": "studies",
        "line": 94,
        "params": [],
        "kind": "get"
      },
      {
        "type": "method",
        "id": "rollouts",
        "line": 107,
        "params": [],
        "kind": "get"
      },
      {
        "type": "method",
        "id": "isFirstRun",
        "line": 120,
        "params": [],
        "kind": "get"
      }
    ]
  }
]