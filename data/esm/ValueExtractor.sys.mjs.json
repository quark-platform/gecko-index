[
  {
    "type": "class",
    "id": "ValueExtractor",
    "line": 9,
    "methods": [
      {
        "type": "method",
        "id": "constructor",
        "line": 10,
        "params": [
          {
            "type": "params",
            "id": "errors",
            "line": 10
          },
          {
            "type": "params",
            "id": "aBundle",
            "line": 10
          }
        ],
        "kind": "constructor"
      },
      {
        "type": "method",
        "id": "extractValue",
        "line": 28,
        "params": [
          {
            "type": "params",
            "id": "options",
            "line": 28
          }
        ],
        "comments": [
          {
            "description": "",
            "tags": [
              {
                "tag": "param",
                "name": "options",
                "type": "",
                "optional": false,
                "description": "The 'spec' object.",
                "problems": [],
                "source": [
                  {
                    "number": 2,
                    "source": "   * @param options",
                    "tokens": {
                      "start": "   ",
                      "delimiter": "*",
                      "postDelimiter": " ",
                      "tag": "@param",
                      "postTag": " ",
                      "name": "options",
                      "postName": "",
                      "type": "",
                      "postType": "",
                      "description": "",
                      "end": "",
                      "lineEnd": ""
                    }
                  },
                  {
                    "number": 3,
                    "source": "   *        The 'spec' object.",
                    "tokens": {
                      "start": "   ",
                      "delimiter": "*",
                      "postDelimiter": "        ",
                      "tag": "",
                      "postTag": "",
                      "name": "",
                      "postName": "",
                      "type": "",
                      "postType": "",
                      "description": "The 'spec' object.",
                      "end": "",
                      "lineEnd": ""
                    }
                  }
                ]
              },
              {
                "tag": "note",
                "name": "This",
                "type": "",
                "optional": false,
                "description": "function takes a 'spec' object and destructures it to extract a value. If the value is of the wrong type, it warns the developer and returns undefined. expectedType: is the type of a JS primitive (string, number, etc.) object: is the object from which to extract the value. objectName: string used to construct the developer warning. property: the name of the property being extracted. throwTypeError: boolean, throw a TypeError if the type is incorrect. trim: boolean, if the value should be trimmed (used by string type).",
                "problems": [],
                "source": [
                  {
                    "number": 4,
                    "source": "   * @note  This function takes a 'spec' object and destructures it to extract",
                    "tokens": {
                      "start": "   ",
                      "delimiter": "*",
                      "postDelimiter": " ",
                      "tag": "@note",
                      "postTag": "  ",
                      "name": "This",
                      "postName": " ",
                      "type": "",
                      "postType": "",
                      "description": "function takes a 'spec' object and destructures it to extract",
                      "end": "",
                      "lineEnd": ""
                    }
                  },
                  {
                    "number": 5,
                    "source": "   *        a value. If the value is of the wrong type, it warns the developer",
                    "tokens": {
                      "start": "   ",
                      "delimiter": "*",
                      "postDelimiter": "        ",
                      "tag": "",
                      "postTag": "",
                      "name": "",
                      "postName": "",
                      "type": "",
                      "postType": "",
                      "description": "a value. If the value is of the wrong type, it warns the developer",
                      "end": "",
                      "lineEnd": ""
                    }
                  },
                  {
                    "number": 6,
                    "source": "   *        and returns undefined.",
                    "tokens": {
                      "start": "   ",
                      "delimiter": "*",
                      "postDelimiter": "        ",
                      "tag": "",
                      "postTag": "",
                      "name": "",
                      "postName": "",
                      "type": "",
                      "postType": "",
                      "description": "and returns undefined.",
                      "end": "",
                      "lineEnd": ""
                    }
                  },
                  {
                    "number": 7,
                    "source": "   *        expectedType: is the type of a JS primitive (string, number, etc.)",
                    "tokens": {
                      "start": "   ",
                      "delimiter": "*",
                      "postDelimiter": "        ",
                      "tag": "",
                      "postTag": "",
                      "name": "",
                      "postName": "",
                      "type": "",
                      "postType": "",
                      "description": "expectedType: is the type of a JS primitive (string, number, etc.)",
                      "end": "",
                      "lineEnd": ""
                    }
                  },
                  {
                    "number": 8,
                    "source": "   *        object: is the object from which to extract the value.",
                    "tokens": {
                      "start": "   ",
                      "delimiter": "*",
                      "postDelimiter": "        ",
                      "tag": "",
                      "postTag": "",
                      "name": "",
                      "postName": "",
                      "type": "",
                      "postType": "",
                      "description": "object: is the object from which to extract the value.",
                      "end": "",
                      "lineEnd": ""
                    }
                  },
                  {
                    "number": 9,
                    "source": "   *        objectName: string used to construct the developer warning.",
                    "tokens": {
                      "start": "   ",
                      "delimiter": "*",
                      "postDelimiter": "        ",
                      "tag": "",
                      "postTag": "",
                      "name": "",
                      "postName": "",
                      "type": "",
                      "postType": "",
                      "description": "objectName: string used to construct the developer warning.",
                      "end": "",
                      "lineEnd": ""
                    }
                  },
                  {
                    "number": 10,
                    "source": "   *        property: the name of the property being extracted.",
                    "tokens": {
                      "start": "   ",
                      "delimiter": "*",
                      "postDelimiter": "        ",
                      "tag": "",
                      "postTag": "",
                      "name": "",
                      "postName": "",
                      "type": "",
                      "postType": "",
                      "description": "property: the name of the property being extracted.",
                      "end": "",
                      "lineEnd": ""
                    }
                  },
                  {
                    "number": 11,
                    "source": "   *        throwTypeError: boolean, throw a TypeError if the type is incorrect.",
                    "tokens": {
                      "start": "   ",
                      "delimiter": "*",
                      "postDelimiter": "        ",
                      "tag": "",
                      "postTag": "",
                      "name": "",
                      "postName": "",
                      "type": "",
                      "postType": "",
                      "description": "throwTypeError: boolean, throw a TypeError if the type is incorrect.",
                      "end": "",
                      "lineEnd": ""
                    }
                  },
                  {
                    "number": 12,
                    "source": "   *        trim: boolean, if the value should be trimmed (used by string type).",
                    "tokens": {
                      "start": "   ",
                      "delimiter": "*",
                      "postDelimiter": "        ",
                      "tag": "",
                      "postTag": "",
                      "name": "",
                      "postName": "",
                      "type": "",
                      "postType": "",
                      "description": "trim: boolean, if the value should be trimmed (used by string type).",
                      "end": "",
                      "lineEnd": ""
                    }
                  },
                  {
                    "number": 13,
                    "source": "   ",
                    "tokens": {
                      "start": "   ",
                      "delimiter": "",
                      "postDelimiter": "",
                      "tag": "",
                      "postTag": "",
                      "name": "",
                      "postName": "",
                      "type": "",
                      "postType": "",
                      "description": "",
                      "end": "",
                      "lineEnd": ""
                    }
                  },
                  {
                    "number": 14,
                    "source": "*/",
                    "tokens": {
                      "start": "",
                      "delimiter": "",
                      "postDelimiter": "",
                      "tag": "",
                      "postTag": "",
                      "name": "",
                      "postName": "",
                      "type": "",
                      "postType": "",
                      "description": "",
                      "end": "*/",
                      "lineEnd": ""
                    }
                  }
                ]
              }
            ],
            "source": [
              {
                "number": 0,
                "source": "/**",
                "tokens": {
                  "start": "",
                  "delimiter": "/**",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 1,
                "source": "*",
                "tokens": {
                  "start": "",
                  "delimiter": "*",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 2,
                "source": "   * @param options",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": " ",
                  "tag": "@param",
                  "postTag": " ",
                  "name": "options",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 3,
                "source": "   *        The 'spec' object.",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": "        ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "The 'spec' object.",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 4,
                "source": "   * @note  This function takes a 'spec' object and destructures it to extract",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": " ",
                  "tag": "@note",
                  "postTag": "  ",
                  "name": "This",
                  "postName": " ",
                  "type": "",
                  "postType": "",
                  "description": "function takes a 'spec' object and destructures it to extract",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 5,
                "source": "   *        a value. If the value is of the wrong type, it warns the developer",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": "        ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "a value. If the value is of the wrong type, it warns the developer",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 6,
                "source": "   *        and returns undefined.",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": "        ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "and returns undefined.",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 7,
                "source": "   *        expectedType: is the type of a JS primitive (string, number, etc.)",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": "        ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "expectedType: is the type of a JS primitive (string, number, etc.)",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 8,
                "source": "   *        object: is the object from which to extract the value.",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": "        ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "object: is the object from which to extract the value.",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 9,
                "source": "   *        objectName: string used to construct the developer warning.",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": "        ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "objectName: string used to construct the developer warning.",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 10,
                "source": "   *        property: the name of the property being extracted.",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": "        ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "property: the name of the property being extracted.",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 11,
                "source": "   *        throwTypeError: boolean, throw a TypeError if the type is incorrect.",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": "        ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "throwTypeError: boolean, throw a TypeError if the type is incorrect.",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 12,
                "source": "   *        trim: boolean, if the value should be trimmed (used by string type).",
                "tokens": {
                  "start": "   ",
                  "delimiter": "*",
                  "postDelimiter": "        ",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "trim: boolean, if the value should be trimmed (used by string type).",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 13,
                "source": "   ",
                "tokens": {
                  "start": "   ",
                  "delimiter": "",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "",
                  "lineEnd": ""
                }
              },
              {
                "number": 14,
                "source": "*/",
                "tokens": {
                  "start": "",
                  "delimiter": "",
                  "postDelimiter": "",
                  "tag": "",
                  "postTag": "",
                  "name": "",
                  "postName": "",
                  "type": "",
                  "postType": "",
                  "description": "",
                  "end": "*/",
                  "lineEnd": ""
                }
              }
            ],
            "problems": []
          }
        ],
        "kind": "method"
      },
      {
        "type": "method",
        "id": "extractColorValue",
        "line": 58,
        "params": [
          {
            "type": "params",
            "id": "spec",
            "line": 58
          }
        ],
        "kind": "method"
      },
      {
        "type": "method",
        "id": "extractLanguageValue",
        "line": 81,
        "params": [
          {
            "type": "params",
            "id": "spec",
            "line": 81
          }
        ],
        "kind": "method"
      }
    ]
  }
]