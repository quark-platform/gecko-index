{
  "kind": "idlfile",
  "contents": [
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */"
      }
    },
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */"
      }
    },
    {
      "kind": "INCLUDE",
      "ident": "nsISupports"
    },
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIAsyncInputStream",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIAsyncOutputStream",
      "base": null,
      "body": null
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": {
        "kind": "DOC_COMMENT",
        "contents": "/**\n * nsIPipe represents an in-process buffer that can be read using nsIInputStream\n * and written using nsIOutputStream.  The reader and writer of a pipe do not\n * have to be on the same thread.  As a result, the pipe is an ideal mechanism\n * to bridge data exchange between two threads.  For example, a worker thread\n * might write data to a pipe from which the main thread will read.\n *\n * Each end of the pipe can be either blocking or non-blocking.  Recall that a\n * non-blocking stream will return NS_BASE_STREAM_WOULD_BLOCK if it cannot be\n * read or written to without blocking the calling thread.  For example, if you\n * try to read from an empty pipe that has not yet been closed, then if that\n * pipe's input end is non-blocking, then the read call will fail immediately\n * with NS_BASE_STREAM_WOULD_BLOCK as the error condition.  However, if that\n * pipe's input end is blocking, then the read call will not return until the\n * pipe has data or until the pipe is closed.  This example presumes that the\n * pipe is being filled asynchronously on some background thread.\n *\n * The pipe supports nsIAsyncInputStream and nsIAsyncOutputStream, which give\n * the user of a non-blocking pipe the ability to wait for the pipe to become\n * ready again.  For example, in the case of an empty non-blocking pipe, the\n * user can call AsyncWait on the input end of the pipe to be notified when\n * the pipe has data to read (or when the pipe becomes closed).\n *\n * NS_NewPipe2 and NS_NewPipe provide convenient pipe constructors.  In most\n * cases nsIPipe is not actually used.  It is usually enough to just get\n * references to the pipe's input and output end.  In which case, the pipe is\n * automatically closed when the respective pipe ends are released.\n */"
      },
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "25d0de93-685e-4ea4-95d3-d884e31df63c"
              }
            }
          }
        ]
      },
      "name": "nsIPipe",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * initialize this pipe\n     *\n     * @param nonBlockingInput\n     *        true specifies non-blocking input stream behavior\n     * @param nonBlockingOutput\n     *        true specifies non-blocking output stream behavior\n     * @param segmentSize\n     *        specifies the segment size in bytes (pass 0 to use default value)\n     * @param segmentCount\n     *        specifies the max number of segments (pass 0 to use default\n     *        value).   Passing UINT32_MAX here causes the pipe to have\n     *        \"infinite\" space.  This mode can be useful in some cases, but\n     *        should always be used with caution.  The default value for this\n     *        parameter is a finite value.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "must_use",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "init",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "boolean",
                      "name": "nonBlockingInput"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "boolean",
                          "name": "nonBlockingOutput"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "unsigned long",
                          "name": "segmentSize"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "unsigned long",
                          "name": "segmentCount"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * The pipe's input end, which also implements nsISearchableInputStream.\n     * Getting fails if the pipe hasn't been initialized.\n     */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "must_use",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": "readonly",
                  "type": "nsIAsyncInputStream",
                  "name": "inputStream"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * The pipe's output end. Getting fails if the pipe hasn't been\n     * initialized.\n     */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "must_use",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": "readonly",
                  "type": "nsIAsyncOutputStream",
                  "name": "outputStream"
                }
              }
            }
          ]
        }
      }
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": {
        "kind": "DOC_COMMENT",
        "contents": "/**\n * XXX this interface doesn't really belong in here.  It is here because\n * currently nsPipeInputStream is the only implementation of this interface.\n */"
      },
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "8C39EF62-F7C9-11d4-98F5-001083010E9B"
              }
            }
          }
        ]
      },
      "name": "nsISearchableInputStream",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * Searches for a string in the input stream. Since the stream has a notion\n     * of EOF, it is possible that the string may at some time be in the\n     * buffer, but is is not currently found up to some offset. Consequently,\n     * both the found and not found cases return an offset:\n     *    if found, return offset where it was found\n     *    if not found, return offset of the first byte not searched\n     * In the case the stream is at EOF and the string is not found, the first\n     * byte not searched will correspond to the length of the buffer.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "search",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "string",
                      "name": "forString"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "boolean",
                          "name": "ignoreCase"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "out",
                          "type": "boolean",
                          "name": "found"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "out",
                          "type": "unsigned long",
                          "name": "offsetSearchedTo"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n\n",
    "%{C++\n\nclass nsIInputStream;\nclass nsIOutputStream;\n\n/**\n * NS_NewPipe2\n *\n * This function supersedes NS_NewPipe.  It differs from NS_NewPipe in two\n * major ways:\n *  (1) returns nsIAsyncInputStream and nsIAsyncOutputStream, so it is\n *      not necessary to QI in order to access these interfaces.\n *  (2) the size of the pipe is determined by the number of segments\n *      times the size of each segment.\n *\n * @param pipeIn\n *        resulting input end of the pipe\n * @param pipeOut\n *        resulting output end of the pipe\n * @param nonBlockingInput\n *        true specifies non-blocking input stream behavior\n * @param nonBlockingOutput\n *        true specifies non-blocking output stream behavior\n * @param segmentSize\n *        specifies the segment size in bytes (pass 0 to use default value)\n * @param segmentCount\n *        specifies the max number of segments (pass 0 to use default value)\n *        passing UINT32_MAX here causes the pipe to have \"infinite\" space.\n *        this mode can be useful in some cases, but should always be used with\n *        caution.  the default value for this parameter is a finite value.\n */\nextern void\nNS_NewPipe2(nsIAsyncInputStream **pipeIn,\n            nsIAsyncOutputStream **pipeOut,\n            bool nonBlockingInput = false,\n            bool nonBlockingOutput = false,\n            uint32_t segmentSize = 0,\n            uint32_t segmentCount = 0);\n\n/**\n * NS_NewPipe\n *\n * Preserved for backwards compatibility.  Plus, this interface is more\n * amiable in certain contexts (e.g., when you don't need the pipe's async\n * capabilities).\n *\n * @param pipeIn\n *        resulting input end of the pipe\n * @param pipeOut\n *        resulting output end of the pipe\n * @param segmentSize\n *        specifies the segment size in bytes (pass 0 to use default value)\n * @param maxSize\n *        specifies the max size of the pipe (pass 0 to use default value)\n *        number of segments is maxSize / segmentSize, and maxSize must be a\n *        multiple of segmentSize.  passing UINT32_MAX here causes the\n *        pipe to have \"infinite\" space.  this mode can be useful in some\n *        cases, but should always be used with caution.  the default value\n *        for this parameter is a finite value.\n * @param nonBlockingInput\n *        true specifies non-blocking input stream behavior\n * @param nonBlockingOutput\n *        true specifies non-blocking output stream behavior\n */\nextern void\nNS_NewPipe(nsIInputStream **pipeIn,\n           nsIOutputStream **pipeOut,\n           uint32_t segmentSize = 0,\n           uint32_t maxSize = 0,\n           bool nonBlockingInput = false,\n           bool nonBlockingOutput = false);\n\n%}\n"
  ]
}