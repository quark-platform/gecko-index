{
  "kind": "idlfile",
  "contents": [
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */"
      }
    },
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */"
      }
    },
    {
      "kind": "INCLUDE",
      "ident": "nsIArrayExtensions"
    },
    {
      "kind": "interface_main",
      "doc_comment": {
        "kind": "DOC_COMMENT",
        "contents": "/**\n * nsIMutableArray\n * A separate set of methods that will act on the array. Consumers of\n * nsIArray should not QueryInterface to nsIMutableArray unless they\n * own the array.\n *\n * As above, it is legal to add null elements to the array. Note also\n * that null elements can be created as a side effect of\n * insertElementAt(). Conversely, if insertElementAt() is never used,\n * and null elements are never explicitly added to the array, then it\n * is guaranteed that queryElementAt() will never return a null value.\n *\n * Any of these methods may throw NS_ERROR_OUT_OF_MEMORY when the\n * array must grow to complete the call, but the allocation fails.\n */"
      },
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "builtinclass",
              "param": null
            }
          },
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "af059da0-c85b-40ec-af07-ae4bfdc192cc"
              }
            }
          }
        ]
      },
      "name": "nsIMutableArray",
      "base": {
        "kind": "ifacebase",
        "extends": "nsIArrayExtensions"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * appendElement()\n     *\n     * Append an element at the end of the array.\n     *\n     * @param element The element to append.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "appendElement",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsISupports",
                      "name": "element"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * removeElementAt()\n     *\n     * Remove an element at a specific position, moving all elements\n     * stored at a higher position down one.\n     * To remove a specific element, use indexOf() to find the index\n     * first, then call removeElementAt().\n     *\n     * @param index the position of the item\n     *\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "removeElementAt",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "unsigned long",
                      "name": "index"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * insertElementAt()\n     *\n     * Insert an element at the given position, moving the element\n     * currently located in that position, and all elements in higher\n     * position, up by one.\n     *\n     * @param element The element to insert\n     * @param index   The position in the array:\n     *                If the position is lower than the current length\n     *                of the array, the elements at that position and\n     *                onwards are bumped one position up.\n     *                If the position is equal to the current length\n     *                of the array, the new element is appended.\n     *                An index lower than 0 or higher than the current\n     *                length of the array is invalid and will be ignored.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "insertElementAt",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsISupports",
                      "name": "element"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "unsigned long",
                          "name": "index"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * replaceElementAt()\n     *\n     * Replace the element at the given position.\n     *\n     * @param element The new element to insert\n     * @param index   The position in the array\n     *                If the position is lower than the current length\n     *                of the array, an existing element will be replaced.\n     *                If the position is equal to the current length\n     *                of the array, the new element is appended.\n     *                If the position is higher than the current length\n     *                of the array, empty elements are appended followed\n     *                by the new element at the specified position.\n     *                An index lower than 0 is invalid and will be ignored.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "replaceElementAt",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsISupports",
                      "name": "element"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "unsigned long",
                          "name": "index"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * clear()\n     *\n     * clear the entire array, releasing all stored objects\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "clear",
                  "params": null,
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n"
  ]
}