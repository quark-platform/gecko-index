{
  "kind": "idlfile",
  "contents": [
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* -*- Mode: C++; tab-width: 50; indent-tabs-mode: nil; c-basic-offset: 2 -*- */"
      }
    },
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */"
      }
    },
    {
      "kind": "INCLUDE",
      "ident": "nsISupports"
    },
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIFile",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsICycleCollectorLogSink",
      "base": null,
      "body": null
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "function",
              "param": null
            }
          },
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "2dea18fc-fbfa-4bf7-ad45-0efaf5495f5e"
              }
            }
          }
        ]
      },
      "name": "nsIFinishDumpingCallback",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "callback",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsISupports",
                      "name": "data"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": {
        "kind": "DOC_COMMENT",
        "contents": "/**\n * Callback interface for |dumpGCAndCCLogsToFile|, below.  Note that\n * these method calls can occur before |dumpGCAndCCLogsToFile|\n * returns.\n */"
      },
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "dc1b2b24-65bd-441b-b6bd-cb5825a7ed14"
              }
            }
          }
        ]
      },
      "name": "nsIDumpGCAndCCLogsCallback",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Called whenever a process has successfully finished dumping its GC/CC logs.\n   * Incomplete dumps (e.g., if the child crashes or is killed due to memory\n   * exhaustion) are not reported.\n   *\n   * @param aGCLog The file that the GC log was written to.\n   *\n   * @param aCCLog The file that the CC log was written to.\n   *\n   * @param aIsParent indicates whether this log file pair is from the\n   * parent process.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "onDump",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIFile",
                      "name": "aGCLog"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "nsIFile",
                          "name": "aCCLog"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "bool",
                          "name": "aIsParent"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Called when GC/CC logging has finished, after all calls to |onDump|.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "onFinish",
                  "params": null,
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "builtinclass",
              "param": null
            }
          },
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "48541b74-47ee-4a62-9557-7f4b809bda5c"
              }
            }
          }
        ]
      },
      "name": "nsIMemoryInfoDumper",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * This dumps gzipped memory reports for this process and its child\n   * processes.  If a file of the given name exists, it will be overwritten.\n   *\n   * @param aFilename The output file.\n   *\n   * @param aFinishDumping The callback called on completion.\n   *\n   * @param aFinishDumpingData The environment for the callback.\n   *\n   * @param aAnonymize Should the reports be anonymized?\n   *\n   * @param aMinimizeMemoryUsage indicates whether we should run a series of\n   *   GC/CC's in an attempt to reduce our memory usage before collecting our\n   *   memory report.\n   *\n   * Sample output, annotated with comments for explanatory purposes.\n   *\n   * {\n   *   // The version number of the format, which will be incremented each time\n   *   // backwards-incompatible changes are made. A mandatory integer.\n   *   \"version\": 1\n   *\n   *   // Equal to nsIMemoryReporterManager::hasMozMallocUsableSize. A\n   *   // mandatory boolean.\n   *   \"hasMozMallocUsableSize\": true,\n   *\n   *   // The memory reports. A mandatory array.\n   *   \"reports\": [\n   *     // The properties correspond to the arguments of\n   *     // nsIHandleReportCallback::callback. Every one is mandatory.\n   *     {\"process\":\"Main Process (pid 12345)\", \"path\":\"explicit/foo/bar\",\n   *      \"kind\":1, \"units\":0, \"amount\":2000000, \"description\":\"Foo bar.\"},\n   *     {\"process\":\"Main Process (pid 12345)\", \"path\":\"heap-allocated\",\n   *      \"kind\":1, \"units\":0, \"amount\":3000000, \"description\":\"Heap allocated.\"},\n   *     {\"process\":\"Main Process (pid 12345)\", \"path\":\"vsize\",\n   *      \"kind\":1, \"units\":0, \"amount\":10000000, \"description\":\"Vsize.\"}\n   *   ]\n   * }\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "dumpMemoryReportsToNamedFile",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "AString",
                      "name": "aFilename"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "nsIFinishDumpingCallback",
                          "name": "aFinishDumping"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "nsISupports",
                          "name": "aFinishDumpingData"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "boolean",
                          "name": "aAnonymize"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "boolean",
                          "name": "aMinimizeMemoryUsage"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Similar to dumpMemoryReportsToNamedFile, this method dumps gzipped memory\n   * reports for this process and its child processes to files in the tmp\n   * directory called memory-reports-<identifier>-<pid>.json.gz (or something\n   * similar, such as memory-reports-<identifier>-<pid>-1.json.gz; no existing\n   * file will be overwritten).\n   *\n   * If DMD is enabled, this method also dumps gzipped DMD output for this\n   * process and its child processes to files in the tmp directory called\n   * dmd-<identifier>-<pid>.txt.gz (or something similar; again, no existing\n   * file will be overwritten).\n   *\n   * @param aIdentifier this identifier will appear in the filename of our\n   *   about:memory dump and those of our children.\n   *\n   *   If the identifier is empty, the implementation may set it arbitrarily\n   *   and use that new value for its own dump and the dumps of its child\n   *   processes.  For example, the implementation may set |aIdentifier| to the\n   *   number of seconds since the epoch.\n   *\n   * @param aAnonymize Should the reports be anonymized?\n   *\n   * @param aMinimizeMemoryUsage indicates whether we should run a series of\n   *   GC/CC's in an attempt to reduce our memory usage before collecting our\n   *   memory report.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "dumpMemoryInfoToTempDir",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "AString",
                      "name": "aIdentifier"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "boolean",
                          "name": "aAnonymize"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "boolean",
                          "name": "aMinimizeMemoryUsage"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Dump GC and CC logs to files in the OS's temp directory (or in\n   * $MOZ_CC_LOG_DIRECTORY, if that environment variable is specified).\n   *\n   * @param aIdentifier If aIdentifier is non-empty, this string will appear in\n   *   the filenames of the logs we create (both for this process and, if\n   *   aDumpChildProcesses is true, for our child processes).\n   *\n   *   If aIdentifier is empty, the implementation may set it to an\n   *   arbitrary value; for example, it may set aIdentifier to the number\n   *   of seconds since the epoch.\n   *\n   * @param aDumpAllTraces indicates whether we should run an all-traces CC\n   *   log.  An all-traces log visits all objects currently eligible for cycle\n   *   collection, while a non-all-traces log avoids visiting some objects\n   *   which we know are reachable.\n   *\n   *   All-traces logs are much bigger than the alternative, but they may be\n   *   helpful when trying to understand why a particular object is alive.  For\n   *   example, a non-traces-log will skip references held by an active\n   *   document; if your object is being held alive by such a document, you\n   *   probably want to see those references.\n   *\n   * @param aDumpChildProcesses indicates whether we should call\n   *   DumpGCAndCCLogsToFile in our child processes.  If so, the child processes\n   *   will dump their children, and so on.\n   *\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "dumpGCAndCCLogsToFile",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "AString",
                      "name": "aIdentifier"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "bool",
                          "name": "aDumpAllTraces"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "bool",
                          "name": "aDumpChildProcesses"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "nsIDumpGCAndCCLogsCallback",
                          "name": "aCallback"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Like |dumpGCAndCCLogsToFile|, but sends the logs to the given log\n   * sink object instead of accessing the filesystem directly, and\n   * dumps the current process only.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "dumpGCAndCCLogsToSink",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "bool",
                      "name": "aDumpAllTraces"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "nsICycleCollectorLogSink",
                          "name": "aSink"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n"
  ]
}