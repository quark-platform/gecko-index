{
  "kind": "idlfile",
  "contents": [
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */"
      }
    },
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */"
      }
    },
    {
      "kind": "INCLUDE",
      "ident": "nsISupports"
    },
    {
      "kind": "webidl"
    },
    "\n",
    {
      "kind": "webidl"
    },
    "\n",
    {
      "kind": "webidl"
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "builtinclass",
              "param": null
            }
          },
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "4805e684-49b9-11d3-9ce4-ed60bd6cb5bc"
              }
            }
          }
        ]
      },
      "name": "nsITableEditor",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "short",
                  "name": "eNoSearch",
                  "value": "0"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "short",
                  "name": "ePreviousColumn",
                  "value": "1"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "short",
                  "name": "ePreviousRow",
                  "value": "2"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * insertTableCell() inserts <td> elements before or after a cell element\n   * containing first selection range.  I.e., if the cell spans columns and\n   * aInsertPosition is true, new columns will be inserted after the\n   * right-most column which contains the cell.  Note that this simply\n   * inserts <td> elements, i.e., colspan and rowspan around the cell\n   * containing selection are not modified.  So, for example, adding a cell\n   * to rectangular table changes non-rectangular table.  And if a cell\n   * containing selection is at left of row-spanning cell, it may be moved to\n   * right side of the row-spanning cell after inserting some cell elements\n   * before it.  Similarly, colspan won't be adjusted for keeping table\n   * rectangle.\n   * If first selection range is not in table cell element, this does nothing\n   * without exception.\n   *\n   * @param aNumberOfCellssToInsert     Number of cells to insert.\n   * @param aInsertAfterSelectedCell    true if new cells should be inserted\n   *                                    before current cell.  Otherwise, will\n   *                                    be inserted after the cell.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "insertTableCell",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "long",
                      "name": "aNumberOfColumnsToInsert"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "boolean",
                          "name": "aInsertAfterSelectedCell"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * insertTableColumn() inserts columns before or after a cell element\n   * containing first selection range.  I.e., if the cell spans columns and\n   * aInsertAfterSelectedCell is tre, new columns will be inserted after the\n   * right-most column which contains the cell.  If first selection range is\n   * not in table cell element, this does nothing without exception.\n   *\n   * @param aNumberOfColumnsToInsert    Number of columns to insert.\n   * @param aInsertAfterSelectedCell    true if new columns will be inserted\n   *                                    before current cell.  Otherwise, will\n   *                                    be inserted after the cell.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "insertTableColumn",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "long",
                      "name": "aNumberOfColumnsToInsert"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "boolean",
                          "name": "aInsertAfterSelectedCell"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/*\n   * insertTableRow() inserts <tr> elements before or after a <td> element\n   * containing first selection range.  I.e., if the cell spans rows and\n   * aInsertAfterSelectedCell is true, new rows will be inserted after the\n   * bottom-most row which contains the cell.  If first selection range is\n   * not in table cell element, this does nothing without exception.\n   *\n   * @param aNumberOfRowsToInsert       Number of rows to insert.\n   * @param aInsertAfterSelectedCell    true if new rows will be inserted\n   *                                    before current cell.  Otherwise, will\n   *                                    be inserted after the cell.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "insertTableRow",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "long",
                      "name": "aNumberOfRowsToInsert"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "boolean",
                          "name": "aInsertAfterSelectedCell"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** Delete table methods\n    * Delete starting at the selected cell or the\n    *  cell (or table) enclosing the selection anchor\n    * The selection is collapsed and is left in the\n    *  cell at the same row,col location as\n    *  the previous selection anchor, if possible,\n    *  else in the closest neighboring cell\n    *\n    * @param aNumber    Number of items to insert/delete\n    */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "deleteTable",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * deleteTableCellContents() removes any contents in cell elements.  If two\n   * or more cell elements are selected, this removes all selected cells'\n   * contents.  Otherwise, this removes contents of a cell which contains\n   * first selection range.  This does nothing without exception if selection\n   * is not in cell element.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "deleteTableCellContents",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * deleteTableCell() removes table cell elements.  If two or more cell\n   * elements are selected, this removes all selected cell elements.\n   * Otherwise, this removes some cell elements starting from selected cell\n   * element or a cell containing first selection range.  When this removes\n   * last cell element in <tr> or <table>, this removes the <tr> or the\n   * <table> too.  Note that when removing a cell causes number of its row\n   * becomes less than the others, this method does NOT fill the place with\n   * rowspan nor colspan.  This does nothing without exception if selection is\n   * not in cell element.\n   *\n   * @param aNumberOfCellsToDelete  Number of cells to remove.  This is ignored\n   *                                if 2 or more cells are selected.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "deleteTableCell",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "long",
                      "name": "aNumberOfCellsToDelete"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * deleteTableColumn() removes cell elements which belong to same columns\n   * of selected cell elements.\n   * If only one cell element is selected or first selection range is\n   * in a cell, removes cell elements which belong to same column.\n   * If 2 or more cell elements are selected, removes cell elements which\n   * belong to any of all selected columns.  In this case,\n   * aNumberOfColumnsToDelete is ignored.\n   * If there is no selection ranges, throws exception.\n   * If selection is not in a cell element, just does nothing without\n   * throwing exception.\n   * WARNING: This does not remove <col> nor <colgroup> elements.\n   *\n   * @param aNumberOfColumnsToDelete    Number of columns to remove.  This is\n   *                                    ignored if 2 ore more cells are\n   *                                    selected.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "deleteTableColumn",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "long",
                      "name": "aNumberOfColumnsToDelete"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * deleteTableRow() removes <tr> elements.\n   * If only one cell element is selected or first selection range is\n   * in a cell, removes <tr> elements starting from a <tr> element\n   * containing the selected cell or first selection range.\n   * If 2 or more cell elements are selected, all <tr> elements\n   * which contains selected cell(s).  In this case, aNumberOfRowsToDelete\n   * is ignored.\n   * If there is no selection ranges, throws exception.\n   * If selection is not in a cell element, just does nothing without\n   * throwing exception.\n   *\n   * @param aNumberOfRowsToDelete   Number of rows to remove.  This is ignored\n   *                                if 2 or more cells are selected.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "deleteTableRow",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "long",
                      "name": "aNumberOfRowsToDelete"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** Table Selection methods\n    * Selecting a row or column actually\n    * selects all cells (not TR in the case of rows)\n    */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "selectTableCell",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "selectTableRow",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "selectTableColumn",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "selectTable",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "selectAllTableCells",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** Create a new TD or TH element, the opposite type of the supplied aSourceCell\n    *   1. Copy all attributes from aSourceCell to the new cell\n    *   2. Move all contents of aSourceCell to the new cell\n    *   3. Replace aSourceCell in the table with the new cell\n    *\n    *  @param aSourceCell   The cell to be replaced\n    *  @return              The new cell that replaces aSourceCell\n    */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "Element",
                  "name": "switchTableCellHeaderType",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "Element",
                      "name": "aSourceCell"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** Merges contents of all selected cells\n    * for selected cells that are adjacent,\n    * this will result in a larger cell with appropriate\n    * rowspan and colspan, and original cells are deleted\n    * The resulting cell is in the location of the\n    *   cell at the upper-left corner of the adjacent\n    *   block of selected cells\n    *\n    * @param aMergeNonContiguousContents:\n    *       If true:\n    *         Non-contiguous cells are not deleted,\n    *         but their contents are still moved\n    *         to the upper-left cell\n    *       If false: contiguous cells are ignored\n    *\n    * If there are no selected cells,\n    *   and selection or caret is in a cell,\n    *   that cell and the one to the right\n    *   are merged\n    */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "joinTableCells",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "boolean",
                      "name": "aMergeNonContiguousContents"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** Split a cell that has rowspan and/or colspan > 0\n    *   into cells such that all new cells have\n    *   rowspan = 1 and colspan = 1\n    *  All of the contents are not touched --\n    *   they will appear to be in the upper-left cell\n    */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "splitTableCell",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** Scan through all rows and add cells as needed so\n    *   all locations in the cellmap are occupied.\n    *   Used after inserting single cells or pasting\n    *   a collection of cells that extend past the\n    *   previous size of the table\n    * If aTable is null, it uses table enclosing the selection anchor\n    * This doesn't doesn't change the selection,\n    *   thus it can be used to fixup all tables\n    *   in a page independent of the selection\n    */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "normalizeTable",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "Element",
                      "name": "aTable"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * getCellIndexes() computes row index and column index of a table cell.\n   * Note that this depends on layout information.  Therefore, all pending\n   * layout should've been flushed before calling this.\n   *\n   * @param aCellElement        If not null, this computes indexes of the cell.\n   *                            If null, this computes indexes of a cell which\n   *                            contains anchor of Selection.\n   * @param aRowIndex           Must be an object, whose .value will be set\n   *                            to row index of the cell.  0 is the first row.\n   *                            If rowspan is set to 2 or more, the start\n   *                            row index is used.\n   * @param aColumnIndex        Must be an object, whose .value will be set\n   *                            to column index of the cell.  0 is the first\n   *                            column.  If colspan is set to 2 or more, the\n   *                            start column index is used.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "getCellIndexes",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "Element",
                      "name": "aCellElement"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "out",
                          "type": "long",
                          "name": "aRowIndex"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "out",
                          "type": "long",
                          "name": "aColumnIndex"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * getTableSize() computes number of rows and columns.\n   * Note that this depends on layout information.  Therefore, all pending\n   * layout should've been flushed before calling this.\n   *\n   * @param aTableOrElementInTable  If a <table> element, this computes number\n   *                                of rows and columns of it.\n   *                                If another element and in a <table>, this\n   *                                computes number of rows and columns of\n   *                                the nearest ancestor <table> element.\n   *                                If element is not in <table> element,\n   *                                throwing an exception.\n   *                                If null, this looks for nearest ancestor\n   *                                <table> element containing anchor of\n   *                                Selection.  If found, computes the number\n   *                                of rows and columns of the <table>.\n   *                                Otherwise, throwing an exception.\n   * @param aRowCount               Number of *actual* row count.\n   *                                I.e., rowspan does NOT increase this value.\n   * @param aColumnCount            Number of column count.\n   *                                I.e., if colspan is specified with bigger\n   *                                number than actual, the value is used\n   *                                as this.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "getTableSize",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "Element",
                      "name": "aTableOrElementInTable"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "out",
                          "type": "long",
                          "name": "aRowCount"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "out",
                          "type": "long",
                          "name": "aColCount"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * getCellAt() returns a <td> or <th> element in a <table> if there is a\n   * cell at the indexes.\n   *\n   * @param aTableElement       If not null, must be a <table> element.\n   *                            If null, looks for the nearest ancestor <table>\n   *                            to look for a cell.\n   * @param aRowIndex           Row index of the cell.\n   * @param aColumnIndex        Column index of the cell.\n   * @return                    Returns a <td> or <th> element if there is.\n   *                            Otherwise, returns null without throwing\n   *                            exception.\n   *                            If aTableElement is not null and not a <table>\n   *                            element, throwing an exception.\n   *                            If aTableElement is null and anchor of Selection\n   *                            is not in any <table> element, throwing an\n   *                            exception.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "Element",
                  "name": "getCellAt",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "Element",
                      "name": "aTableElement"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "long",
                          "name": "aRowIndex"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "long",
                          "name": "aColumnIndex"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Get cell element and its various information from <table> element and\n   * indexes in it.  If aTableElement is null, this looks for an ancestor\n   * <table> element of anchor of Selection.  If there is no <table> element\n   * at that point, this throws exception.  Note that this requires layout\n   * information.  So, you need to flush the layout after changing the DOM\n   * tree.\n   * If there is no cell element at the indexes, this throws exception.\n   * XXX Perhaps, this is wrong behavior, this should return null without\n   *     exception since the caller cannot distinguish whether the exception\n   *     is caused by \"not found\" or other unexpected situation.\n   *\n   * @param aTableElement       A <table> element.  If this is null, this\n   *                            uses ancestor of anchor of Selection.\n   * @param aRowIndex           Row index in aTableElement.  Starting from 0.\n   * @param aColumnIndex        Column index in aTableElement.  Starting from\n   *                            0.\n   * @param aCellElement        [OUT] The cell element at the indexes.\n   * @param aStartRowIndex      [OUT] First row index which contains\n   *                            aCellElement.  E.g., if the cell's rowspan is\n   *                            not 1, this returns its first row index.\n   *                            I.e., this can be smaller than aRowIndex.\n   * @param aStartColumnIndex   [OUT] First column index which contains the\n   *                            aCellElement.  E.g., if the cell's colspan is\n   *                            larger than 1, this returns its first column\n   *                            index.  I.e., this can be smaller than\n   *                            aColumIndex.\n   * @param aRowSpan            [OUT] rowspan attribute value in most cases.\n   *                            If the specified value is invalid, this\n   *                            returns 1.  Only when the document is written\n   *                            in HTML5 or later, this can be 0.\n   * @param aColSpan            [OUT] colspan attribute value in most cases.\n   *                            If the specified value is invalid, this\n   *                            returns 1.\n   * @param aEffectiveRowSpan   [OUT] Effective rowspan value at aRowIndex.\n   *                            This is same as:\n   *                              aRowSpan - (aRowIndex - aStartRowIndex)\n   * @param aEffectiveColSpan   [OUT] Effective colspan value at aColumnIndex.\n   *                            This is same as:\n   *                              aColSpan - (aColumnIndex - aStartColumnIndex)\n   * @param aIsSelected         [OUT] Returns true if aCellElement or its\n   *                            <tr> or <table> element is selected.\n   *                            Otherwise, e.g., aCellElement just contains\n   *                            selection range, returns false.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "getCellDataAt",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "Element",
                      "name": "aTableElement"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "long",
                          "name": "aRowIndex"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "long",
                          "name": "aColumnIndex"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "out",
                          "type": "Element",
                          "name": "aCellElement"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "out",
                          "type": "long",
                          "name": "aStartRowIndex"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "out",
                          "type": "long",
                          "name": "aStartColumnIndex"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "out",
                          "type": "long",
                          "name": "aRowSpan"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "out",
                          "type": "long",
                          "name": "aColSpan"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "out",
                          "type": "long",
                          "name": "aEffectiveRowSpan"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "out",
                          "type": "long",
                          "name": "aEffectiveColSpan"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "out",
                          "type": "boolean",
                          "name": "aIsSelected"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * getFirstRow() returns first <tr> element in a <table> element.\n   *\n   * @param aTableOrElementInTable  If a <table> element, returns its first\n   *                                <tr> element.\n   *                                If another element, looks for nearest\n   *                                ancestor <table> element first.  Then,\n   *                                return its first <tr> element.\n   * @return                        <tr> element in the <table> element.\n   *                                If <table> element is not found, this\n   *                                throws an exception.\n   *                                If there is a <table> element but it\n   *                                does not have <tr> elements, returns\n   *                                null without throwing exception.\n   *                                Note that this may return anonymous <tr>\n   *                                element if <table> has one or more cells\n   *                                but <tr> element is not in the source.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "Element",
                  "name": "getFirstRow",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "Element",
                      "name": "aTableElement"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** Preferred direction to search for neighboring cell\n    * when trying to locate a cell to place caret in after\n    * a table editing action.\n    * Used for aDirection param in SetSelectionAfterTableEdit\n    */"
                  },
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * getSelectedOrParentTableElement() returns a <td>, <th>, <tr> or <table>.\n   * If first selection range selects a <td> or <th>, returns it.  aTagName\n   * is set to \"td\" even if the result is a <th> and aCount is set to\n   * Selection.rangeCount.\n   * If first selection range does not select <td> nor <th>, but selection\n   * anchor refers <table>, returns it.  aTagName is set to \"table\" and\n   * aCount is set to 1.\n   * If first selection range does not select <td> nor <th>, but selection\n   * anchor refers <tr>, returns it.  aTagName is set to \"tr\" and aCount is\n   * set to 1.\n   * If first selection range does not select <td> nor <th>, but selection\n   * anchor refers <td> (not include <th>!), returns it.  aTagName is set to\n   * \"td\" and aCount is set to 0.\n   * Otherwise, if container of selection anchor is in a <td> or <th>,\n   * returns it.  aTagName is set to \"td\" but aCount is set to 0.\n   * Otherwise, returns null, aTagName is set to empty string and aCount is\n   * set to 0.  I.e., does not throw exception even if a cell is not found.\n   * NOTE: Calling this resets internal counter of getFirstSelectedCell()\n   *       and getNextSelectedCell().  I.e., getNextSelectedCell() will\n   *       return second selected cell element.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "Element",
                  "name": "getSelectedOrParentTableElement",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "out",
                      "type": "AString",
                      "name": "aTagName"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "out",
                          "type": "long",
                          "name": "aCount"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** Generally used after GetSelectedOrParentTableElement\n    *   to test if selected cells are complete rows or columns\n    *\n    * @param aElement           Any table or cell element or any element\n    *                           inside a table\n    *                           Used to get enclosing table.\n    *                           If null, selection's anchorNode is used\n    *\n    * @return\n    *     0                        aCellElement was not a cell\n    *                              (returned result = NS_ERROR_FAILURE)\n    *     TableSelectionMode::Cell     There are 1 or more cells selected but\n    *                              complete rows or columns are not selected\n    *     TableSelectionMode::Row      All cells are in 1 or more rows\n    *                              and in each row, all cells selected\n    *                              Note: This is the value if all rows\n    *                              (thus all cells) are selected\n    *     TableSelectionMode::Column   All cells are in 1 or more columns\n    *                              and in each column, all cells are selected\n    */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "uint32_t",
                  "name": "getSelectedCellsType",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "Element",
                      "name": "aElement"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * getFirstSelectedCellInTable() returns a cell element, its row index and\n   * its column index if first range of Selection selects a cell.  Note that\n   * that \"selects a cell\" means that the range container is a <tr> element\n   * and endOffset is startOffset + 1.  So, even if first range of Selection\n   * is in a cell element, this treats the range does not select a cell.\n   * NOTE: Calling this resets internal counter of getFirstSelectedCell()\n   *       and getNextSelectedCell().  I.e., getNextSelectedCell() will\n   *       return second selected cell element.\n   *\n   * @param aRowIndex    [OUT} Returns row index of the found cell.  If not\n   *                     found, returns 0.\n   * @param aColumnIndex [OUT] Returns column index of the found cell.  If\n   *                     not found, returns 0.\n   * @return             The cell element which is selected by the first\n   *                     range of Selection.  Even if this is not found,\n   *                     this returns null, not throwing exception.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "Element",
                  "name": "getFirstSelectedCellInTable",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "out",
                      "type": "long",
                      "name": "aRowIndex"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "out",
                          "type": "long",
                          "name": "aColIndex"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * getSelectedCells() returns an array of `<td>` and `<th>` elements which\n   * are selected in **any** `<table>` elements (i.e., some cells may be\n   * in different `<table>` element).\n   * If first range does not select a table cell element, this returns empty\n   * array because editor considers that selection is not in table cell\n   * selection mode.\n   * If second or later ranges do not select only a table cell element, this\n   * ignores the ranges.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": {
                    "kind": "IDENTIFIER_$0"
                  },
                  "name": "getSelectedCells",
                  "params": null,
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n"
  ]
}