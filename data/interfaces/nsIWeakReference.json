{
  "kind": "idlfile",
  "contents": [
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */"
      }
    },
    {
      "kind": "INCLUDE",
      "ident": "nsISupports"
    },
    "%{C++\n#include \"mozilla/Attributes.h\"\n#include \"mozilla/MemoryReporting.h\"\n\n// For MOZ_THREAD_SAFETY_OWNERSHIP_CHECKS_SUPPORTED.\n#include \"nsDebug.h\"\n\n#ifdef MOZ_THREAD_SAFETY_OWNERSHIP_CHECKS_SUPPORTED\n\n#define MOZ_WEAKREF_DECL_OWNINGTHREAD nsAutoOwningThread _mWeakRefOwningThread;\n#define MOZ_WEAKREF_ASSERT_OWNINGTHREAD \\\n  _mWeakRefOwningThread.AssertOwnership(\"nsWeakReference not thread-safe\")\n#define MOZ_WEAKREF_ASSERT_OWNINGTHREAD_DELEGATED(that) \\\n  (that)->_mWeakRefOwningThread.AssertOwnership(\"nsWeakReference not thread-safe\")\n\n#else\n\n#define MOZ_WEAKREF_DECL_OWNINGTHREAD\n#define MOZ_WEAKREF_ASSERT_OWNINGTHREAD do { } while (false)\n#define MOZ_WEAKREF_ASSERT_OWNINGTHREAD_DELEGATED(that) do { } while (false)\n\n#endif\n\n%}\n\n",
    {
      "kind": "native"
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": {
        "kind": "DOC_COMMENT",
        "contents": "/**\n * An instance of |nsIWeakReference| is a proxy object that cooperates with\n * its referent to give clients a non-owning, non-dangling reference.  Clients\n * own the proxy, and should generally manage it with an |nsCOMPtr| (see the\n * type |nsWeakPtr| for a |typedef| name that stands out) as they would any\n * other XPCOM object.  The |QueryReferent| member function provides a\n * (hopefully short-lived) owning reference on demand, through which clients\n * can get useful access to the referent, while it still exists.\n *\n * @version 1.0\n * @see nsISupportsWeakReference\n * @see nsWeakReference\n * @see nsWeakPtr\n */"
      },
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "builtinclass",
              "param": null
            }
          },
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "9188bc85-f92e-11d2-81ef-0060083a0bcf"
              }
            }
          }
        ]
      },
      "name": "nsIWeakReference",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * |QueryReferent| queries the referent, if it exists, and like |QueryInterface|, produces\n     * an owning reference to the desired interface.  It is designed to look and act exactly\n     * like (a proxied) |QueryInterface|.  Don't hold on to the produced interface permanently;\n     * that would defeat the purpose of using a non-owning |nsIWeakReference| in the first place.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "binaryname",
                      "param": {
                        "kind": "attribute_$0",
                        "value": "QueryReferentFromScript"
                      }
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "QueryReferent",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIIDRef",
                      "name": "uuid"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": {
                            "kind": "attributes",
                            "first_attribute": {
                              "kind": "attribute",
                              "name": "iid_is",
                              "param": {
                                "kind": "attribute_$0",
                                "value": "uuid"
                              }
                            },
                            "other_attributes": [
                              {
                                "kind": "attributes_$0",
                                "attr": {
                                  "kind": "attribute",
                                  "name": "retval",
                                  "param": null
                                }
                              }
                            ]
                          },
                          "refType": "out",
                          "type": "nsQIResult",
                          "name": "result"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "notxpcom",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "nostdcall",
                          "param": null
                        }
                      }
                    ]
                  },
                  "return_type": "size_t",
                  "name": "sizeOfOnlyThis",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "MallocSizeOf",
                      "name": "aMallocSizeOf"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": "%{C++\n  /**\n   * Returns true if the referring object is alive.  Otherwise, false.\n   */\n  bool IsAlive() const\n  {\n    return !!mObject;\n  }\n\n  nsresult QueryReferent(const nsIID& aIID, void** aInstancePtr);\n\nprotected:\n  friend class nsSupportsWeakReference;\n\n  nsIWeakReference(nsISupports* aObject)\n    : mObject(aObject)\n  {\n  }\n\n  nsIWeakReference() = delete;\n\n  MOZ_WEAKREF_DECL_OWNINGTHREAD\n\n  // The object we're holding a weak reference to.\n  nsISupports* MOZ_NON_OWNING_REF mObject;\n%}\n  "
              }
            }
          ]
        }
      }
    },
    "\n\n\n",
    {
      "kind": "interface_main",
      "doc_comment": {
        "kind": "DOC_COMMENT",
        "contents": "/**\n * |nsISupportsWeakReference| is a factory interface which produces appropriate\n * instances of |nsIWeakReference|.  Weak references in this scheme can only be\n * produced for objects that implement this interface.\n *\n * @version 1.0\n * @see nsIWeakReference\n * @see nsSupportsWeakReference\n */"
      },
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "9188bc86-f92e-11d2-81ef-0060083a0bcf"
              }
            }
          }
        ]
      },
      "name": "nsISupportsWeakReference",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * |GetWeakReference| produces an appropriate instance of |nsIWeakReference|.\n     * As with all good XPCOM `getters', you own the resulting interface and should\n     * manage it with an |nsCOMPtr|.\n     *\n     * @see nsIWeakReference\n     * @see nsWeakPtr\n     * @see nsCOMPtr\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "nsIWeakReference",
                  "name": "GetWeakReference",
                  "params": null,
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n"
  ]
}