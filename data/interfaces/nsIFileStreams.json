{
  "kind": "idlfile",
  "contents": [
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 4 -*- */"
      }
    },
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */"
      }
    },
    {
      "kind": "INCLUDE",
      "ident": "nsIInputStream"
    },
    {
      "kind": "INCLUDE",
      "ident": "nsIOutputStream"
    },
    {
      "kind": "INCLUDE",
      "ident": "nsIRandomAccessStream"
    },
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIEventTarget",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIFile",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIFileMetadataCallback",
      "base": null,
      "body": null
    },
    "\n\n",
    "%{C++\nstruct PRFileDesc;\n%}\n\n",
    {
      "kind": "native"
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": {
        "kind": "DOC_COMMENT",
        "contents": "/**\n * An input stream that allows you to read from a file.\n */"
      },
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "builtinclass",
              "param": null
            }
          },
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "e3d56a20-c7ec-11d3-8cda-0060b0fc14a3"
              }
            }
          }
        ]
      },
      "name": "nsIFileInputStream",
      "base": {
        "kind": "ifacebase",
        "extends": "nsIInputStream"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * @param file          file to read from\n     * @param ioFlags       file open flags listed in prio.h (see\n     *                      PR_Open documentation) or -1 to open the\n     *                      file in default mode (PR_RDONLY).\n     * @param perm          file mode bits listed in prio.h or -1 to\n     *                      use the default value (0)\n     * @param behaviorFlags flags specifying various behaviors of the class\n     *        (see enumerations in the class)\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "init",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIFile",
                      "name": "file"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "long",
                          "name": "ioFlags"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "long",
                          "name": "perm"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "long",
                          "name": "behaviorFlags"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * If this is set, the file will close automatically when the end of the\n     * file is reached.\n     */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "long",
                  "name": "CLOSE_ON_EOF",
                  "value": {
                    "kind": "num_$2"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * If this is set, the file will be reopened whenever we reach the start of\n     * the file, either by doing a Seek(0, NS_SEEK_CUR), or by doing a relative\n     * seek that happen to reach the beginning of the file. If the file is\n     * already open and the seek occurs, it will happen naturally.  (The file\n     * will only be reopened if it is closed for some reason.)\n     */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "long",
                  "name": "REOPEN_ON_REWIND",
                  "value": {
                    "kind": "num_$2"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * If this is set, the file will be opened (i.e., a call to\n     * PR_Open done) only when we do an actual operation on the stream,\n     * or more specifically, when one of the following is called:\n     *   - Seek\n     *   - Tell\n     *   - SetEOF\n     *   - Available\n     *   - Read\n     *   - ReadLine\n     *\n     * DEFER_OPEN is useful if we use the stream on a background\n     * thread, so that the opening and possible |stat|ing of the file\n     * happens there as well.\n     *\n     * @note Using this flag results in the file not being opened\n     *       during the call to Init.  This means that any errors that might\n     *       happen when this flag is not set would happen during the\n     *       first read.  Also, the file is not locked when Init is called,\n     *       so it might be deleted before we try to read from it.\n     */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "long",
                  "name": "DEFER_OPEN",
                  "value": {
                    "kind": "num_$2"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * This flag has no effect and is totally ignored on any platform except\n     * Windows since this is the default behavior on POSIX systems. On Windows\n     * if this flag is set then the stream is opened in a special mode that\n     * allows the OS to delete the file from disk just like POSIX.\n     */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "long",
                  "name": "SHARE_DELETE",
                  "value": {
                    "kind": "num_$2"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": {
        "kind": "DOC_COMMENT",
        "contents": "/**\n * An output stream that lets you stream to a file.\n */"
      },
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "builtinclass",
              "param": null
            }
          },
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "e734cac9-1295-4e6f-9684-3ac4e1f91063"
              }
            }
          }
        ]
      },
      "name": "nsIFileOutputStream",
      "base": {
        "kind": "ifacebase",
        "extends": "nsIOutputStream"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * @param file          file to write to\n     * @param ioFlags       file open flags listed in prio.h (see\n     *                      PR_Open documentation) or -1 to open the\n     *                      file in default mode (PR_WRONLY |\n     *                      PR_CREATE_FILE | PR_TRUNCATE)\n     * @param perm          file mode bits listed in prio.h or -1 to\n     *                      use the default permissions (0664)\n     * @param behaviorFlags flags specifying various behaviors of the class\n     *        (currently none supported)\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "init",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIFile",
                      "name": "file"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "long",
                          "name": "ioFlags"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "long",
                          "name": "perm"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "long",
                          "name": "behaviorFlags"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * @param length        asks the operating system to allocate storage for\n     *                      this file of at least |length| bytes long, and\n     *                      set the file length to the corresponding size.\n     * @throws NS_ERROR_FAILURE if the preallocation fails.\n     * @throws NS_ERROR_NOT_INITIALIZED if the file is not opened.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "preallocate",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "long long",
                      "name": "length"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * See the same constant in nsIFileInputStream. The deferred open will\n     * be performed when one of the following is called:\n     *   - Seek\n     *   - Tell\n     *   - SetEOF\n     *   - Write\n     *   - Flush\n     *\n     * @note Using this flag results in the file not being opened\n     *       during the call to Init.  This means that any errors that might\n     *       happen when this flag is not set would happen during the\n     *       first write, and if the file is to be created, then it will not\n     *       appear on the disk until the first write.\n     */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "long",
                  "name": "DEFER_OPEN",
                  "value": {
                    "kind": "num_$2"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": {
        "kind": "DOC_COMMENT",
        "contents": "/**\n * A stream that allows you to read from a file or stream to a file.\n */"
      },
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "builtinclass",
              "param": null
            }
          },
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "82cf605a-8393-4550-83ab-43cd5578e006"
              }
            }
          }
        ]
      },
      "name": "nsIFileRandomAccessStream",
      "base": {
        "kind": "ifacebase",
        "extends": "nsIRandomAccessStream"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * @param file          file to read from or stream to\n     * @param ioFlags       file open flags listed in prio.h (see\n     *                      PR_Open documentation) or -1 to open the\n     *                      file in default mode (PR_RDWR).\n     * @param perm          file mode bits listed in prio.h or -1 to\n     *                      use the default value (0)\n     * @param behaviorFlags flags specifying various behaviors of the class\n     *        (see enumerations in the class)\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "init",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIFile",
                      "name": "file"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "long",
                          "name": "ioFlags"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "long",
                          "name": "perm"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "long",
                          "name": "behaviorFlags"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * See the same constant in nsIFileInputStream. The deferred open will\n     * be performed when one of the following is called:\n     *   - Seek\n     *   - Tell\n     *   - SetEOF\n     *   - Available\n     *   - Read\n     *   - Flush\n     *   - Write\n     *   - GetSize\n     *   - GetLastModified\n     *\n     * @note Using this flag results in the file not being opened\n     *       during the call to Init.  This means that any errors that might\n     *       happen when this flag is not set would happen during the\n     *       first read or write. The file is not locked when Init is called,\n     *       so it might be deleted before we try to read from it and if the\n     *       file is to be created, then it will not appear on the disk until\n     *       the first write.\n     */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "long",
                  "name": "DEFER_OPEN",
                  "value": {
                    "kind": "num_$2"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": {
        "kind": "DOC_COMMENT",
        "contents": "/**\n * An interface that allows you to get some metadata like file size and\n * file last modified time. These methods and attributes can throw\n * NS_BASE_STREAM_WOULD_BLOCK in case the informations are not available yet.\n * If this happens, consider the use of nsIAsyncFileMetadata.\n *\n * If using nsIAsyncFileMetadata, you should retrieve any data via this\n * interface before taking any action that might consume the underlying stream.\n * For example, once Available(), Read(), or nsIAsyncInputStream::AsyncWait()\n * are invoked, these methods may return NS_BASE_STREAM_CLOSED.  This will\n * happen when using RemoteLazyInputStream with an underlying file stream, for\n * example.\n */"
      },
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "builtinclass",
              "param": null
            }
          },
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "07f679e4-9601-4bd1-b510-cd3852edb881"
              }
            }
          }
        ]
      },
      "name": "nsIFileMetadata",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * File size in bytes.\n     */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "long long",
                  "name": "size"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * File last modified time in milliseconds from midnight (00:00:00),\n     * January 1, 1970 Greenwich Mean Time (GMT).\n     */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "long long",
                  "name": "lastModified"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * The internal file descriptor. It can be used for memory mapping of the\n     * underlying file. Please use carefully! If this returns\n     * NS_BASE_STREAM_WOULD_BLOCK, consider the use of nsIAsyncFileMetadata.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "PRFileDescPtr",
                  "name": "getFileDescriptor",
                  "params": null,
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "builtinclass",
              "param": null
            }
          },
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "de15b80b-29ba-4b7f-9220-a3d75b17ae8c"
              }
            }
          }
        ]
      },
      "name": "nsIAsyncFileMetadata",
      "base": {
        "kind": "ifacebase",
        "extends": "nsIFileMetadata"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * Asynchronously wait for the object to be ready.\n     *\n     * @param aCallback The callback will be used when the stream is ready to\n     *                  return File metadata. Use a nullptr to cancel a\n     *                  previous operation.\n     *\n     * @param aEventTarget The event target where aCallback will be executed.\n     *                     If aCallback is passed, aEventTarget cannot be null.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "asyncFileMetadataWait",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIFileMetadataCallback",
                      "name": "aCallback"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "nsIEventTarget",
                          "name": "aEventTarget"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": {
        "kind": "DOC_COMMENT",
        "contents": "/**\n * This is a companion interface for\n * nsIAsyncFileMetadata::asyncFileMetadataWait.\n */"
      },
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "function",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "scriptable",
              "param": null
            }
          },
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "d01c7ead-7ba3-4726-b399-618ec8ec7057"
              }
            }
          }
        ]
      },
      "name": "nsIFileMetadataCallback",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * Called to indicate that the nsIFileMetadata object is ready.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "onFileMetadataReady",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIAsyncFileMetadata",
                      "name": "aObject"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n"
  ]
}