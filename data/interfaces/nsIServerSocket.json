{
  "kind": "idlfile",
  "contents": [
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* vim:set ts=4 sw=4 et cindent: */"
      }
    },
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */"
      }
    },
    {
      "kind": "INCLUDE",
      "ident": "nsISupports"
    },
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIFile",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIServerSocketListener",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsISocketTransport",
      "base": null,
      "body": null
    },
    "\n\n",
    {
      "kind": "native"
    },
    "\n",
    {
      "kind": "native"
    },
    "\n\n",
    {
      "kind": "typedef"
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": {
        "kind": "DOC_COMMENT",
        "contents": "/**\n * nsIServerSocket\n *\n * An interface to a server socket that can accept incoming connections.\n */"
      },
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "7a9c39cb-a13f-4eef-9bdf-a74301628742"
              }
            }
          }
        ]
      },
      "name": "nsIServerSocket",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * @name Server Socket Flags\n     * These flags define various socket options.\n     * @{\n     */"
                  },
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  },
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  },
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  },
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "nsServerSocketFlag",
                  "name": "LoopbackOnly",
                  "value": "0x00000001"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  },
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "nsServerSocketFlag",
                  "name": "KeepWhenOffline",
                  "value": "0x00000002"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** @} */"
                  },
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * init\n     *\n     * This method initializes a server socket.\n     *\n     * @param aPort\n     *        The port of the server socket.  Pass -1 to indicate no preference,\n     *        and a port will be selected automatically.\n     * @param aLoopbackOnly\n     *        If true, the server socket will only respond to connections on the\n     *        local loopback interface.  Otherwise, it will accept connections\n     *        from any interface.  To specify a particular network interface,\n     *        use initWithAddress.\n     * @param aBackLog\n     *        The maximum length the queue of pending connections may grow to.\n     *        This parameter may be silently limited by the operating system.\n     *        Pass -1 to use the default value.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "init",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "long",
                      "name": "aPort"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "boolean",
                          "name": "aLoopbackOnly"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "long",
                          "name": "aBackLog"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * the same as init(), but initializes an IPv6 server socket\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "initIPv6",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "long",
                      "name": "aPort"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "boolean",
                          "name": "aLoopbackOnly"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "long",
                          "name": "aBackLog"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * Similar to init(), but initializes a server socket that supports\n     * both IPv4 and IPv6.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "initDualStack",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "long",
                      "name": "aPort"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "long",
                          "name": "aBackLog"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * initSpecialConnection\n     *\n     * This method initializes a server socket and offers the ability to have\n     * that socket not get terminated if Gecko is set offline.\n     *\n     * @param aPort\n     *        The port of the server socket.  Pass -1 to indicate no preference,\n     *        and a port will be selected automatically.\n     * @param aFlags\n     *        Flags for the socket.\n     * @param aBackLog\n     *        The maximum length the queue of pending connections may grow to.\n     *        This parameter may be silently limited by the operating system.\n     *        Pass -1 to use the default value.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "initSpecialConnection",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "long",
                      "name": "aPort"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "nsServerSocketFlag",
                          "name": "aFlags"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "long",
                          "name": "aBackLog"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * initWithAddress\n     *\n     * This method initializes a server socket, and binds it to a particular\n     * local address (and hence a particular local network interface).\n     *\n     * @param aAddr\n     *        The address to which this server socket should be bound.\n     * @param aBackLog\n     *        The maximum length the queue of pending connections may grow to.\n     *        This parameter may be silently limited by the operating system.\n     *        Pass -1 to use the default value.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "initWithAddress",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": {
                        "kind": "attributes",
                        "first_attribute": {
                          "kind": "attribute",
                          "name": "const",
                          "param": null
                        },
                        "other_attributes": []
                      },
                      "refType": "in",
                      "type": "PRNetAddrPtr",
                      "name": "aAddr"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "long",
                          "name": "aBackLog"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * initWithFilename\n     *\n     * This method initializes a Unix domain or \"local\" server socket. Such\n     * a socket has a name in the filesystem, like an ordinary file. To\n     * connect, a client supplies the socket's filename, and the usual\n     * permission checks on socket apply.\n     *\n     * This makes Unix domain sockets useful for communication between the\n     * programs being run by a specific user on a single machine: the\n     * operating system takes care of authentication, and the user's home\n     * directory or profile directory provide natural per-user rendezvous\n     * points.\n     *\n     * Since Unix domain sockets are always local to the machine, they are\n     * not affected by the nsIIOService's 'offline' flag.\n     *\n     * The system-level socket API may impose restrictions on the length of\n     * the filename that are stricter than those of the underlying\n     * filesystem. If the file name is too long, this returns\n     * NS_ERROR_FILE_NAME_TOO_LONG.\n     *\n     * All components of the path prefix of |aPath| must name directories;\n     * otherwise, this returns NS_ERROR_FILE_NOT_DIRECTORY.\n     *\n     * This call requires execute permission on all directories containing\n     * the one in which the socket is to be created, and write and execute\n     * permission on the directory itself. Otherwise, this returns\n     * NS_ERROR_CONNECTION_REFUSED.\n     *\n     * This call creates the socket's directory entry. There must not be\n     * any existing entry with the given name. If there is, this returns\n     * NS_ERROR_SOCKET_ADDRESS_IN_USE.\n     *\n     * On systems that don't support Unix domain sockets at all, this\n     * returns NS_ERROR_SOCKET_ADDRESS_NOT_SUPPORTED.\n     *\n     * @param aPath nsIFile\n     *        The file name at which the socket should be created.\n     *\n     * @param aPermissions unsigned long\n     *        Unix-style permission bits to be applied to the new socket.\n     *\n     * Note about permissions: Linux's unix(7) man page claims that some\n     * BSD-derived systems ignore permissions on UNIX-domain sockets;\n     * NetBSD's bind(2) man page agrees, but says it does check now (dated\n     * 2005). POSIX has required 'connect' to fail if write permission on\n     * the socket itself is not granted since 2003 (Issue 6). NetBSD says\n     * that the permissions on the containing directory (execute) have\n     * always applied, so creating sockets in appropriately protected\n     * directories should be secure on both old and new systems.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "initWithFilename",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIFile",
                      "name": "aPath"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "unsigned long",
                          "name": "aPermissions"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "long",
                          "name": "aBacklog"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * initWithAbstractAddress\n     *\n     * This mehtod is a flavor of initWithFilename method. This initializes\n     * a UNIX domain socket that uses abstract socket address.\n     * This socket type is only supported on Linux and Android.\n     *\n     * On systems that don't support this type's UNIX domain sockets at all,\n     * this returns NS_ERROR_SOCKET_ADDRESS_NOT_SUPPORTED.\n     *\n     * @param aName\n     *        The abstract socket address which the socket should be created.\n     * @param aBacklog\n     *        The maximum length the queue of pending connections may grow to.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "initWithAbstractAddress",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "AUTF8String",
                      "name": "aName"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "long",
                          "name": "aBacklog"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * close\n     *\n     * This method closes a server socket.  This does not affect already\n     * connected client sockets (i.e., the nsISocketTransport instances\n     * created from this server socket).  This will cause the onStopListening\n     * event to asynchronously fire with a status of NS_BINDING_ABORTED.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "close",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * asyncListen\n     *\n     * This method puts the server socket in the listening state.  It will\n     * asynchronously listen for and accept client connections.  The listener\n     * will be notified once for each client connection that is accepted.  The\n     * listener's onSocketAccepted method will be called on the same thread\n     * that called asyncListen (the calling thread must have a nsIEventTarget).\n     *\n     * The listener will be passed a reference to an already connected socket\n     * transport (nsISocketTransport).  See below for more details.\n     *\n     * @param aListener\n     *        The listener to be notified when client connections are accepted.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "asyncListen",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIServerSocketListener",
                      "name": "aListener"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * Returns the port of this server socket.\n     */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "long",
                  "name": "port"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * Returns the address to which this server socket is bound.  Since a\n     * server socket may be bound to multiple network devices, this address\n     * may not necessarily be specific to a single network device.  In the\n     * case of an IP socket, the IP address field would be zerod out to\n     * indicate a server socket bound to all network devices.  Therefore,\n     * this method cannot be used to determine the IP address of the local\n     * system.  See nsIDNSService::myHostName if this is what you need.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "PRNetAddr",
                  "name": "getAddress",
                  "params": null,
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": {
        "kind": "DOC_COMMENT",
        "contents": "/**\n * nsIServerSocketListener\n *\n * This interface is notified whenever a server socket accepts a new connection.\n * The transport is in the connected state, and read/write streams can be opened\n * using the normal nsITransport API.  The address of the client can be found by\n * calling the nsISocketTransport::GetAddress method or by inspecting\n * nsISocketTransport::GetHost, which returns a string representation of the\n * client's IP address (NOTE: this may be an IPv4 or IPv6 string literal).\n */"
      },
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "836d98ec-fee2-4bde-b609-abd5e966eabd"
              }
            }
          }
        ]
      },
      "name": "nsIServerSocketListener",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * onSocketAccepted\n     *\n     * This method is called when a client connection is accepted.\n     *\n     * @param aServ\n     *        The server socket.\n     * @param aTransport\n     *        The connected socket transport.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "onSocketAccepted",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIServerSocket",
                      "name": "aServ"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "nsISocketTransport",
                          "name": "aTransport"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * onStopListening\n     *\n     * This method is called when the listening socket stops for some reason.\n     * The server socket is effectively dead after this notification.\n     *\n     * @param aServ\n     *        The server socket.\n     * @param aStatus\n     *        The reason why the server socket stopped listening.  If the\n     *        server socket was manually closed, then this value will be\n     *        NS_BINDING_ABORTED.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "onStopListening",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIServerSocket",
                      "name": "aServ"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "nsresult",
                          "name": "aStatus"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n"
  ]
}