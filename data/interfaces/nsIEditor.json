{
  "kind": "idlfile",
  "contents": [
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*-\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */"
      }
    },
    {
      "kind": "INCLUDE",
      "ident": "nsISupports"
    },
    {
      "kind": "INCLUDE",
      "ident": "domstubs"
    },
    "%{C++\n#include \"mozilla/Debug.h\"\n%}\n\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsISelectionController",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIDocumentStateListener",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIEditActionListener",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIInlineSpellChecker",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsITransferable",
      "base": null,
      "body": null
    },
    "\n\n",
    {
      "kind": "webidl"
    },
    "\n",
    {
      "kind": "webidl"
    },
    "\n",
    {
      "kind": "webidl"
    },
    "\n",
    {
      "kind": "webidl"
    },
    "\n\n",
    "%{C++\nnamespace mozilla {\nclass EditorBase;\nclass HTMLEditor;\nclass TextEditor;\n} // namespace mozilla\n%}\n\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "builtinclass",
              "param": null
            }
          },
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "094be624-f0bf-400f-89e2-6a84baab9474"
              }
            }
          }
        ]
      },
      "name": "nsIEditor",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": "%{C++\n  typedef short EDirection;\n  typedef short EStripWrappers;\n%}\n  "
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "short",
                  "name": "eNone",
                  "value": "0"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "short",
                  "name": "eNext",
                  "value": "1"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "short",
                  "name": "ePrevious",
                  "value": "2"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "short",
                  "name": "eNextWord",
                  "value": "3"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "short",
                  "name": "ePreviousWord",
                  "value": "4"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "short",
                  "name": "eToBeginningOfLine",
                  "value": "5"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "short",
                  "name": "eToEndOfLine",
                  "value": "6"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": "%{C++\n  static bool EDirectionIsValid(EDirection aDirectionAndAmount) {\n    return aDirectionAndAmount == nsIEditor::eNone ||\n           aDirectionAndAmount == nsIEditor::eNext ||\n           aDirectionAndAmount == nsIEditor::ePrevious ||\n           aDirectionAndAmount == nsIEditor::eNextWord ||\n           aDirectionAndAmount == nsIEditor::ePreviousWord ||\n           aDirectionAndAmount == nsIEditor::eToBeginningOfLine ||\n           aDirectionAndAmount == nsIEditor::eToEndOfLine;\n  }\n  static bool EDirectionIsValidExceptNone(EDirection aDirectionAndAmount) {\n    return aDirectionAndAmount != nsIEditor::eNone &&\n           EDirectionIsValid(aDirectionAndAmount);\n  }\n\n  /**\n   * Return true if nsIEditor::EDirection value means the direction of pressing\n   * `Backspace` key.\n   */\n  [[nodiscard]] static bool DirectionIsBackspace(\n    EDirection aDirectionAndAmount) {\n    MOZ_ASSERT(EDirectionIsValid(aDirectionAndAmount));\n    return aDirectionAndAmount == nsIEditor::ePrevious ||\n           aDirectionAndAmount == nsIEditor::ePreviousWord ||\n           aDirectionAndAmount == nsIEditor::eToBeginningOfLine;\n  }\n\n  /**\n   * Return true if nsIEditor::EDirection value means the direction of pressing\n   * `Delete` key (forwardDelete).\n   */\n  [[nodiscard]] static bool DirectionIsDelete(\n    EDirection aDirectionAndAmount) {\n    MOZ_ASSERT(EDirectionIsValid(aDirectionAndAmount));\n    return aDirectionAndAmount == nsIEditor::eNext ||\n           aDirectionAndAmount == nsIEditor::eNextWord ||\n           aDirectionAndAmount == nsIEditor::eToEndOfLine;\n  }\n%}\n\n  "
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "short",
                  "name": "eStrip",
                  "value": "0"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "short",
                  "name": "eNoStrip",
                  "value": "1"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  },
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "long",
                  "name": "eEditorPlaintextMask",
                  "value": "0x0001"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  },
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "long",
                  "name": "eEditorSingleLineMask",
                  "value": "0x0002"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  },
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "long",
                  "name": "eEditorPasswordMask",
                  "value": "0x0004"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  },
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  },
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  },
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  },
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  },
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  },
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  },
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  },
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "long",
                  "name": "eEditorReadonlyMask",
                  "value": "0x0008"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  },
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  },
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "long",
                  "name": "eEditorMailMask",
                  "value": "0x0020"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "long",
                  "name": "eEditorEnableWrapHackMask",
                  "value": "0x0040"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  },
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  },
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  },
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  },
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "long",
                  "name": "eEditorAllowInteraction",
                  "value": "0x0200"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  },
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  },
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "long",
                  "name": "eEditorRightToLeft",
                  "value": "0x0800"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "long",
                  "name": "eEditorLeftToRight",
                  "value": "0x1000"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "long",
                  "name": "eEditorSkipSpellCheck",
                  "value": "0x2000"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/*\n   * The valid values for newlines handling.\n   * Can't change the values unless we remove\n   * use of the pref.\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "long",
                  "name": "eNewlinesPasteIntact",
                  "value": "0"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "long",
                  "name": "eNewlinesPasteToFirst",
                  "value": "1"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "long",
                  "name": "eNewlinesReplaceWithSpaces",
                  "value": "2"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "long",
                  "name": "eNewlinesStrip",
                  "value": "3"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "long",
                  "name": "eNewlinesReplaceWithCommas",
                  "value": "4"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "long",
                  "name": "eNewlinesStripSurroundingWhitespace",
                  "value": "5"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "Selection",
                  "name": "selection"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "setAttributeOrEquivalent",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "Element",
                      "name": "element"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "AString",
                          "name": "sourceAttrName"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "AString",
                          "name": "sourceAttrValue"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "boolean",
                          "name": "aSuppressTransaction"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "removeAttributeOrEquivalent",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "Element",
                      "name": "element"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "AString",
                          "name": "sourceAttrName"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "boolean",
                          "name": "aSuppressTransaction"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** edit flags for this editor.  May be set at any time. */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "setter_can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": null,
                  "type": "unsigned long",
                  "name": "flags"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * the MimeType of the document\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": null,
                  "type": "AString",
                  "name": "contentsMIMEType"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** Returns true if we have a document that is not marked read-only */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "boolean",
                  "name": "isDocumentEditable"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** Returns true if the current selection anchor is editable */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "boolean",
                  "name": "isSelectionEditable"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * the DOM Document this editor is associated with, refcounted.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "Document",
                  "name": "document"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** the body element, i.e. the root of the editable document.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "Element",
                  "name": "rootElement"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * the selection controller for the current presentation, refcounted.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "nsISelectionController",
                  "name": "selectionController"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/* ------------ Selected content removal -------------- */"
                  },
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * DeleteSelection removes all nodes in the current selection.\n   * @param aDir  if eNext, delete to the right (for example, the DEL key)\n   *              if ePrevious, delete to the left (for example, the BACKSPACE key)\n   * @param stripWrappers If eStrip, strip any empty inline elements left\n   *                      behind after the deletion; if eNoStrip, don't.  If in\n   *                      doubt, pass eStrip -- eNoStrip is only for if you're\n   *                      about to insert text or similar right after.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "deleteSelection",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "short",
                      "name": "action"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "short",
                          "name": "stripWrappers"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/* ------------ Document info and file methods -------------- */"
                  },
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** Returns true if the document has no *meaningful* content */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "boolean",
                  "name": "documentIsEmpty"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** Returns true if the document is modifed and needs saving */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "boolean",
                  "name": "documentModified"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Sets document's character set.  This is available only when the editor\n   * instance is an HTMLEditor since it's odd to change character set of\n   * parent document of `<input>` and `<textarea>`.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "setter_can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": null,
                  "type": "ACString",
                  "name": "documentCharacterSet"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** to be used ONLY when we need to override the doc's modification\n    * state (such as when it's saved).\n    */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "resetModificationCount",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** Gets the modification count of the document we are editing.\n    * @return the modification count of the document being edited.\n    *         Zero means unchanged.\n    */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "long",
                  "name": "getModificationCount",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** called each time we modify the document.\n    * Increments the modification count of the document.\n    * @param  aModCount  the number of modifications by which\n    *                    to increase or decrease the count\n    */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "incrementModificationCount",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "long",
                      "name": "aModCount"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/* ------------ Transaction methods -------------- */"
                  },
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** turn the undo system on or off\n    * @param aEnable  if PR_TRUE, the undo system is turned on if available\n    *                 if PR_FALSE the undo system is turned off if it\n    *                 was previously on\n    * @return         if aEnable is PR_TRUE, returns NS_OK if\n    *                 the undo system could be initialized properly\n    *                 if aEnable is PR_FALSE, returns NS_OK.\n    */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "enableUndo",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "boolean",
                      "name": "enable"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Returns true when undo/redo is enabled (by default).\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": "readonly",
                  "type": "boolean",
                  "name": "undoRedoEnabled"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Retruns true when undo/redo is enabled and there is one or more transaction\n   * in the undo stack.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": "readonly",
                  "type": "boolean",
                  "name": "canUndo"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Returns true when undo/redo is enabled and there is one or more transaction\n   * in the redo stack.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": "readonly",
                  "type": "boolean",
                  "name": "canRedo"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Clears the transactions both for undo and redo.\n   * This may fail if you call this while editor is handling something, i.e.,\n   * don't call this from a legacy mutation event listeners, then, you won't\n   * see any exceptions.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "binaryname",
                      "param": {
                        "kind": "attribute_$0",
                        "value": "ClearUndoRedoXPCOM"
                      }
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "clearUndoRedo",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Undo the topmost transaction in the undo stack.\n   * This may throw exception when this is called while editor is handling\n   * transactions.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "undo",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Undo all transactions in the undo stack.\n   * This may throw exception when this is called while editor is handling\n   * transactions.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "undoAll",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Redo the topmost transaction in the redo stack.\n   * This may throw exception when this is called while editor is handling\n   * transactions.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "redo",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** beginTransaction is a signal from the caller to the editor that\n    * the caller will execute multiple updates to the content tree\n    * that should be treated as a single logical operation,\n    * in the most efficient way possible.<br>\n    * All transactions executed between a call to beginTransaction and\n    * endTransaction will be undoable as an atomic action.<br>\n    * endTransaction must be called after beginTransaction.<br>\n    * Calls to beginTransaction can be nested, as long as endTransaction\n    * is called once per beginUpdate.\n    */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "beginTransaction",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** endTransaction is a signal to the editor that the caller is\n    * finished updating the content model.<br>\n    * beginUpdate must be called before endTransaction is called.<br>\n    * Calls to beginTransaction can be nested, as long as endTransaction\n    * is called once per beginTransaction.\n    */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "endTransaction",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/* ------------ Inline Spell Checking methods -------------- */"
                  },
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** Returns the inline spell checker associated with this object. The spell\n    * checker is lazily created, so this function may create the object for\n    * you during this call.\n    * @param  autoCreate  If true, this will create a spell checker object\n    *                     if one does not exist yet for this editor. If false\n    *                     and the object has not been created, this function\n    *                     WILL RETURN NULL.\n    */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "nsIInlineSpellChecker",
                  "name": "getInlineSpellChecker",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "boolean",
                      "name": "autoCreate"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** Called when the user manually overrides the spellchecking state for this\n    * editor.\n    * @param  enable  The new state of spellchecking in this editor, as\n    *                 requested by the user.\n    */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "setSpellcheckUserOverride",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "boolean",
                      "name": "enable"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/* ------------ Clipboard methods -------------- */"
                  },
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** cut the currently selected text, putting it into the OS clipboard\n    * What if no text is selected?\n    * What about mixed selections?\n    * What are the clipboard formats?\n    */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "cut",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * canCut() returns true if selected content is allowed to be copied to the\n   * clipboard and to be removed.\n   * Note that this always returns true if the editor is in a non-chrome\n   * HTML/XHTML document.\n   * FYI: Current user in script is only BlueGriffon.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "boolean",
                  "name": "canCut",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** copy the currently selected text, putting it into the OS clipboard\n    * What if no text is selected?\n    * What about mixed selections?\n    * What are the clipboard formats?\n    */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "copy",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * canCopy() returns true if selected content is allowed to be copied to\n   * the clipboard.\n   * Note that this always returns true if the editor is in a non-chrome\n   * HTML/XHTML document.\n   * FYI: Current user in script is only BlueGriffon.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "boolean",
                  "name": "canCopy",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** paste the text in the OS clipboard at the cursor position, replacing\n    * the selected text (if any)\n    */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "paste",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "long",
                      "name": "aClipboardType"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** Paste the text in |aTransferable| at the cursor position, replacing the\n    * selected text (if any).\n    */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "pasteTransferable",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsITransferable",
                      "name": "aTransferable"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** Can we paste? True if the doc is modifiable, and we have\n    * pasteable data in the clipboard.\n    */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "boolean",
                  "name": "canPaste",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "long",
                      "name": "aClipboardType"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/* ------------ Selection methods -------------- */"
                  },
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** sets the document selection to the entire contents of the document */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "selectAll",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Collapses selection at start of the document.  If it's an HTML editor,\n   * collapses selection at start of current editing host (<body> element if\n   * it's in designMode) instead.  If there is a non-editable node before any\n   * editable text nodes or inline elements which can have text nodes as their\n   * children, collapses selection at start of the editing host.  If there is\n   * an editable text node which is not collapsed, collapses selection at\n   * start of the text node.  If there is an editable inline element which\n   * cannot have text nodes as its child, collapses selection at before the\n   * element node.  Otherwise, collapses selection at start of the editing\n   * host.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "beginningOfDocument",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Sets the selection to the end of the last leaf child/descendant or the root\n   * element.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "endOfDocument",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/* ------------ Node manipulation methods -------------- */"
                  },
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * setAttribute() sets the attribute of aElement.\n   * No checking is done to see if aAttribute is a legal attribute of the node,\n   * or if aValue is a legal value of aAttribute.\n   *\n   * @param aElement    the content element to operate on\n   * @param aAttribute  the string representation of the attribute to set\n   * @param aValue      the value to set aAttribute to\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "setAttribute",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "Element",
                      "name": "aElement"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "AString",
                          "name": "attributestr"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "AString",
                          "name": "attvalue"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * removeAttribute() deletes aAttribute from the attribute list of aElement.\n   * If aAttribute is not an attribute of aElement, nothing is done.\n   *\n   * @param aElement      the content element to operate on\n   * @param aAttribute    the string representation of the attribute to get\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "removeAttribute",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "Element",
                      "name": "aElement"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "AString",
                          "name": "aAttribute"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * cloneAttributes() is similar to Node::cloneNode(),\n   *   it assures the attribute nodes of the destination are identical\n   *   with the source node by copying all existing attributes from the\n   *   source and deleting those not in the source.\n   *   This is used when the destination element already exists\n   *\n   * @param aDestNode     the destination element to operate on\n   * @param aSourceNode   the source element to copy attributes from\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "cloneAttributes",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "Element",
                      "name": "aDestElement"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "Element",
                          "name": "aSourceElement"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * insertNode inserts aNode into aParent at aPosition and this operation is\n   * undoable.\n   * No checking is done to verify the legality of the insertion.\n   * That is the responsibility of the caller.\n   * TODO: Move this method to nsIHTMLEditor, TextEditor does not allow chrome\n   * script to customize its anonymous subtree.\n   *\n   * @param aNode               The DOM Node to insert.\n   * @param aParent             The node to insert the new object into\n   * @param aPosition           The place in aParent to insert the new node\n   *                            0=first child, 1=second child, etc.\n   *                            If larger than number of children of aParent,\n   *                            this will append aNode into aParent.\n   * @param aPreseveSelection   The default value is false.  If set to true,\n   *                            the insert node handler does not update\n   *                            Selection.\n   *                            FYI: If somebody handles `beforeinput` event or\n   *                            `input` event caused by this and it does\n   *                            something undoable, selection may be changed by\n   *                            that.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "optional_argc",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "can_run_script",
                          "param": null
                        }
                      }
                    ]
                  },
                  "return_type": "void",
                  "name": "insertNode",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "Node",
                      "name": "node"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "Node",
                          "name": "parent"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "unsigned long",
                          "name": "aPosition"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": {
                            "kind": "attributes",
                            "first_attribute": {
                              "kind": "attribute",
                              "name": "optional",
                              "param": null
                            },
                            "other_attributes": []
                          },
                          "refType": "in",
                          "type": "boolean",
                          "name": "aPreserveSelection"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * deleteNode removes aChild from aParent and this operation is undobable.\n   * TODO: Move this method to nsIHTMLEditor, TextEditor does not allow chrome\n   * script to customize its anonymous subtree.\n   *\n   * @param aChild              The node to delete\n   * @param aPreseveSelection   The default value is false.  If set to true,\n   *                            the insert node handler does not update\n   *                            Selection.\n   *                            FYI: If somebody handles `beforeinput` event or\n   *                            `input` event caused by this and it does\n   *                            something undoable, selection may be changed by\n   *                            that.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "optional_argc",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "can_run_script",
                          "param": null
                        }
                      }
                    ]
                  },
                  "return_type": "void",
                  "name": "deleteNode",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "Node",
                      "name": "child"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": {
                            "kind": "attributes",
                            "first_attribute": {
                              "kind": "attribute",
                              "name": "optional",
                              "param": null
                            },
                            "other_attributes": []
                          },
                          "refType": "in",
                          "type": "boolean",
                          "name": "aPreserveSelection"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/* ------------ Output methods -------------- */"
                  },
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Output methods:\n   * aFormatType is a mime type, like text/plain.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "AString",
                  "name": "outputToString",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "AString",
                      "name": "formatType"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "unsigned long",
                          "name": "flags"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/* ------------ Various listeners methods --------------\n   * nsIEditor holds strong references to the editor observers, action listeners\n   * and document state listeners.\n   */"
                  },
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** add an EditActionListener to the editors list of listeners. */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "addEditActionListener",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIEditActionListener",
                      "name": "listener"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** Remove an EditActionListener from the editor's list of listeners. */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "removeEditActionListener",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIEditActionListener",
                      "name": "listener"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** Add a DocumentStateListener to the editors list of doc state listeners. */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "addDocumentStateListener",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIDocumentStateListener",
                      "name": "listener"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** Remove a DocumentStateListener to the editors list of doc state listeners. */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "removeDocumentStateListener",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIDocumentStateListener",
                      "name": "listener"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * forceCompositionEnd() force the composition end\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "forceCompositionEnd",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * whether this editor has active IME transaction\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "boolean",
                  "name": "composing"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * unmask() is available only when the editor is a passwrod field.  This\n   * unmasks characters in specified by aStart and aEnd.  If there have\n   * already unmasked characters, they are masked when this is called.\n   * Note that if you calls this without non-zero `aTimeout`, you bear\n   * responsibility for masking password with calling `mask()`.  I.e.,\n   * user inputting password won't be masked automacitally.  If user types\n   * a new character and echo is enabled, unmasked range is expanded to\n   * including it.\n   *\n   * @param aStart      Optional, first index to show the character.  If you\n   *                    specify middle of a surrogate pair, this expands the\n   *                    range to include the prceding high surrogate\n   *                    automatically.\n   *                    If omitted, it means that all characters of the\n   *                    password becomes unmasked.\n   * @param aEnd        Optional, next index of last unmasked character.  If\n   *                    you specify middle of a surrogate pair, the expands\n   *                    the range to include the following low surrogate.\n   *                    If omitted or negative value, it means unmasking all\n   *                    characters after aStart.  Specifying same index\n   *                    throws an exception.\n   * @param aTimeout    Optional, specify milliseconds to hide the unmasked\n   *                    characters if you want to show them temporarily.\n   *                    If omitted or 0, it means this won't mask the characters\n   *                    automatically.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "optional_argc",
                          "param": null
                        }
                      }
                    ]
                  },
                  "return_type": "void",
                  "name": "unmask",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": {
                        "kind": "attributes",
                        "first_attribute": {
                          "kind": "attribute",
                          "name": "optional",
                          "param": null
                        },
                        "other_attributes": []
                      },
                      "refType": "in",
                      "type": "unsigned long",
                      "name": "aStart"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": {
                            "kind": "attributes",
                            "first_attribute": {
                              "kind": "attribute",
                              "name": "optional",
                              "param": null
                            },
                            "other_attributes": []
                          },
                          "refType": "in",
                          "type": "long long",
                          "name": "aEnd"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": {
                            "kind": "attributes",
                            "first_attribute": {
                              "kind": "attribute",
                              "name": "optional",
                              "param": null
                            },
                            "other_attributes": []
                          },
                          "refType": "in",
                          "type": "unsigned long",
                          "name": "aTimeout"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * mask() is available only when the editor is a password field.  This masks\n   * all unmasked characters immediately.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "mask",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * These attributes are available only when the editor is a password field.\n   * unmaskedStart is first unmasked character index, or 0 if there is no\n   * unmasked characters.\n   * unmaskedEnd is next index of the last unmasked character.  0 means there\n   * is no unmasked characters.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "unsigned long",
                  "name": "unmaskedStart"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "unsigned long",
                  "name": "unmaskedEnd"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * autoMaskingEnabled is true if unmasked range and newly inputted characters\n   * are masked automatically.  That's the default state.  If false, until\n   * `mask()` is called, unmasked range and newly inputted characters are\n   * unmasked.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "boolean",
                  "name": "autoMaskingEnabled"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * passwordMask attribute is a mask character which is used to mask password.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "AString",
                  "name": "passwordMask"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n    * The length of the contents in characters.\n    */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "unsigned long",
                  "name": "textLength"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** Get and set newline handling.\n   *\n   *  Values are the constants defined above.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": null,
                  "type": "long",
                  "name": "newlineHandling"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Inserts a string at the current location,\n   * given by the selection.\n   * If the selection is not collapsed, the selection is deleted\n   * and the insertion takes place at the resulting collapsed selection.\n   *\n   * @param aString   the string to be inserted\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "insertText",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "AString",
                      "name": "aStringToInsert"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Insert a line break into the content model.\n   * The interpretation of a break is up to the implementation:\n   * it may enter a character, split a node in the tree, etc.\n   * This may be more efficient than calling InsertText with a newline.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "insertLineBreak",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": "%{C++\n  inline bool IsHTMLEditor() const;\n  inline bool IsTextEditor() const;\n\n  /**\n   * AsEditorBase() returns a pointer to EditorBase class.\n   *\n   * In order to avoid circular dependency issues, this method is defined\n   * in mozilla/EditorBase.h.  Consumers need to #include that header.\n   */\n  inline mozilla::EditorBase* AsEditorBase();\n  inline const mozilla::EditorBase* AsEditorBase() const;\n\n  /**\n   * AsTextEditor() and GetTextEditor() return a pointer to TextEditor class.\n   * AsTextEditor() does not check the concrete class type.  So, it never\n   * returns nullptr.  GetAsTextEditor() does check the concrete class type.\n   * So, it may return nullptr.\n   *\n   * In order to avoid circular dependency issues, this method is defined\n   * in mozilla/TextEditor.h.  Consumers need to #include that header.\n   */\n  inline mozilla::TextEditor* AsTextEditor();\n  inline const mozilla::TextEditor* AsTextEditor() const;\n  inline mozilla::TextEditor* GetAsTextEditor();\n  inline const mozilla::TextEditor* GetAsTextEditor() const;\n\n  /**\n   * AsHTMLEditor() and GetHTMLEditor() return a pointer to HTMLEditor class.\n   * AsHTMLEditor() does not check the concrete class type.  So, it never\n   * returns nullptr.  GetAsHTMLEditor() does check the concrete class type.\n   * So, it may return nullptr.\n   *\n   * In order to avoid circular dependency issues, this method is defined\n   * in mozilla/HTMLEditor.h.  Consumers need to #include that header.\n   */\n  inline mozilla::HTMLEditor* AsHTMLEditor();\n  inline const mozilla::HTMLEditor* AsHTMLEditor() const;\n  inline mozilla::HTMLEditor* GetAsHTMLEditor();\n  inline const mozilla::HTMLEditor* GetAsHTMLEditor() const;\n%}\n"
              }
            }
          ]
        }
      }
    },
    "\n"
  ]
}