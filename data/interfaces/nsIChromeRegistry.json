{
  "kind": "idlfile",
  "contents": [
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */"
      }
    },
    {
      "kind": "INCLUDE",
      "ident": "nsISupports"
    },
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIURI",
      "base": null,
      "body": null
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "249fb5ad-ae29-4e2c-a728-ba5cf464d188"
              }
            }
          }
        ]
      },
      "name": "nsIChromeRegistry",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "int32_t",
                  "name": "NONE",
                  "value": "0"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "int32_t",
                  "name": "PARTIAL",
                  "value": "1"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "int32_t",
                  "name": "FULL",
                  "value": "2"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Resolve a chrome URL to an loadable URI using the information in the\n   * registry. Does not modify aChromeURL.\n   *\n   * Chrome URLs are allowed to be specified in \"shorthand\", leaving the\n   * \"file\" portion off. In that case, the URL is expanded to:\n   *\n   *   chrome://package/provider/package.ext\n   *\n   * where \"ext\" is:\n   *\n   *   \"xul\" for a \"content\" package,\n   *   \"css\" for a \"skin\" package, and\n   *   \"dtd\" for a \"locale\" package.\n   *\n   * @param aChromeURL the URL that is to be converted.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "nsIURI",
                  "name": "convertChromeURL",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIURI",
                      "name": "aChromeURL"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * refresh the chrome list at runtime, looking for new packages/etc\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "checkForNewChrome",
                  "params": null,
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "93251ddf-5e85-4172-ac2a-31780562974f"
              }
            }
          }
        ]
      },
      "name": "nsIXULChromeRegistry",
      "base": {
        "kind": "ifacebase",
        "extends": "nsIChromeRegistry"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "boolean",
                  "name": "isLocaleRTL",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "ACString",
                      "name": "package"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Installable skin XBL is not always granted the same privileges as other\n   * chrome. This asks the chrome registry whether scripts are allowed to be\n   * run for a particular chrome URI. Do not pass non-chrome URIs to this\n   * method.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "boolean",
                  "name": "allowScriptsForPackage",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIURI",
                      "name": "url"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Content should only be allowed to load chrome JS from certain packages.\n   * This method reflects the contentaccessible flag on packages.\n   * Do not pass non-chrome URIs to this method.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "boolean",
                  "name": "allowContentToAccess",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIURI",
                      "name": "url"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Returns true if the passed chrome URL is allowed to be loaded in a remote\n   * process. This reflects the remoteenabled flag on packages.\n   * Do not pass non-chrome URIs to this method.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "boolean",
                  "name": "canLoadURLRemotely",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIURI",
                      "name": "url"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Returns true if the passed chrome URL must be loaded in a remote process.\n   * This reflects the remoterequired flag on packages.\n   * Do not pass non-chrome URIs to this method.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "boolean",
                  "name": "mustLoadURLRemotely",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIURI",
                      "name": "url"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n\n",
    "%{ C++\n\n#define NS_CHROMEREGISTRY_CONTRACTID \\\n  \"@mozilla.org/chrome/chrome-registry;1\"\n\n/**\n * Chrome registry will notify various caches that all chrome files need\n * flushing.\n */\n#define NS_CHROME_FLUSH_TOPIC \\\n  \"chrome-flush-caches\"\n\n%}\n"
  ]
}