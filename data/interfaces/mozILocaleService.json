{
  "kind": "idlfile",
  "contents": [
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */"
      }
    },
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */"
      }
    },
    {
      "kind": "INCLUDE",
      "ident": "nsISupports"
    },
    "%{C++\n// Define Contractid and CID\n#define MOZ_LOCALESERVICE_CID \\\n  { 0x92735ff4, 0x6384, 0x4ad6, { 0x85, 0x08, 0x75, 0x70, 0x10, 0xe1, 0x49, 0xee } }\n\n#define MOZ_LOCALESERVICE_CONTRACTID \"@mozilla.org/intl/localeservice;1\"\n%}\n\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "C27F8983-B48B-4D1A-92D7-FEB8106F212D"
              }
            }
          }
        ]
      },
      "name": "mozILocaleService",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * List of language negotiation strategies to use.\n   * For an example list of requested and available locales:\n   *\n   *   Requested: ['es-MX', 'fr-FR']\n   *   Available: ['fr', 'fr-CA', 'es', 'es-MX', 'it']\n   *   DefaultLocale: ['en-US']\n   *\n   * each of those strategies will build a different result:\n   *\n   *\n   * filtering (default) -\n   *   Matches as many of the available locales as possible.\n   *\n   *   Result:\n   *     Supported: ['es-MX', 'es', 'fr', 'fr-CA', 'en-US']\n   *\n   * matching -\n   *   Matches the best match from the available locales for every requested\n   *   locale.\n   *\n   *   Result:\n   *     Supported: ['es-MX', 'fr', 'en-US']\n   *\n   * lookup -\n   *   Matches a single best locale. This strategy always returns a list\n   *   of the length 1 and requires a defaultLocale to be set.\n   *\n   *   Result:\n   *     Supported: ['es-MX']\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "long",
                  "name": "langNegStrategyFiltering",
                  "value": "0"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "long",
                  "name": "langNegStrategyMatching",
                  "value": "1"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "long",
                  "name": "langNegStrategyLookup",
                  "value": "2"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Default locale of the browser. The locale we are guaranteed to have\n   * resources for that should be used as a last resort fallack in cases\n   * where requested locales do not match available locales.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "ACString",
                  "name": "defaultLocale"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Last fallback is the final fallback locale we're going to attempt if all\n   * else fails in any language negotiation or locale resource retrieval situations.\n   *\n   * At the moment it returns `en-US`.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "ACString",
                  "name": "lastFallbackLocale"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Returns a list of locales that the application should be localized to.\n   *\n   * The result is a ordered list of valid locale IDs and it should be\n   * used for all APIs that accept list of locales, like ECMA402 and L10n APIs.\n   *\n   * This API always returns at least one locale.\n   *\n   * When retrieving the locales for language negotiation and matching\n   * to language resources, use the language tag form.\n   * When retrieving the locales for Intl API or ICU locale settings,\n   * use the BCP47 form.\n   *\n   * Example: [\"en-US\", \"de\", \"pl\", \"sr-Cyrl\", \"zh-Hans-HK\"]\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": {
                    "kind": "IDENTIFIER_$0"
                  },
                  "name": "appLocalesAsLangTags"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": {
                    "kind": "IDENTIFIER_$0"
                  },
                  "name": "appLocalesAsBCP47"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Returns a list of locales to use for any regional specific operations\n   * like date formatting, calendars, unit formatting etc.\n   *\n   * The result is a ordered list of valid locale IDs and it should be\n   * used for all APIs that accept list of locales, like ECMA402 and L10n APIs.\n   *\n   * This API always returns at least one locale.\n   *\n   * Example: [\"en-US\", \"de\", \"pl\", \"sr-Cyrl\", \"zh-Hans-HK\"]\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": {
                    "kind": "IDENTIFIER_$0"
                  },
                  "name": "regionalPrefsLocales"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": {
                    "kind": "IDENTIFIER_$0"
                  },
                  "name": "webExposedLocales"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Negotiates the best locales out of a ordered list of requested locales and\n   * a list of available locales.\n   *\n   * Internally it uses the following naming scheme:\n   *\n   *  Requested - locales requested by the user\n   *  Available - locales for which the data is available\n   *  Supported - locales negotiated by the algorithm\n   *\n   * Additionally, if defaultLocale is provided, it adds it to the end of the\n   * result list as a \"last resort\" locale.\n   *\n   * Strategy is one of the three strategies described at the top of this file.\n   *\n   * The result list is canonicalized and ordered according to the order\n   * of the requested locales.\n   *\n   * (See LocaleService.h for a more C++-friendly version of this.)\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": {
                    "kind": "IDENTIFIER_$0"
                  },
                  "name": "negotiateLanguages",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": {
                        "kind": "IDENTIFIER_$0"
                      },
                      "name": "aRequested"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": {
                            "kind": "IDENTIFIER_$0"
                          },
                          "name": "aAvailable"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": {
                            "kind": "attributes",
                            "first_attribute": {
                              "kind": "attribute",
                              "name": "optional",
                              "param": null
                            },
                            "other_attributes": []
                          },
                          "refType": "in",
                          "type": "ACString",
                          "name": "aDefaultLocale"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": {
                            "kind": "attributes",
                            "first_attribute": {
                              "kind": "attribute",
                              "name": "optional",
                              "param": null
                            },
                            "other_attributes": []
                          },
                          "refType": "in",
                          "type": "long",
                          "name": "langNegStrategy"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Returns the best locale that the application should be localized to.\n   *\n   * The result is a valid locale ID and it should be\n   * used for all APIs that do not handle language negotiation.\n   *\n   * When retrieving the locales for language negotiation and matching\n   * to language resources, use the language tag form.\n   * When retrieving the locales for Intl API or ICU locale settings,\n   * use the BCP47 form.\n   *\n   * Where possible, appLocales* should be preferred over this API and\n   * all callsites should handle some form of \"best effort\" language\n   * negotiation to respect user preferences in case the use case does\n   * not have data for the first locale in the list.\n   *\n   * Example: \"zh-Hans-HK\"\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "ACString",
                  "name": "appLocaleAsLangTag"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "ACString",
                  "name": "appLocaleAsBCP47"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Returns a list of locales that the user requested the app to be\n   * localized to.\n   *\n   * The result is an ordered list of locale IDs which should be\n   * used as a requestedLocales input list for language negotiation.\n   *\n   * Example: [\"en-US\", \"de\", \"pl\", \"sr-Cyrl\", \"zh-Hans-HK\"]\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": null,
                  "type": {
                    "kind": "IDENTIFIER_$0"
                  },
                  "name": "requestedLocales"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Returns the top-requested locale from the user, or an empty string if none is set.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "ACString",
                  "name": "requestedLocale"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Returns a list of locales that the app can be localized to.\n   *\n   * The result is an unordered list of locale IDs which should be\n   * used as a availableLocales input list for language negotiation.\n   *\n   * Example: [\"en-US\", \"de\", \"pl\", \"sr-Cyrl\", \"zh-Hans-HK\"]\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": null,
                  "type": {
                    "kind": "IDENTIFIER_$0"
                  },
                  "name": "availableLocales"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Returns whether the current app locale is RTL.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "boolean",
                  "name": "isAppLocaleRTL"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Returns a list of locales packaged into the app bundle.\n   *\n   * Example: [\"en-US\", \"de\", \"pl\", \"sr-Cyrl\", \"zh-Hans-HK\"]\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": {
                    "kind": "IDENTIFIER_$0"
                  },
                  "name": "packagedLocales"
                }
              }
            }
          ]
        }
      }
    },
    "\n"
  ]
}