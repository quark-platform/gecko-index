{
  "kind": "idlfile",
  "contents": [
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */"
      }
    },
    {
      "kind": "INCLUDE",
      "ident": "nsISupports"
    },
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIRunnable",
      "base": null,
      "body": null
    },
    "\n",
    "%{ C++\ntemplate <class T> struct already_AddRefed;\n\n/**\n * After the default timezone changes, this topic is notified. Some systems may\n * not support monitoring timezone.\n */\n#define DEFAULT_TIMEZONE_CHANGED_OBSERVER_TOPIC \"default-timezone-changed\"\n%}\n\n",
    {
      "kind": "interface_main",
      "doc_comment": {
        "kind": "DOC_COMMENT",
        "contents": "/**\n * Interface for the native event system layer.  This interface is designed\n * to be used on the main application thread only.\n */"
      },
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "uuid",
          "param": {
            "kind": "attribute_$0",
            "value": "7cd5c71d-223b-4afe-931d-5eedb1f2b01f"
          }
        },
        "other_attributes": []
      },
      "name": "nsIAppShell",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Enter an event loop.  Don't leave until exit() is called.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "run",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Exit the handle event loop\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "exit",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Ask the native event queue notification mechanism to favor Gecko tasks\n   * (instead of native tasks) for a short while. (Content processes always\n   * favor Gecko tasks.)\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "geckoTaskBurst",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Suspends the use of additional platform-specific methods (besides the\n   * nsIAppShell->run() event loop) to run Gecko events on the main\n   * application thread.  Under some circumstances these \"additional methods\"\n   * can cause Gecko event handlers to be re-entered, sometimes leading to\n   * hangs and crashes.  Calls to suspendNative() and resumeNative() may be\n   * nested.  On some platforms (those that don't use any \"additional\n   * methods\") this will be a no-op.  Does not (in itself) stop Gecko events\n   * from being processed on the main application thread.  But if the\n   * nsIAppShell->run() event loop is blocked when this call is made, Gecko\n   * events will stop being processed until resumeNative() is called (even\n   * if a plugin or library is temporarily processing events on a nested\n   * event loop).\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "suspendNative",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Resumes the use of additional platform-specific methods to run Gecko\n   * events on the main application thread.  Calls to suspendNative() and\n   * resumeNative() may be nested.  On some platforms this will be a no-op.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "resumeNative",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * The current event loop nesting level.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "unsigned long",
                  "name": "eventloopNestingLevel"
                }
              }
            }
          ]
        }
      }
    },
    "\n"
  ]
}