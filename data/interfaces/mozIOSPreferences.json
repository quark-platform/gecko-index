{
  "kind": "idlfile",
  "contents": [
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */"
      }
    },
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */"
      }
    },
    {
      "kind": "INCLUDE",
      "ident": "nsISupports"
    },
    "%{C++\n// Define Contractid and CID\n#define MOZ_OSPREFERENCES_CID \\\n  { 0x65944815, 0xe9ae, 0x48bd, { 0xa2, 0xbf, 0xf1, 0x10, 0x87, 0x20, 0x95, 0x0c } }\n\n#define MOZ_OSPREFERENCES_CONTRACTID \"@mozilla.org/intl/ospreferences;1\"\n%}\n\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "65944815-e9ae-48bd-a2bf-f1108720950c"
              }
            }
          }
        ]
      },
      "name": "mozIOSPreferences",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "long",
                  "name": "dateTimeFormatStyleNone",
                  "value": "0"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "long",
                  "name": "dateTimeFormatStyleShort",
                  "value": "1"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "long",
                  "name": "dateTimeFormatStyleMedium",
                  "value": "2"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "long",
                  "name": "dateTimeFormatStyleLong",
                  "value": "3"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "long",
                  "name": "dateTimeFormatStyleFull",
                  "value": "4"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Returns a list of locales used by the host environment for UI\n   * localization.\n   *\n   * The result is a sorted list and we expect that the OS attempts to\n   * use the top locale from the list for which it has data.\n   *\n   * Each element of the list is a valid locale ID that can be passed to ICU\n   * and ECMA402 Intl APIs,\n   * At the same time each element is a valid BCP47 language tag that can be\n   * used for language negotiation.\n   *\n   * Example: [\"en-US\", \"de\", \"pl\", \"sr-Cyrl\", \"zh-Hans-HK\"]\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": {
                    "kind": "IDENTIFIER_$0"
                  },
                  "name": "systemLocales"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Returns a list of locales used by host environment for regional\n   * preferences internationalization.\n   *\n   * The result is a sorted list and we expect that the OS attempts to\n   * use the top locale from the list for which it has data.\n   *\n   * Each element of the list is a valid locale ID that can be passed to ICU\n   * and ECMA402 Intl APIs,\n   *\n   * Example: [\"en-US\", \"de\", \"pl\", \"sr-Cyrl\", \"zh-Hans-HK\"]\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": {
                    "kind": "IDENTIFIER_$0"
                  },
                  "name": "regionalPrefsLocales"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Returns the best locale that the host environment is localized to.\n   *\n   * The result is a valid locale ID and it should be\n   * used for all APIs that do not handle language negotiation.\n   *\n   * In any scenario involving language negotiation, systemLocales should\n   * be preferred over the single value.\n   *\n   * Example: \"zh-Hans-HK\"\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "ACString",
                  "name": "systemLocale"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Returns the best possible date/time pattern for the host environment\n   * taking into account date/time regional settings user defined in the OS\n   * preferences.\n   *\n   * Notice, that depending on the OS it may take into account those settings\n   * for all locales, or only if the locale matches the OS locale.\n   *\n   * It takes two integer arguments that must be valid `dateTimeFormatStyle*`\n   * values (see constants defined above), and a string representing a\n   * BCP47 locale.\n   *\n   * It returns a string with a LDML date/time pattern.\n   *\n   * If no pattern can be retrieved from the host environment, it will\n   * lookup the best available pattern from ICU.\n   *\n   * Notice, this is a pretty unique method in this API in that it does\n   * more than look up into host environment.\n   * The reason for that is that constructing the right date/time pattern\n   * requires a lot of OS-specific logic and it ends up being easier to just\n   * handle all scenarios, including with cases where we fail to retrieve\n   * anything from the OS, here.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "AUTF8String",
                  "name": "getDateTimePattern",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "long",
                      "name": "timeFormatStyle"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "long",
                          "name": "dateFormatStyle"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": {
                            "kind": "attributes",
                            "first_attribute": {
                              "kind": "attribute",
                              "name": "optional",
                              "param": null
                            },
                            "other_attributes": []
                          },
                          "refType": "in",
                          "type": "ACString",
                          "name": "locale"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n"
  ]
}