{
  "kind": "idlfile",
  "contents": [
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */"
      }
    },
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */"
      }
    },
    {
      "kind": "INCLUDE",
      "ident": "nsISupports"
    },
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIURI",
      "base": null,
      "body": null
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "5769F08D-0303-4E38-8FE6-86B5473022F6"
              }
            }
          }
        ]
      },
      "name": "nsIJumpListBuilder",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Returns the local filesystem path for a favicon for a page hosted at\n   * faviconURL if we happen to have written one to disk before. If we have not,\n   * then a background thread retrieves the favicon and will write it to disk\n   * and NS_ERROR_NOT_AVAILABLE will be thrown.\n   *\n   * @param {nsIURI} faviconURL\n   *   The URL for the web page for which we would like a filesystem path for\n   *   the favicon.\n   * @returns {AString}\n   *   The local filesystem path for the favicon if it has been cached before.\n   *   If it has not been cached before, this method will throw\n   *   NS_ERROR_NOT_AVAILABLE.\n   * @throws NS_ERROR_NOT_AVAILABLE\n   *   In the event that the favicon has never been cached to disk before.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "AString",
                  "name": "obtainAndCacheFavicon",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIURI",
                      "name": "faviconURL"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Returns a Promise that resolves with whether or not the Jump List backend\n   * on the background thread is up and running.\n   *\n   * @returns {Promise<boolean>}\n   *   Resolves to true if the backend is ready to accept\n   *   WindowsJumpListShortcutDescriptions. False, otherwise.\n   * @throws NS_ERROR_FAILURE\n   *   If an attempt to communicate with the background thread fails.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "implicit_jscontext",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "Promise",
                  "name": "isAvailable",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Asks the Windows Jump List API for any items that might have been removed\n   * by the user from the Jump List UI.\n   *\n   * Important: This should be called prior to any attempt to call\n   * `populateJumpList` to ensure that any passed in\n   * WindowsJumpListShortcutDescriptions do not describe items that the user has\n   * just removed. Failing to do so will cause the Promise returned from\n   * `populateJumpList` to reject. This is a constraint of the underlying win32\n   * API. Please see\n   * https://learn.microsoft.com/en-us/windows/win32/api/shobjidl_core/nf-shobjidl_core-icustomdestinationlist-beginlist\n   * for more details.\n   *\n   * @returns {Promise<string[], nsresult>}\n   *   On success, will return an array of strings for URLs of history that\n   *   have been removed by the user via the Windows Jump List. These items will\n   *   also have had their cached favicons removed from the disk off of the\n   *   main thread. On failure, this will reject with the nsresult failure code.\n   * @throws NS_ERROR_FAILURE\n   *   If an attempt to communicate with the background thread fails.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "implicit_jscontext",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "Promise",
                  "name": "checkForRemovals",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Writes a new set of items to the Windows Jump List. This occurs\n   * asynchronously, off of the main thread.\n   *\n   * Important: Callers should first call `checkForRemovals` to remove any\n   * browsing history items that the user chose to remove in the Jump List\n   *  Only then should any WindowsJumpListShortcutDescriptions be created\n   * and passed to this method. Any attempt to add\n   * WindowsJumpListShortcutDescriptions matching items that have been removed\n   * by the user will result in the returned Promise rejecting. This is a\n   * constraint of the underlying win32 API. Please see\n   * https://learn.microsoft.com/en-us/windows/win32/api/shobjidl_core/nf-shobjidl_core-icustomdestinationlist-beginlist\n   * for more details.\n   *\n   * @param {WindowsJumpListShortcutDescription[]} aTaskDescriptions\n   *   0 or more WindowsJumpListShortcutDescriptions to place items within the\n   *   \"tasks\" section of the Jump List.\n   * @param {AString} aCustomTitle\n   *   An optional title for a custom sub-list within the Jump List that will be\n   *   populated via aCustomDescriptions. This must be supplied if\n   *   aCustomDescriptions is not empty.\n   * @param {WindowsJumpListShortcutDescription[]} aCustomDescriptions\n   *   0 or more WindowsJumpListShortcutDescriptions to place items within the\n   *   custom section of the Jump List. aCustomTitle must be supplied if this\n   *   array is non-empty.\n   * @returns {Promise<undefined, nsresult>}\n   *   Returns a Promise that resolves if the Jump List was properly written\n   *   to, and rejects otherwise with the nsresult of the failure.\n   * @throws NS_ERROR_INVALID_ARG\n   *   If any of the passed arguments do not meet the requirements set out\n   *   above.\n   * @throws NS_ERROR_FAILURE\n   *   If an attempt to communicate with the background thread fails.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "implicit_jscontext",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "Promise",
                  "name": "populateJumpList",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": {
                        "kind": "IDENTIFIER_$0"
                      },
                      "name": "aTaskDescriptions"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "AString",
                          "name": "aCustomTitle"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": {
                            "kind": "IDENTIFIER_$0"
                          },
                          "name": "aCustomDescriptions"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Removes all items from the Jump List.\n   *\n   * @returns {Promise<undefined, nsresult>}\n   *   Resolves with undefined on successfully clearing the Jump List. If it\n   *   fails to do so, it will reject with the failure code.\n   * @throws NS_ERROR_FAILURE\n   *   If an attempt to communicate with the background thread fails.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "implicit_jscontext",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "Promise",
                  "name": "clearJumpList",
                  "params": null,
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n"
  ]
}