{
  "kind": "idlfile",
  "contents": [
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */"
      }
    },
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* vim:expandtab:shiftwidth=4:tabstop=4:\n */"
      }
    },
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */"
      }
    },
    {
      "kind": "INCLUDE",
      "ident": "nsISupports"
    },
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsINetAddr",
      "base": null,
      "body": null
    },
    "\n\n",
    "%{ C++\n#include \"nsTArrayForwardDeclare.h\"\nnamespace mozilla {\nnamespace net {\nunion NetAddr;\n}\n}\n%}\n",
    {
      "kind": "native"
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": {
        "kind": "DOC_COMMENT",
        "contents": "/**\n * Network link status monitoring service.\n */"
      },
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "103e5293-77b3-4b70-af59-6e9e4a1f994a"
              }
            }
          }
        ]
      },
      "name": "nsINetworkLinkService",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/* Link type constants */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "LINK_TYPE_UNKNOWN",
                  "value": "0"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "LINK_TYPE_ETHERNET",
                  "value": "1"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "LINK_TYPE_USB",
                  "value": "2"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "LINK_TYPE_WIFI",
                  "value": "3"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "LINK_TYPE_WIMAX",
                  "value": "4"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "LINK_TYPE_MOBILE",
                  "value": "9"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * This is set to true when the system is believed to have a usable\n   * network connection.\n   *\n   * The link is only up when network connections can be established. For\n   * example, the link is down during DHCP configuration (unless there\n   * is another usable interface already configured).\n   *\n   * If the link status is not currently known, we generally assume that\n   * it is up.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "boolean",
                  "name": "isLinkUp"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * This is set to true when we believe that isLinkUp is accurate.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "boolean",
                  "name": "linkStatusKnown"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * The type of network connection.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "unsigned long",
                  "name": "linkType"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * A string uniquely identifying the current active network interfaces.\n   * Empty when there are no active network interfaces.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "ACString",
                  "name": "networkID"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * The list of DNS suffixes for the currently active network interfaces.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": {
                    "kind": "IDENTIFIER_$0"
                  },
                  "name": "dnsSuffixList"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * The IPs of the DNS resolvers currently used by the platform.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": "readonly",
                  "type": {
                    "kind": "IDENTIFIER_$0"
                  },
                  "name": "nativeResolvers"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Same as previous - returns the IPs of DNS resolvers but this time as\n   * XPCOM objects usable by extensions.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": {
                    "kind": "IDENTIFIER_$0"
                  },
                  "name": "resolvers"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "NONE_DETECTED",
                  "value": "0"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "VPN_DETECTED",
                  "value": {
                    "kind": "num_$2"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "PROXY_DETECTED",
                  "value": {
                    "kind": "num_$2"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "NRPT_DETECTED",
                  "value": {
                    "kind": "num_$2"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * A bitfield that encodes the platform attributes we detected which\n   * indicate that we should only use DNS, not TRR.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "unsigned long",
                  "name": "platformDNSIndications"
                }
              }
            }
          ]
        }
      }
    },
    "\n\n",
    "%{C++\n/**\n * We send notifications through nsIObserverService with topic\n * NS_NETWORK_LINK_TOPIC whenever one of isLinkUp or linkStatusKnown\n * changes. We pass one of the NS_NETWORK_LINK_DATA_ constants below\n * as the aData parameter of the notification.\n */\n#define NS_NETWORK_LINK_TOPIC \"network:link-status-changed\"\n\n/**\n * isLinkUp is now true, linkStatusKnown is true.\n */\n#define NS_NETWORK_LINK_DATA_UP      \"up\"\n/**\n * isLinkUp is now false, linkStatusKnown is true.\n */\n#define NS_NETWORK_LINK_DATA_DOWN    \"down\"\n/**\n * isLinkUp is still true, but the network setup is modified.\n * linkStatusKnown is true.\n */\n#define NS_NETWORK_LINK_DATA_CHANGED \"changed\"\n/**\n * linkStatusKnown is now false.\n */\n#define NS_NETWORK_LINK_DATA_UNKNOWN \"unknown\"\n\n/**\n * network ID has changed.\n */\n#define NS_NETWORK_ID_CHANGED_TOPIC \"network:networkid-changed\"\n\n/**\n * DNS suffix list has updated.\n */\n#define NS_DNS_SUFFIX_LIST_UPDATED_TOPIC \"network:dns-suffix-list-updated\"\n\n/**\n * We send notifications through nsIObserverService with topic\n * NS_NETWORK_LINK_TYPE_TOPIC whenever the network connection type\n * changes. We pass one of the valid connection type constants\n * below as the aData parameter of the notification.\n */\n#define NS_NETWORK_LINK_TYPE_TOPIC \"network:link-type-changed\"\n\n/** We were unable to determine the network connection type */\n#define NS_NETWORK_LINK_TYPE_UNKNOWN  \"unknown\"\n\n/** A standard wired ethernet connection */\n#define NS_NETWORK_LINK_TYPE_ETHERNET    \"ethernet\"\n\n/** A connection via a USB port */\n#define NS_NETWORK_LINK_TYPE_USB    \"usb\"\n\n/** A connection via a WiFi access point (IEEE802.11) */\n#define NS_NETWORK_LINK_TYPE_WIFI \"wifi\"\n\n/** A connection via WiMax (IEEE802.16) */\n#define NS_NETWORK_LINK_TYPE_WIMAX \"wimax\"\n\n/** A mobile connection (e.g. 2G, 3G, etc) */\n#define NS_NETWORK_LINK_TYPE_MOBILE \"mobile\"\n%}\n"
  ]
}