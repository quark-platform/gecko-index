{
  "kind": "idlfile",
  "contents": [
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */"
      }
    },
    {
      "kind": "INCLUDE",
      "ident": "nsISupports"
    },
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIAsyncOutputStream",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIInputStream",
      "base": null,
      "body": null
    },
    "\n\n",
    "%{C++\n#include \"nsTArray.h\"\nnamespace mozilla {\nnamespace net {\nclass PreferredAlternativeDataTypeParams;\n}\n} // namespace mozilla\n%}\n\n",
    {
      "kind": "native"
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "1fb8ccf2-5fa5-45ec-bc57-8c8022a5d0d3"
              }
            }
          }
        ]
      },
      "name": "nsIInputStreamReceiver",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "onInputStreamReady",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIInputStream",
                      "name": "aStream"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "builtinclass",
              "param": null
            }
          },
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "72c34415-c6eb-48af-851f-772fa9ee5972"
              }
            }
          }
        ]
      },
      "name": "nsICacheInfoChannel",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Get the number of times the cache entry has been opened. This attribute is\n   * equivalent to nsICachingChannel.cacheToken.fetchCount.\n   *\n   * @throws NS_ERROR_NOT_AVAILABLE if the cache entry or the alternate data\n   *         cache entry cannot be read.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "uint32_t",
                  "name": "cacheTokenFetchCount"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Get expiration time from cache token. This attribute is equivalent to\n   * nsICachingChannel.cacheToken.expirationTime.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "uint32_t",
                  "name": "cacheTokenExpirationTime"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * TRUE if this channel's data is being loaded from the cache.  This value\n   * is undefined before the channel fires its OnStartRequest notification\n   * and after the channel fires its OnStopRequest notification.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "boolean",
                  "name": "isFromCache",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Returns true if the channel raced the cache and network requests.\n   * In order to determine if the response is coming from the cache or the\n   * network, the consumer can check isFromCache().\n   * The method can only be called after the channel fires its OnStartRequest\n   * notification.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "boolean",
                  "name": "isRacing",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * The unique ID of the corresponding nsICacheEntry from which the response is\n   * retrieved. By comparing the returned value, we can judge whether the data\n   * of two distinct nsICacheInfoChannels is from the same nsICacheEntry. This\n   * scenario could be useful when verifying whether the alternative data from\n   * one nsICacheInfochannel matches the main data from another one.\n   *\n   * Note: NS_ERROR_NOT_AVAILABLE is thrown when a nsICacheInfoChannel has no\n   * valid corresponding nsICacheEntry.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "uint64_t",
                  "name": "getCacheEntryId",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Set/get the cache key. This integer uniquely identifies the data in\n   * the cache for this channel.\n   *\n   * A cache key retrieved from a particular instance of nsICacheInfoChannel\n   * could be set on another instance of nsICacheInfoChannel provided the\n   * underlying implementations are compatible and provided the new\n   * channel instance was created with the same URI.  The implementation of\n   * nsICacheInfoChannel would be expected to use the cache entry identified\n   * by the cache token.  Depending on the value of nsIRequest::loadFlags,\n   * the cache entry may be validated, overwritten, or simply read.\n   *\n   * The cache key may be 0 indicating that the URI of the channel is\n   * sufficient to locate the same cache entry.  Setting a 0 cache key\n   * is likewise valid.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": null,
                  "type": "unsigned long",
                  "name": "cacheKey"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Tells the channel to behave as if the LOAD_FROM_CACHE flag has been set,\n   * but without affecting the loads for the entire loadGroup in case of this\n   * channel being the default load group's channel.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": null,
                  "type": "boolean",
                  "name": "allowStaleCacheContent"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Tells the priority for LOAD_CACHE is raised over LOAD_BYPASS_CACHE or\n   * LOAD_BYPASS_LOCAL_CACHE in case those flags are set at the same time.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": null,
                  "type": "boolean",
                  "name": "preferCacheLoadOverBypass"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "enum_code",
                  "name": "PreferredAlternativeDataDeliveryType",
                  "base": "8",
                  "values": {
                    "kind": "cenumlist",
                    "first_value": {
                      "kind": "cenum",
                      "comment": [],
                      "identifier": "NONE",
                      "value": {
                        "kind": "cenum_$0",
                        "value": "0"
                      }
                    },
                    "other_values": [
                      {
                        "kind": "cenumlist_$0",
                        "value": {
                          "kind": "cenum",
                          "comment": [
                            {
                              "kind": "DOC_COMMENT",
                              "contents": "/**\n     * Deliver alternative data stream upon additional request.\n     */"
                            }
                          ],
                          "identifier": "ASYNC",
                          "value": {
                            "kind": "cenum_$0",
                            "value": "1"
                          }
                        }
                      },
                      {
                        "kind": "cenumlist_$0",
                        "value": {
                          "kind": "cenum",
                          "comment": [
                            {
                              "kind": "DOC_COMMENT",
                              "contents": "/**\n     * Deliver alternative data stream during IPC parent/child serialization.\n     */"
                            }
                          ],
                          "identifier": "SERIALIZE",
                          "value": {
                            "kind": "cenum_$0",
                            "value": "2"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Tells the channel to be force validated during soft reload.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": null,
                  "type": "boolean",
                  "name": "forceValidateCacheContent"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Calling this method instructs the channel to serve the alternative data\n   * if that was previously saved in the cache, otherwise it will serve the\n   * real data.\n   * @param type\n   *        a string identifying the alt-data format\n   * @param contentType\n   *        the contentType for which the preference applies.\n   *        an empty contentType means the preference applies for ANY contentType\n   * @param deliverAltData\n   *        if false, also if alt-data is available, the channel will deliver\n   *        the original data.\n   *\n   * The method may be called several times, with different type and contentType.\n   *\n   * Must be called before AsyncOpen.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "preferAlternativeDataType",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "ACString",
                      "name": "type"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "ACString",
                          "name": "contentType"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "nsICacheInfoChannel_PreferredAlternativeDataDeliveryType",
                          "name": "deliverAltData"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Get the preferred alternative data type set by preferAlternativeDataType().\n   * The returned types stand for the desired data type instead of the type of the\n   * information retrieved from the network stack.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "notxpcom",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "nostdcall",
                          "param": null
                        }
                      }
                    ]
                  },
                  "return_type": "ConstPreferredAlternativeDataTypeArray",
                  "name": "preferredAlternativeDataTypes",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Holds the type of the alternative data representation that the channel\n   * is returning.\n   * Is empty string if no alternative data representation was requested, or\n   * if the requested representation wasn't found in the cache.\n   * Can only be called during or after OnStartRequest.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "ACString",
                  "name": "alternativeDataType"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * If preferAlternativeDataType() has been called passing deliverAltData\n   * equal to false, this attribute will expose the alt-data inputStream if\n   * avaiable.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "nsIInputStream",
                  "name": "alternativeDataInputStream"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Sometimes when the channel is delivering alt-data, we may want to somehow\n   * access the original content too. This method asynchronously opens the\n   * input stream and delivers it to the receiver.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "getOriginalInputStream",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIInputStreamReceiver",
                      "name": "aReceiver"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Opens and returns an output stream that a consumer may use to save an\n   * alternate representation of the data.\n   * Must be called after the OnStopRequest that delivered the real data.\n   * The consumer may choose to replace the saved alt representation.\n   * Opening the output stream will fail if there are any open input streams\n   * reading the already saved alt representation. After successfully opening\n   * an output stream, if there is an error before the entire alt data can be\n   * written successfully, the client must signal failure by passing an error\n   * code to CloseWithStatus().\n   *\n   * @param type\n   *        type of the alternative data representation\n   * @param predictedSize\n   *        Predicted size of the data that will be written. It's used to decide\n   *        whether the resulting entry would exceed size limit, in which case\n   *        an error is thrown. If the size isn't known in advance, -1 should be\n   *        passed.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "nsIAsyncOutputStream",
                  "name": "openAlternativeOutputStream",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "ACString",
                      "name": "type"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "long long",
                          "name": "predictedSize"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n\n",
    "%{ C++\nnamespace mozilla {\nnamespace net {\n\nusing PreferredAlternativeDataDeliveryTypeIPC = nsICacheInfoChannel::PreferredAlternativeDataDeliveryType;\n\n}\n} // namespace mozilla\n%}\n"
  ]
}