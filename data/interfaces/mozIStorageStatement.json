{
  "kind": "idlfile",
  "contents": [
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-\n * vim: sw=2 ts=2 sts=2 expandtab\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */"
      }
    },
    {
      "kind": "INCLUDE",
      "ident": "mozIStorageBaseStatement"
    },
    "%{C++\n#include \"mozilla/DebugOnly.h\"\n%}\n\n",
    {
      "kind": "native"
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": {
        "kind": "DOC_COMMENT",
        "contents": "/**\n * A SQL statement that can be used for both synchronous and asynchronous\n * purposes.\n */"
      },
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "builtinclass",
              "param": null
            }
          },
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "5f567c35-6c32-4140-828c-683ea49cfd3a"
              }
            }
          }
        ]
      },
      "name": "mozIStorageStatement",
      "base": {
        "kind": "ifacebase",
        "extends": "mozIStorageBaseStatement"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Create a clone of this statement, by initializing a new statement\n   * with the same connection and same SQL statement as this one.  It\n   * does not preserve statement state; that is, if a statement is\n   * being executed when it is cloned, the new statement will not be\n   * executing.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "mozIStorageStatement",
                  "name": "clone",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/*\n   * Number of parameters\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "unsigned long",
                  "name": "parameterCount"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Name of nth parameter, if given\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "AUTF8String",
                  "name": "getParameterName",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "unsigned long",
                      "name": "aParamIndex"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Returns the index of the named parameter.\n   *\n   * @param aName\n   *        The name of the parameter you want the index for.  This does not\n   *        include the leading ':'.\n   * @return the index of the named parameter.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "unsigned long",
                  "name": "getParameterIndex",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "AUTF8String",
                      "name": "aName"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Number of columns returned\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "unsigned long",
                  "name": "columnCount"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Name of nth column\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "AUTF8String",
                  "name": "getColumnName",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "unsigned long",
                      "name": "aColumnIndex"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Obtains the index of the column with the specified name.\n   *\n   * @param aName\n   *        The name of the column.\n   * @return The index of the column with the specified name.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "unsigned long",
                  "name": "getColumnIndex",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "AUTF8String",
                      "name": "aName"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Reset parameters/statement execution\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "reset",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Execute the query, ignoring any results.  This is accomplished by\n   * calling executeStep() once, and then calling reset().\n   *\n   * Error and last insert info, etc. are available from\n   * the mozStorageConnection.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "execute",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Execute a query, using any currently-bound parameters.  Reset\n   * must be called on the statement after the last call of\n   * executeStep.\n   *\n   * @return a boolean indicating whether there are more rows or not;\n   *         row data may be accessed using mozIStorageValueArray methods on\n   *         the statement.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "boolean",
                  "name": "executeStep",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Execute a query, using any currently-bound parameters.  Reset is called\n   * when no more data is returned.  This method is only available to JavaScript\n   * consumers.\n   *\n   * @deprecated As of Mozilla 1.9.2 in favor of executeStep().\n   *\n   * @return a boolean indicating whether there are more rows or not.\n   *\n   * [deprecated] boolean step();\n   */"
                  },
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Obtains the current list of named parameters, which are settable.  This\n   * property is only available to JavaScript consumers.\n   *\n   * readonly attribute mozIStorageStatementParams params;\n   */"
                  },
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Obtains the current row, with access to all the data members by name.  This\n   * property is only available to JavaScript consumers.\n   *\n   * readonly attribute mozIStorageStatementRow row;\n   */"
                  },
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  },
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  },
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * These type values are returned by getTypeOfIndex\n   * to indicate what type of value is present at\n   * a given column.\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "long",
                  "name": "VALUE_TYPE_NULL",
                  "value": "0"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "long",
                  "name": "VALUE_TYPE_INTEGER",
                  "value": "1"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "long",
                  "name": "VALUE_TYPE_FLOAT",
                  "value": "2"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "long",
                  "name": "VALUE_TYPE_TEXT",
                  "value": "3"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "long",
                  "name": "VALUE_TYPE_BLOB",
                  "value": "4"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * The number of entries in the array (each corresponding to a column in the\n   * database row)\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "unsigned long",
                  "name": "numEntries"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Indicate the data type of the current result row for the the given column.\n   * SQLite will perform type conversion if you ask for a value as a different\n   * type than it is stored as.\n   *\n   * @param aIndex\n   *        0-based column index.\n   * @return The type of the value at the given column index; one of\n   *         VALUE_TYPE_NULL, VALUE_TYPE_INTEGER, VALUE_TYPE_FLOAT,\n   *         VALUE_TYPE_TEXT, VALUE_TYPE_BLOB.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "long",
                  "name": "getTypeOfIndex",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "unsigned long",
                      "name": "aIndex"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Retrieve the contents of a column from the current result row as a\n   * variant.\n   *\n   * @param aIndex\n   *        0-based colummn index.\n   * @return A variant with the type of the column value.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "nsIVariant",
                  "name": "getVariant",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "unsigned long",
                      "name": "aIndex"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Retrieve the contents of a column from the current result row as an\n   * integer.\n   *\n   * @param aIndex\n   *        0-based colummn index.\n   * @return Column value interpreted as an integer per type conversion rules.\n   * @{\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "long",
                  "name": "getInt32",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "unsigned long",
                      "name": "aIndex"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "long long",
                  "name": "getInt64",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "unsigned long",
                      "name": "aIndex"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** @} */"
                  },
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Retrieve the contents of a column from the current result row as a\n   * floating point double.\n   *\n   * @param aIndex\n   *        0-based colummn index.\n   * @return Column value interpreted as a double per type conversion rules.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "double",
                  "name": "getDouble",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "unsigned long",
                      "name": "aIndex"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Retrieve the contents of a column from the current result row as a\n   * string.\n   *\n   * @param aIndex\n   *        0-based colummn index.\n   * @return The value for the result column interpreted as a string.  If the\n   *         stored value was NULL, you will get an empty string with IsVoid set\n   *         to distinguish it from an explicitly set empty string.\n   * @{\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "AUTF8String",
                  "name": "getUTF8String",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "unsigned long",
                      "name": "aIndex"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "AString",
                  "name": "getString",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "unsigned long",
                      "name": "aIndex"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** @} */"
                  },
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Retrieve the contents of a column from the current result row as a\n   * blob.\n   *\n   * @param aIndex\n   *        0-based colummn index.\n   * @param[out] aDataSize\n   *             The number of bytes in the blob.\n   * @param[out] aData\n   *             The contents of the BLOB.  This will be NULL if aDataSize == 0.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "getBlob",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "unsigned long",
                      "name": "aIndex"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "out",
                          "type": "unsigned long",
                          "name": "aDataSize"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": {
                            "kind": "attributes",
                            "first_attribute": {
                              "kind": "attribute",
                              "name": "array",
                              "param": null
                            },
                            "other_attributes": [
                              {
                                "kind": "attributes_$0",
                                "attr": {
                                  "kind": "attribute",
                                  "name": "size_is",
                                  "param": {
                                    "kind": "attribute_$0",
                                    "value": "aDataSize"
                                  }
                                }
                              }
                            ]
                          },
                          "refType": "out",
                          "type": "octet",
                          "name": "aData"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Retrieve the contents of a Blob column from the current result row as a\n   * string.\n   *\n   * @param aIndex\n   *        0-based colummn index.\n   * @return The value for the result Blob column interpreted as a String.\n   *         No encoding conversion is performed.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "AString",
                  "name": "getBlobAsString",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "unsigned long",
                      "name": "aIndex"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Retrieve the contents of a Blob column from the current result row as a\n   * UTF8 string.\n   *\n   * @param aIndex\n   *        0-based colummn index.\n   * @return The value for the result Blob column interpreted as a UTF8 String.\n   *         No encoding conversion is performed.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "AUTF8String",
                  "name": "getBlobAsUTF8String",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "unsigned long",
                      "name": "aIndex"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Check whether the given column in the current result row is NULL.\n   *\n   * @param aIndex\n   *        0-based colummn index.\n   * @return true if the value for the result column is null.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "boolean",
                  "name": "getIsNull",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "unsigned long",
                      "name": "aIndex"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Returns a shared string pointer.\n   *\n   * @param aIndex\n   *        0-based colummn index.\n   * @param aByteLength\n   *        The number of bytes in the string or blob. This is the same as the\n   *        number of characters for UTF-8 strings, and twice the number of\n   *        characters for UTF-16 strings.\n   * @param aResult\n   *        A pointer to the string or blob.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "getSharedUTF8String",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "unsigned long",
                      "name": "aIndex"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "out",
                          "type": "unsigned long",
                          "name": "aByteLength"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": {
                            "kind": "attributes",
                            "first_attribute": {
                              "kind": "attribute",
                              "name": "shared",
                              "param": null
                            },
                            "other_attributes": [
                              {
                                "kind": "attributes_$0",
                                "attr": {
                                  "kind": "attribute",
                                  "name": "retval",
                                  "param": null
                                }
                              }
                            ]
                          },
                          "refType": "out",
                          "type": "string",
                          "name": "aResult"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "getSharedString",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "unsigned long",
                      "name": "aIndex"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "out",
                          "type": "unsigned long",
                          "name": "aByteLength"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": {
                            "kind": "attributes",
                            "first_attribute": {
                              "kind": "attribute",
                              "name": "shared",
                              "param": null
                            },
                            "other_attributes": [
                              {
                                "kind": "attributes_$0",
                                "attr": {
                                  "kind": "attribute",
                                  "name": "retval",
                                  "param": null
                                }
                              }
                            ]
                          },
                          "refType": "out",
                          "type": "wstring",
                          "name": "aResult"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "getSharedBlob",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "unsigned long",
                      "name": "aIndex"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "out",
                          "type": "unsigned long",
                          "name": "aByteLength"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": {
                            "kind": "attributes",
                            "first_attribute": {
                              "kind": "attribute",
                              "name": "shared",
                              "param": null
                            },
                            "other_attributes": [
                              {
                                "kind": "attributes_$0",
                                "attr": {
                                  "kind": "attribute",
                                  "name": "retval",
                                  "param": null
                                }
                              }
                            ]
                          },
                          "refType": "out",
                          "type": "octetPtr",
                          "name": "aResult"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Getters for native code that return their values as\n   * the return type, for convenience and sanity.\n   *\n   * Not virtual; no vtable bloat.\n   */"
                  }
                ],
                "code": "%{C++\n  inline int32_t AsInt32(uint32_t idx) {\n    int32_t v = 0;\n    mozilla::DebugOnly<nsresult> rv = GetInt32(idx, &v);\n    MOZ_ASSERT(NS_SUCCEEDED(rv) || IsNull(idx),\n               \"Getting value failed, wrong column index?\");\n    return v;\n  }\n\n  inline int64_t AsInt64(uint32_t idx) {\n    int64_t v = 0;\n    mozilla::DebugOnly<nsresult> rv = GetInt64(idx, &v);\n    MOZ_ASSERT(NS_SUCCEEDED(rv) || IsNull(idx),\n               \"Getting value failed, wrong column index?\");\n    return v;\n  }\n\n  inline double AsDouble(uint32_t idx) {\n    double v = 0.0;\n    mozilla::DebugOnly<nsresult> rv = GetDouble(idx, &v);\n    MOZ_ASSERT(NS_SUCCEEDED(rv) || IsNull(idx),\n               \"Getting value failed, wrong column index?\");\n    return v;\n  }\n\n  inline const char* AsSharedUTF8String(uint32_t idx, uint32_t *len) {\n    const char *str = nullptr;\n    *len = 0;\n    mozilla::DebugOnly<nsresult> rv = GetSharedUTF8String(idx, len, &str);\n    MOZ_ASSERT(NS_SUCCEEDED(rv) || IsNull(idx),\n               \"Getting value failed, wrong column index?\");\n    return str;\n  }\n\n  inline const char16_t* AsSharedWString(uint32_t idx, uint32_t *len) {\n    const char16_t *str = nullptr;\n    *len = 0;\n    mozilla::DebugOnly<nsresult> rv = GetSharedString(idx, len, &str);\n    MOZ_ASSERT(NS_SUCCEEDED(rv) || IsNull(idx),\n               \"Getting value failed, wrong column index?\");\n    return str;\n  }\n\n  inline const uint8_t* AsSharedBlob(uint32_t idx, uint32_t *len) {\n    const uint8_t *blob = nullptr;\n    *len = 0;\n    mozilla::DebugOnly<nsresult> rv = GetSharedBlob(idx, len, &blob);\n    MOZ_ASSERT(NS_SUCCEEDED(rv) || IsNull(idx),\n               \"Getting value failed, wrong column index?\");\n    return blob;\n  }\n\n  inline bool IsNull(uint32_t idx) {\n    bool b = false;\n    mozilla::DebugOnly<nsresult> rv = GetIsNull(idx, &b);\n    MOZ_ASSERT(NS_SUCCEEDED(rv),\n               \"Getting value failed, wrong column index?\");\n    return b;\n  }\n\n%}\n"
              }
            }
          ]
        }
      }
    },
    "\n"
  ]
}