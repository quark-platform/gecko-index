{
  "kind": "idlfile",
  "contents": [
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this file,\n * You can obtain one at http://mozilla.org/MPL/2.0/. */"
      }
    },
    {
      "kind": "INCLUDE",
      "ident": "nsISupports"
    },
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIURI",
      "base": null,
      "body": null
    },
    "\n\n",
    {
      "kind": "webidl"
    },
    "\n",
    {
      "kind": "webidl"
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": {
        "kind": "DOC_COMMENT",
        "contents": "/**\n * Non-Web HTML parser functionality to Firefox extensions and XULRunner apps.\n * Don't use this from within Gecko--use nsContentUtils, nsTreeSanitizer, etc.\n * directly instead.\n */"
      },
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "builtinclass",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "scriptable",
              "param": null
            }
          },
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "a1101145-0025-411e-8873-fdf57bf28128"
              }
            }
          }
        ]
      },
      "name": "nsIParserUtils",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Flag for sanitizer: Allow comment nodes.\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "SanitizerAllowComments",
                  "value": {
                    "kind": "unary_$0"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Flag for sanitizer: Allow <style> and style=\"\" (with contents sanitized\n   * in case of -moz-binding). Note! If -moz-binding is absent, properties\n   * that might be XSS risks in other Web engines are preserved!\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "SanitizerAllowStyle",
                  "value": {
                    "kind": "unary_$0"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Flag for sanitizer: Only allow cid: URLs for embedded content.\n   *\n   * At present, sanitizing CSS backgrounds, etc., is not supported, so setting\n   * this together with SanitizerAllowStyle doesn't make sense.\n   *\n   * At present, sanitizing CSS syntax in SVG presentational attributes is not\n   * supported, so this option flattens out SVG.\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "SanitizerCidEmbedsOnly",
                  "value": {
                    "kind": "unary_$0"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Flag for sanitizer: Drop non-CSS presentational HTML elements and\n   * attributes, such as <font>, <center> and bgcolor=\"\".\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "SanitizerDropNonCSSPresentation",
                  "value": {
                    "kind": "unary_$0"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Flag for sanitizer: Drop forms and form controls (excluding\n   * fieldset/legend).\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "SanitizerDropForms",
                  "value": {
                    "kind": "unary_$0"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Flag for sanitizer: Drop <img>, <video>, <audio> and <source> and flatten\n   * out SVG.\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "SanitizerDropMedia",
                  "value": {
                    "kind": "unary_$0"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Flag for sanitizer: Log messages to the console for everything that gets\n   * sanitized\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "SanitizerLogRemovals",
                  "value": {
                    "kind": "unary_$0"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Parses a string into an HTML document, sanitizes the document and\n   * returns the result serialized to a string.\n   *\n   * The sanitizer is designed to protect against XSS when sanitized content\n   * is inserted into a different-origin context without an iframe-equivalent\n   * sandboxing mechanism.\n   *\n   * By default, the sanitizer doesn't try to avoid leaking information that\n   * the content was viewed to third parties. That is, by default, e.g.\n   * <img src> pointing to an HTTP server potentially controlled by a third\n   * party is not removed. To avoid ambient information leakage upon loading\n   * the sanitized content, use the SanitizerInternalEmbedsOnly flag. In that\n   * case, <a href> links (and similar) to other content are preserved, so an\n   * explicit user action (following a link) after the content has been loaded\n   * can still leak information.\n   *\n   * By default, non-dangerous non-CSS presentational HTML elements and\n   * attributes or forms are not removed. To remove these, use\n   * SanitizerDropNonCSSPresentation and/or SanitizerDropForms.\n   *\n   * By default, comments and CSS is removed. To preserve comments, use\n   * SanitizerAllowComments. To preserve <style> and style=\"\", use\n   * SanitizerAllowStyle. -moz-binding is removed from <style> and style=\"\" if\n   * present. In this case, properties that Gecko doesn't recognize can get\n   * removed as a side effect. Note! If -moz-binding is not present, <style>\n   * and style=\"\" and SanitizerAllowStyle is specified, the sanitized content\n   * may still be XSS dangerous if loaded into a non-Gecko Web engine!\n   *\n   * @param src the HTML source to parse (C++ callers are allowed but not\n   *            required to use the same string for the return value.)\n   * @param flags sanitization option flags defined above\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "AString",
                  "name": "sanitize",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "AString",
                      "name": "src"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "unsigned long",
                          "name": "flags"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Removes conditional CSS (@media / etc) from the input string.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "AString",
                  "name": "removeConditionalCSS",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "AString",
                      "name": "src"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Convert HTML to plain text.\n   *\n   * @param src the HTML source to parse (C++ callers are allowed but not\n   *            required to use the same string for the return value.)\n   * @param flags conversion option flags defined in nsIDocumentEncoder\n   * @param wrapCol number of characters per line; 0 for no auto-wrapping\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "AString",
                  "name": "convertToPlainText",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "AString",
                      "name": "src"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "unsigned long",
                          "name": "flags"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "unsigned long",
                          "name": "wrapCol"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Parses markup into a sanitized document fragment.\n   *\n   * @param fragment the input markup\n   * @param flags sanitization option flags defined above\n   * @param isXML true if |fragment| is XML and false if HTML\n   * @param baseURI the base URL for this fragment\n   * @param element the context node for the fragment parsing algorithm\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "DocumentFragment",
                  "name": "parseFragment",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "AString",
                      "name": "fragment"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "unsigned long",
                          "name": "flags"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "boolean",
                          "name": "isXML"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "nsIURI",
                          "name": "baseURI"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "Element",
                          "name": "element"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n\n",
    "%{ C++\n#define NS_PARSERUTILS_CONTRACTID \\\n    \"@mozilla.org/parserutils;1\"\n#define NS_PARSERUTILS_CID  \\\n{ 0xaf7b24cb, 0x893f, 0x41bb, { 0x96, 0x1f, 0x5a, 0x69, 0x38, 0x8e, 0x27, 0xc3 } }\n%}\n"
  ]
}