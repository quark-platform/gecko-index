{
  "kind": "idlfile",
  "contents": [
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */"
      }
    },
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */"
      }
    },
    {
      "kind": "INCLUDE",
      "ident": "nsISupports"
    },
    {
      "kind": "INCLUDE",
      "ident": "nsIPaymentActionResponse"
    },
    {
      "kind": "interface_main",
      "doc_comment": {
        "kind": "DOC_COMMENT",
        "contents": "/**\n * nsIPaymentUIService is the interface used by Gecko to communicate with the\n * payment UI.\n * In general, the implementation of this interface should be a service that\n * manages all payment UI components and receives the requested payment actions\n * from Gecko and perform the corresponding UI behavior.\n */"
      },
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "01f8bd55-9017-438b-85ec-7c15d2b35cdc"
              }
            }
          }
        ]
      },
      "name": "nsIPaymentUIService",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   *  Show the payment UI to users.\n   *  The implementation gets the payment data through nsIPaymentRequestService\n   *  by the passed in requestId, then shows the payment UI and start to interact\n   *  with users.\n   *  According to user's action, nsIPaymentRequestService's APIs respondPayment,\n   *  changeShippingAddress, or changeShippingOtpion is possible to called in the\n   *  implementation.\n   *  @param requestId - the request identify of the payment request.\n   *                     Notice that this requestId is an internal request Id\n   *                     generated by Gecko\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "showPayment",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "AString",
                      "name": "requestId"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   *  Abort the payment.\n   *  The implementation must abort and close the showing payment UI then call\n   *  nsIPaymentRequestService respondPayment with nsIPaymentAbortActionResponse\n   *  to inform Gecko of the abort status.\n   *  @param requestId - the request identify of the payment request.\n   *                     Notice that this requestId is an internal request Id\n   *                     generated by Gecko\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "abortPayment",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "AString",
                      "name": "requestId"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   *  Complete the payment.\n   *  The implementation should close the showing payment UI, then call\n   *  nsIPaymentRequestService respondPayment with nsIPaymentCompleteActionResponse\n   *  to inform Gecko of the complete status.\n   *  @param requestId - the request identify of the payment request.\n   *                     Notice that this requestId is an internal request Id\n   *                     generated by Gecko\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "completePayment",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "AString",
                      "name": "requestId"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   *  Update the payment data in the payment UI.\n   *  The implementation should get the updated payment data through the\n   *  nsIPaymentRequestService again, and update the UI.\n   *  @param requestId - the request identify of the payment request.\n   *                     Notice that this requestId is an internal request Id\n   *                     generated by Gecko\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "updatePayment",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "AString",
                      "name": "requestId"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   *  Close the payment UI for the specified PaymentRequest.\n   *  The implementation should clean up the PaymentRequest data saved in the UI\n   *  component and close the UI if the specified PaymentRequest is showing to\n   *  the user.\n   *  Notice when the method is called, that means the PaymentRequest is invalid\n   *  in nsIPaymentRequestService.\n   *  @param requestId - the request identify of the payment request.\n   *                     Notice that this requestId is an internal request Id\n   *                     generated by Gecko\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "closePayment",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "AString",
                      "name": "requestId"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n\n",
    "%{C++\n#define NS_PAYMENT_UI_SERVICE_CID \\\n  { 0x01f8bd55, 0x9017, 0x438b, { 0x85, 0xec, 0x7c, 0x15, 0xd2, 0xb3, 0x5c, 0xdc } }\n#define NS_PAYMENT_UI_SERVICE_CONTRACT_ID \\\n  \"@mozilla.org/dom/payments/payment-ui-service;1\"\n%}\n"
  ]
}