{
  "kind": "idlfile",
  "contents": [
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */"
      }
    },
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */"
      }
    },
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* nsISupportsIterators.idl --- IDL defining general purpose iterators */"
      }
    },
    {
      "kind": "INCLUDE",
      "ident": "nsISupports"
    },
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/*\n    ...\n  */"
      }
    },
    {
      "kind": "interface_main",
      "doc_comment": {
        "kind": "DOC_COMMENT",
        "contents": "/**\n   * ...\n   */"
      },
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "7330650e-1dd2-11b2-a0c2-9ff86ee97bed"
              }
            }
          }
        ]
      },
      "name": "nsIOutputIterator",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n       * Put |anElementToPut| into the underlying container or sequence at the position currently pointed to by this iterator.\n       * The iterator and the underlying container or sequence cooperate to |Release()|\n       * the replaced element, if any and if necessary, and to |AddRef()| the new element.\n       *\n       * The result is undefined if this iterator currently points outside the\n       * useful range of the underlying container or sequence.\n       *\n       * @param anElementToPut the element to place into the underlying container or sequence\n       */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "putElement",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsISupports",
                      "name": "anElementToPut"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n       * Advance this iterator to the next position in the underlying container or sequence.\n       */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "stepForward",
                  "params": null,
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n\n  ",
    {
      "kind": "interface_main",
      "doc_comment": {
        "kind": "DOC_COMMENT",
        "contents": "/**\n   * ...\n   */"
      },
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "85585e12-1dd2-11b2-a930-f6929058269a"
              }
            }
          }
        ]
      },
      "name": "nsIInputIterator",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n       * Retrieve (and |AddRef()|) the element this iterator currently points to.\n       *\n       * The result is undefined if this iterator currently points outside the\n       * useful range of the underlying container or sequence.\n       *\n       * @result a new reference to the element this iterator currently points to (if any)\n       */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "nsISupports",
                  "name": "getElement",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n       * Advance this iterator to the next position in the underlying container or sequence.\n       */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "stepForward",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n       * Test if |anotherIterator| points to the same position in the underlying container or sequence.\n       *\n       * The result is undefined if |anotherIterator| was not created by or for the same underlying container or sequence.\n       *\n       * @param anotherIterator another iterator to compare against, created by or for the same underlying container or sequence\n       * @result true if |anotherIterator| points to the same position in the underlying container or sequence\n       */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "boolean",
                  "name": "isEqualTo",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsISupports",
                      "name": "anotherIterator"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n       * Create a new iterator pointing to the same position in the underlying container or sequence to which this iterator currently points.\n       * The returned iterator is suitable for use in a subsequent call to |isEqualTo()| against this iterator.\n       *\n       * @result a new iterator pointing at the same position in the same underlying container or sequence as this iterator\n       */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "nsISupports",
                  "name": "clone",
                  "params": null,
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n\n  ",
    {
      "kind": "interface_main",
      "doc_comment": {
        "kind": "DOC_COMMENT",
        "contents": "/**\n   * ...\n   */"
      },
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "8da01646-1dd2-11b2-98a7-c7009045be7e"
              }
            }
          }
        ]
      },
      "name": "nsIForwardIterator",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n       * Retrieve (and |AddRef()|) the element this iterator currently points to.\n       *\n       * The result is undefined if this iterator currently points outside the\n       * useful range of the underlying container or sequence.\n       *\n       * @result a new reference to the element this iterator currently points to (if any)\n       */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "nsISupports",
                  "name": "getElement",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n       * Put |anElementToPut| into the underlying container or sequence at the position currently pointed to by this iterator.\n       * The iterator and the underlying container or sequence cooperate to |Release()|\n       * the replaced element, if any and if necessary, and to |AddRef()| the new element.\n       *\n       * The result is undefined if this iterator currently points outside the\n       * useful range of the underlying container or sequence.\n       *\n       * @param anElementToPut the element to place into the underlying container or sequence\n       */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "putElement",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsISupports",
                      "name": "anElementToPut"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n       * Advance this iterator to the next position in the underlying container or sequence.\n       */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "stepForward",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n       * Test if |anotherIterator| points to the same position in the underlying container or sequence.\n       *\n       * The result is undefined if |anotherIterator| was not created by or for the same underlying container or sequence.\n       *\n       * @param anotherIterator another iterator to compare against, created by or for the same underlying container or sequence\n       * @result true if |anotherIterator| points to the same position in the underlying container or sequence\n       */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "boolean",
                  "name": "isEqualTo",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsISupports",
                      "name": "anotherIterator"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n       * Create a new iterator pointing to the same position in the underlying container or sequence to which this iterator currently points.\n       * The returned iterator is suitable for use in a subsequent call to |isEqualTo()| against this iterator.\n       *\n       * @result a new iterator pointing at the same position in the same underlying container or sequence as this iterator\n       */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "nsISupports",
                  "name": "clone",
                  "params": null,
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n\n  ",
    {
      "kind": "interface_main",
      "doc_comment": {
        "kind": "DOC_COMMENT",
        "contents": "/**\n   * ...\n   */"
      },
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "948defaa-1dd1-11b2-89f6-8ce81f5ebda9"
              }
            }
          }
        ]
      },
      "name": "nsIBidirectionalIterator",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n       * Retrieve (and |AddRef()|) the element this iterator currently points to.\n       *\n       * The result is undefined if this iterator currently points outside the\n       * useful range of the underlying container or sequence.\n       *\n       * @result a new reference to the element this iterator currently points to (if any)\n       */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "nsISupports",
                  "name": "getElement",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n       * Put |anElementToPut| into the underlying container or sequence at the position currently pointed to by this iterator.\n       * The iterator and the underlying container or sequence cooperate to |Release()|\n       * the replaced element, if any and if necessary, and to |AddRef()| the new element.\n       *\n       * The result is undefined if this iterator currently points outside the\n       * useful range of the underlying container or sequence.\n       *\n       * @param anElementToPut the element to place into the underlying container or sequence\n       */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "putElement",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsISupports",
                      "name": "anElementToPut"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n       * Advance this iterator to the next position in the underlying container or sequence.\n       */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "stepForward",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n       * Move this iterator to the previous position in the underlying container or sequence.\n       */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "stepBackward",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n       * Test if |anotherIterator| points to the same position in the underlying container or sequence.\n       *\n       * The result is undefined if |anotherIterator| was not created by or for the same underlying container or sequence.\n       *\n       * @param anotherIterator another iterator to compare against, created by or for the same underlying container or sequence\n       * @result true if |anotherIterator| points to the same position in the underlying container or sequence\n       */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "boolean",
                  "name": "isEqualTo",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsISupports",
                      "name": "anotherIterator"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n       * Create a new iterator pointing to the same position in the underlying container or sequence to which this iterator currently points.\n       * The returned iterator is suitable for use in a subsequent call to |isEqualTo()| against this iterator.\n       *\n       * @result a new iterator pointing at the same position in the same underlying container or sequence as this iterator\n       */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "nsISupports",
                  "name": "clone",
                  "params": null,
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n\n  ",
    {
      "kind": "interface_main",
      "doc_comment": {
        "kind": "DOC_COMMENT",
        "contents": "/**\n   * ...\n   */"
      },
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "9bd6fdb0-1dd1-11b2-9101-d15375968230"
              }
            }
          }
        ]
      },
      "name": "nsIRandomAccessIterator",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n       * Retrieve (and |AddRef()|) the element this iterator currently points to.\n       *\n       * The result is undefined if this iterator currently points outside the\n       * useful range of the underlying container or sequence.\n       *\n       * @result a new reference to the element this iterator currently points to (if any)\n       */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "nsISupports",
                  "name": "getElement",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n       * Retrieve (and |AddRef()|) an element at some offset from where this iterator currently points.\n       * The offset may be negative.  |getElementAt(0)| is equivalent to |getElement()|.\n       *\n       * The result is undefined if this iterator currently points outside the\n       * useful range of the underlying container or sequence.\n       *\n       * @param anOffset a |0|-based offset from the position to which this iterator currently points\n       * @result a new reference to the indicated element (if any)\n       */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "nsISupports",
                  "name": "getElementAt",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "int32_t",
                      "name": "anOffset"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n       * Put |anElementToPut| into the underlying container or sequence at the position currently pointed to by this iterator.\n       * The iterator and the underlying container or sequence cooperate to |Release()|\n       * the replaced element, if any and if necessary, and to |AddRef()| the new element.\n       *\n       * The result is undefined if this iterator currently points outside the\n       * useful range of the underlying container or sequence.\n       *\n       * @param anElementToPut the element to place into the underlying container or sequence\n       */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "putElement",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsISupports",
                      "name": "anElementToPut"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n       * Put |anElementToPut| into the underlying container or sequence at the position |anOffset| away from that currently pointed to by this iterator.\n       * The iterator and the underlying container or sequence cooperate to |Release()|\n       * the replaced element, if any and if necessary, and to |AddRef()| the new element.\n       * |putElementAt(0, obj)| is equivalent to |putElement(obj)|.\n       *\n       * The result is undefined if this iterator currently points outside the\n       * useful range of the underlying container or sequence.\n       *\n       * @param anOffset a |0|-based offset from the position to which this iterator currently points\n       * @param anElementToPut the element to place into the underlying container or sequence\n       */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "putElementAt",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "int32_t",
                      "name": "anOffset"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "nsISupports",
                          "name": "anElementToPut"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n       * Advance this iterator to the next position in the underlying container or sequence.\n       */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "stepForward",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n       * Move this iterator by |anOffset| positions in the underlying container or sequence.\n       * |anOffset| may be negative.  |stepForwardBy(1)| is equivalent to |stepForward()|.\n       * |stepForwardBy(0)| is a no-op.\n       *\n       * @param anOffset a |0|-based offset from the position to which this iterator currently points\n       */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "stepForwardBy",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "int32_t",
                      "name": "anOffset"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n       * Move this iterator to the previous position in the underlying container or sequence.\n       */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "stepBackward",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n       * Move this iterator backwards by |anOffset| positions in the underlying container or sequence.\n       * |anOffset| may be negative.  |stepBackwardBy(1)| is equivalent to |stepBackward()|.\n       * |stepBackwardBy(n)| is equivalent to |stepForwardBy(-n)|.  |stepBackwardBy(0)| is a no-op.\n       *\n       * @param anOffset a |0|-based offset from the position to which this iterator currently points\n       */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "stepBackwardBy",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "int32_t",
                      "name": "anOffset"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n       * Test if |anotherIterator| points to the same position in the underlying container or sequence.\n       *\n       * The result is undefined if |anotherIterator| was not created by or for the same underlying container or sequence.\n       *\n       * @param anotherIterator another iterator to compare against, created by or for the same underlying container or sequence\n       * @result true if |anotherIterator| points to the same position in the underlying container or sequence\n       */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "boolean",
                  "name": "isEqualTo",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsISupports",
                      "name": "anotherIterator"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n       * Create a new iterator pointing to the same position in the underlying container or sequence to which this iterator currently points.\n       * The returned iterator is suitable for use in a subsequent call to |isEqualTo()| against this iterator.\n       *\n       * @result a new iterator pointing at the same position in the same underlying container or sequence as this iterator\n       */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "nsISupports",
                  "name": "clone",
                  "params": null,
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n\n",
    "%{C++\n%}\n"
  ]
}