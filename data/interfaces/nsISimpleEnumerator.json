{
  "kind": "idlfile",
  "contents": [
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */"
      }
    },
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */"
      }
    },
    {
      "kind": "INCLUDE",
      "ident": "nsISupports"
    },
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/**\n * Used to enumerate over elements defined by its implementor.\n * Although hasMoreElements() can be called independently of getNext(),\n * getNext() must be pre-ceeded by a call to hasMoreElements(). There is\n * no way to \"reset\" an enumerator, once you obtain one.\n *\n * @version 1.0\n */"
      }
    },
    {
      "kind": "interface_main",
      "doc_comment": {
        "kind": "DOC_COMMENT",
        "contents": "/**\n * A wrapper for an nsISimpleEnumerator instance which implements the\n * JavaScript iteration protocol.\n */"
      },
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "4432e8ae-d4d3-42a6-a4d1-829f1c29512b"
              }
            }
          }
        ]
      },
      "name": "nsIJSEnumerator",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "symbol",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "nsIJSEnumerator",
                  "name": "iterator",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "implicit_jscontext",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "jsval",
                  "name": "next",
                  "params": null,
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "796f340d-0a2a-490b-9c60-640765e99782"
              }
            }
          }
        ]
      },
      "name": "nsISimpleEnumeratorBase",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Returns a JavaScript iterator for all remaining entries in the enumerator.\n   * Each entry is typically queried to the appropriate interface for the\n   * enumerator.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "symbol",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "nsIJSEnumerator",
                  "name": "iterator",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Returns JavaScript iterator for all remaining entries in the enumerator.\n   * Each entry is queried only to the supplied interface. If any element\n   * fails to query to that interface, the error is propagated to the caller.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "nsIJSEnumerator",
                  "name": "entries",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIIDRef",
                      "name": "aIface"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "D1899240-F9D2-11D2-BDD6-000064657374"
              }
            }
          }
        ]
      },
      "name": "nsISimpleEnumerator",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISimpleEnumeratorBase"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Called to determine whether or not the enumerator has\n   * any elements that can be returned via getNext(). This method\n   * is generally used to determine whether or not to initiate or\n   * continue iteration over the enumerator, though it can be\n   * called without subsequent getNext() calls. Does not affect\n   * internal state of enumerator.\n   *\n   * @see getNext()\n   * @return true if there are remaining elements in the enumerator.\n   *         false if there are no more elements in the enumerator.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "boolean",
                  "name": "hasMoreElements",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Called to retrieve the next element in the enumerator. The \"next\"\n   * element is the first element upon the first call. Must be\n   * pre-ceeded by a call to hasMoreElements() which returns PR_TRUE.\n   * This method is generally called within a loop to iterate over\n   * the elements in the enumerator.\n   *\n   * @see hasMoreElements()\n   * @throws NS_ERROR_FAILURE if there are no more elements\n   *                          to enumerate.\n   * @return the next element in the enumeration.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "nsISupports",
                  "name": "getNext",
                  "params": null,
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n"
  ]
}