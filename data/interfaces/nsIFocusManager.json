{
  "kind": "idlfile",
  "contents": [
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */"
      }
    },
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */"
      }
    },
    {
      "kind": "INCLUDE",
      "ident": "domstubs"
    },
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "mozIDOMWindowProxy",
      "base": null,
      "body": null
    },
    "\n\n",
    {
      "kind": "webidl"
    },
    "\n",
    {
      "kind": "webidl"
    },
    "\n",
    {
      "kind": "webidl"
    },
    "\n\n",
    {
      "kind": "native"
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": {
        "kind": "DOC_COMMENT",
        "contents": "/**\n * The focus manager deals with all focus related behaviour. Only one element\n * in the entire application may have the focus at a time; this element\n * receives any keyboard events. While there is only one application-wide\n * focused element, each nsIDOMWindow maintains a reference to the element\n * that would be focused if the window was active.\n *\n * If the window's reference is to a frame element (iframe, browser,\n * editor), then the child window contains the element that is currently\n * focused. If the window's reference is to a root element, then the root is\n * focused. If a window's reference is null, then no element is focused, yet\n * the window is still focused.\n *\n * The blur event is fired on an element when it loses the application focus.\n * After this blur event, if the focus is moving away from a document, two\n * additional blur events are fired on the old document and window containing\n * the focus respectively.\n *\n * When a new document is focused, two focus events are fired on the new\n * document and window respectively. Then the focus event is fired on an\n * element when it gains the application focus.\n *\n * A special case is that the root element may be focused, yet does not\n * receive the element focus and blur events. Instead a focus outline may be\n * drawn around the document.\n *\n * Blur and focus events do not bubble as per the W3C DOM Events spec.\n */"
      },
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "86e1f1e1-365d-493b-b52a-a649f3f311dc"
              }
            }
          }
        ]
      },
      "name": "nsIFocusManager",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * The most active (frontmost) window, or null if no window that is part of\n   * the application is active. Do not use outside the parent process.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "mozIDOMWindowProxy",
                  "name": "activeWindow"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * In the parent process: The BrowsingContext corresponding to activeWindow.\n   * In content processes: The top-level Web content browsing context that\n   * focus is in if the application is active and focus is in Web content.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "BrowsingContext",
                  "name": "activeBrowsingContext"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * The child window within the activeWindow that is focused. This will\n   * always be activeWindow, a child window of activeWindow or null if no\n   * child window is focused. Setting the focusedWindow changes the focused\n   * window and raises the toplevel window it is in. If the current focus\n   * within the new focusedWindow is a frame element, then the focusedWindow\n   * will actually be set to the child window and the current element within\n   * that set as the focused element. This process repeats downwards until a\n   * non-frame element is found.\n   * The setter for this attribute defaults to CallerType::System.\n   * If focus is in another process, this is null in content processes and\n   * the closest ancestor in the parent process.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "setter_can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": null,
                  "type": "mozIDOMWindowProxy",
                  "name": "focusedWindow"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Parent-process only: The content BrowsingContext that currently has focus,\n   * if any. Note this can be different from activeBrowsingContext in the case\n   * of subframes.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "BrowsingContext",
                  "name": "focusedContentBrowsingContext"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * The element that is currently focused. This will always be an element\n   * within the document loaded in focusedWindow or null if no element in that\n   * document is focused.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "Element",
                  "name": "focusedElement"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Returns the method that was used to focus the element in window. This\n   * will either be 0, FLAG_BYMOUSE or FLAG_BYKEY. If window is null, then\n   * the current focusedWindow will be used by default. This has the result\n   * of retrieving the method that was used to focus the currently focused\n   * element.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "uint32_t",
                  "name": "getLastFocusMethod",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "mozIDOMWindowProxy",
                      "name": "window"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Changes the focused element reference within the window containing\n   * aElement to aElement or potentially redirects it to an anonymous\n   * descendant of it (e.g., for `<input type=\"number\">` the focus is redirected\n   * to its descendant `<input type=\"text\">`).\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "setFocus",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "Element",
                      "name": "aElement"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "unsigned long",
                          "name": "aFlags"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Move the focus to another element. If aStartElement is specified, then\n   * movement is done relative to aStartElement. If aStartElement is null,\n   * then movement is done relative to the currently focused element. If no\n   * element is focused, focus the first focusable element within the\n   * document (or the last focusable element if aType is MOVEFOCUS_END). This\n   * method is equivalent to setting the focusedElement to the new element.\n   *\n   * Specifying aStartElement and using MOVEFOCUS_LAST is not currently\n   * implemented.\n   *\n   * If no element is found, and aType is either MOVEFOCUS_ROOT or\n   * MOVEFOCUS_CARET, then the focus is cleared. If aType is any other value,\n   * the focus is not changed.\n   *\n   * Returns the element that was focused (see setFocus). The return value\n   * may be null if focus was moved into a child process.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "Element",
                  "name": "moveFocus",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "mozIDOMWindowProxy",
                      "name": "aWindow"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "Element",
                          "name": "aStartElement"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "unsigned long",
                          "name": "aType"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "unsigned long",
                          "name": "aFlags"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Clears the focused element within aWindow. If the current focusedWindow\n   * is a descendant of aWindow, sets the current focusedWindow to aWindow.\n   *\n   * @throws NS_ERROR_INVALID_ARG if aWindow is null\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "clearFocus",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "mozIDOMWindowProxy",
                      "name": "aWindow"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Returns the currently focused element within aWindow. If aWindow is equal\n   * to the current value of focusedWindow, then the returned element will be\n   * the application-wide focused element (the value of focusedElement). The\n   * return value will be null if no element is focused.\n   *\n   * If aDeep is true, then child frames are traversed and the return value\n   * may be the element within a child descendant window that is focused. If\n   * aDeep if false, then the return value will be the frame element if the\n   * focus is in a child frame.\n   *\n   * aFocusedWindow will be set to the currently focused descendant window of\n   * aWindow, or to aWindow if aDeep is false. This will be set even if no\n   * element is focused.\n   *\n   * @throws NS_ERROR_INVALID_ARG if aWindow is null\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "Element",
                  "name": "getFocusedElementForWindow",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "mozIDOMWindowProxy",
                      "name": "aWindow"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "boolean",
                          "name": "aDeep"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "out",
                          "type": "mozIDOMWindowProxy",
                          "name": "aFocusedWindow"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Moves the selection caret within aWindow to the current focus.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "moveCaretToFocus",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "mozIDOMWindowProxy",
                      "name": "aWindow"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/***\n   * Check if given element (or potentially a descendant, see setFocus) is\n   * focusable.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "boolean",
                  "name": "elementIsFocusable",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "Element",
                      "name": "aElement"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "unsigned long",
                          "name": "aFlags"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/*\n   * Raise the window when switching focus\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "FLAG_RAISE",
                  "value": "1"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Do not scroll the element to focus into view.\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "FLAG_NOSCROLL",
                  "value": "2"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * If attempting to change focus in a window that is not focused, do not\n   * switch focus to that window. Instead, just update the focus within that\n   * window and leave the application focus as is. This flag will have no\n   * effect if a child window is focused and an attempt is made to adjust the\n   * focus in an ancestor, as the frame must be switched in this case.\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "FLAG_NOSWITCHFRAME",
                  "value": "4"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * This flag is only used when passed to moveFocus. If set, focus is never\n   * moved to the parent frame of the starting element's document, instead\n   * iterating around to the beginning of that document again. Child frames\n   * are navigated as normal.\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "FLAG_NOPARENTFRAME",
                  "value": "8"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * This flag is used for window and element focus operations to signal\n   * wether the caller is system or non system.\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "FLAG_NONSYSTEMCALLER",
                  "value": "16"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Focus is changing due to a mouse operation, for instance the mouse was\n   * clicked on an element.\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "FLAG_BYMOUSE",
                  "value": "0x1000"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Focus is changing due to a key operation, for instance pressing the tab\n   * key. This flag would normally be passed when MOVEFOCUS_FORWARD or\n   * MOVEFOCUS_BACKWARD is used.\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "FLAG_BYKEY",
                  "value": "0x2000"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Focus is changing due to a call to MoveFocus. This flag will be implied\n   * when MoveFocus is called except when one of the other mechanisms (mouse\n   * or key) is specified, or when the type is MOVEFOCUS_ROOT or\n   * MOVEFOCUS_CARET.\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "FLAG_BYMOVEFOCUS",
                  "value": "0x4000"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Do not show a ring around the element to focus, if this is not a text\n   * control, regardless of other state.\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "FLAG_NOSHOWRING",
                  "value": "0x8000"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Always show the focus ring or other indicator of focus, regardless of\n   * other state. Overrides FLAG_NOSHOWRING.\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "FLAG_SHOWRING",
                  "value": "0x100000"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Focus is changing due to a touch operation that generated a mouse event.\n   * Normally used in conjunction with FLAG_BYMOUSE.\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "FLAG_BYTOUCH",
                  "value": "0x200000"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** Focus is changing due to a JS focus() call or similar operation. */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "FLAG_BYJS",
                  "value": "0x400000"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** Focus is changing due to a long press operation by touch or mouse. */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "FLAG_BYLONGPRESS",
                  "value": "0x800000"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** Mask with all the focus methods. */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "METHOD_MASK",
                  "value": {
                    "kind": "num_$1"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** Mask with all the focus methods, plus the SHOW / NOSHOWRING flags. */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "METHODANDRING_MASK",
                  "value": {
                    "kind": "num_$1"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  },
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** move focus forward one element, used when pressing TAB */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "MOVEFOCUS_FORWARD",
                  "value": "1"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** move focus backward one element, used when pressing Shift+TAB */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "MOVEFOCUS_BACKWARD",
                  "value": "2"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** move focus forward to the next frame document, used when pressing F6 */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "MOVEFOCUS_FORWARDDOC",
                  "value": "3"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** move focus forward to the previous frame document, used when pressing Shift+F6 */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "MOVEFOCUS_BACKWARDDOC",
                  "value": "4"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** move focus to the first focusable element */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "MOVEFOCUS_FIRST",
                  "value": "5"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** move focus to the last focusable element */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "MOVEFOCUS_LAST",
                  "value": "6"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** move focus to the root element in the document */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "MOVEFOCUS_ROOT",
                  "value": "7"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** move focus to a link at the position of the caret. This is a special value used to\n   *  focus links as the caret moves over them in caret browsing mode.\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "MOVEFOCUS_CARET",
                  "value": "8"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** move focus to the first focusable document */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "MOVEFOCUS_FIRSTDOC",
                  "value": "9"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** move focus to the last focusable document */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "MOVEFOCUS_LASTDOC",
                  "value": "10"
                }
              }
            }
          ]
        }
      }
    },
    "\n"
  ]
}