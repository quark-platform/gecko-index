{
  "kind": "idlfile",
  "contents": [
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */"
      }
    },
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */"
      }
    },
    {
      "kind": "INCLUDE",
      "ident": "nsISupports"
    },
    "%{ C++\nnamespace mozilla {\nclass EditTransactionBase;\n}\ntemplate <typename T>\nstruct already_AddRefed;\n%}\n\n",
    {
      "kind": "native"
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": {
        "kind": "DOC_COMMENT",
        "contents": "/*\n * The nsITransaction interface.\n * <P>\n * This interface is implemented by an object that needs to\n * execute some behavior that must be tracked by the transaction manager.\n */"
      },
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "58e330c1-7b48-11d2-98b9-00805f297d89"
              }
            }
          }
        ]
      },
      "name": "nsITransaction",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Executes the transaction.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "doTransaction",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Restores the state to what it was before the transaction was executed.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "undoTransaction",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Executes the transaction again. Can only be called on a transaction that\n   * was previously undone.\n   * <P>\n   * In most cases, the redoTransaction() method will actually call the\n   * doTransaction() method to execute the transaction again.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "redoTransaction",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * The transaction's transient state. This attribute is checked by\n   * the transaction manager after the transaction's Execute() method is called.\n   * If the transient state is false, a reference to the transaction is\n   * held by the transaction manager so that the transactions' undoTransaction()\n   * and redoTransaction() methods can be called. If the transient state is\n   * true, the transaction manager returns immediately after the transaction's\n   * doTransaction() method is called, no references to the transaction are\n   * maintained. Transient transactions cannot be undone or redone by the\n   * transaction manager.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "boolean",
                  "name": "isTransient"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Attempts to merge a transaction into \"this\" transaction. Both transactions\n   * must be in their undo state, doTransaction() methods already called. The\n   * transaction manager calls this method to coalesce a new transaction with\n   * the transaction on the top of the undo stack.\n   * This method returns a boolean value that indicates the merge result.\n   * A true value indicates that the transactions were merged successfully,\n   * a false value if the merge was not possible or failed. If true,\n   * the transaction manager will Release() the new transacton instead of\n   * pushing it on the undo stack.\n   * @param aTransaction the previously executed transaction to merge.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "boolean",
                  "name": "merge",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsITransaction",
                      "name": "aTransaction"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "EditTransactionBasePtr",
                  "name": "getAsEditTransactionBase",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": "%{ C++\n  inline already_AddRefed<mozilla::EditTransactionBase>\n  GetAsEditTransactionBase();\n%}\n"
              }
            }
          ]
        }
      }
    },
    "\n"
  ]
}