{
  "kind": "idlfile",
  "contents": [
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */"
      }
    },
    {
      "kind": "INCLUDE",
      "ident": "nsISupports"
    },
    {
      "kind": "INCLUDE",
      "ident": "nsICommandLine"
    },
    {
      "kind": "native"
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": {
        "kind": "DOC_COMMENT",
        "contents": "/**\n * Extension of nsICommandLine that allows for initialization of new command lines\n * and running the command line actions by processing the command line handlers.\n *\n * @status INTERNAL - This interface is not meant for use by embedders, and is\n *                    not intended to be frozen. If you are an embedder and need\n *                    functionality provided by this interface, talk to Benjamin\n *                    Smedberg <benjamin@smedbergs.us>.\n */"
      },
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "uuid",
          "param": {
            "kind": "attribute_$0",
            "value": "c9f2996c-b25a-4d3d-821f-4cd0c4bc8afb"
          }
        },
        "other_attributes": []
      },
      "name": "nsICommandLineRunner",
      "base": {
        "kind": "ifacebase",
        "extends": "nsICommandLine"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * This method assumes a native character set, and is meant to be called\n   * with the argc/argv passed to main(). Talk to bsmedberg if you need to\n   * create a command line using other data. argv will not be altered in any\n   * way.\n   *\n   * On Windows, the \"native\" character set is UTF-8, not the native codepage.\n   *\n   * @param workingDir The working directory for resolving file and URI paths.\n   *                   Can be null, in which case resolving files will not\n   *                   work, and only absolute URIs will be resolvable.\n   * @param state      The nsICommandLine.state flag.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "init",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "long",
                      "name": "argc"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "nsArgvArray",
                          "name": "argv"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "nsIFile",
                          "name": "workingDir"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "unsigned long",
                          "name": "state"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Process the command-line handlers in the proper order, calling \"handle()\" on\n   * each.\n   *\n   * @throws NS_ERROR_ABORT if any handler throws NS_ERROR_ABORT. All other errors\n   *         thrown by handlers will be silently ignored.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "run",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Process and combine the help text provided by each command-line handler.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "AUTF8String",
                  "name": "helpText"
                }
              }
            }
          ]
        }
      }
    },
    "\n"
  ]
}