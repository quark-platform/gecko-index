{
  "kind": "idlfile",
  "contents": [
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */"
      }
    },
    {
      "kind": "INCLUDE",
      "ident": "nsISupports"
    },
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIFile",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIURI",
      "base": null,
      "body": null
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": {
        "kind": "DOC_COMMENT",
        "contents": "/**\n * Represents the command line used to invoke a XUL application. This may be the\n * original command-line of this instance, or a command line remoted from another\n * instance of the application.\n *\n * DEFINITIONS:\n * \"arguments\" are any values found on the command line.\n * \"flags\" are switches. In normalized form they are preceded by a single dash.\n * Some flags may take \"parameters\", e.g. \"--url <param>\".\n */"
      },
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "bc3173bd-aa46-46a0-9d25-d9867a9659b6"
              }
            }
          }
        ]
      },
      "name": "nsICommandLine",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Number of arguments in the command line. The application name is not\n   * part of the command line.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "long",
                  "name": "length"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Get an argument from the array of command-line arguments.\n   *\n   * On windows, flags of the form /flag are normalized to -flag. /flag:param\n   * are normalized to -flag param.\n   *\n   * On *nix and mac flags of the form --flag are normalized to -flag. --flag=param\n   * are normalized to the form -flag param.\n   *\n   * @param aIndex The argument to retrieve. This index is 0-based, and does\n   *               not include the application name.\n   * @return       The indexth argument.\n   * @throws       NS_ERROR_ILLEGAL_VALUE if aIndex is out of bounds.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "AString",
                  "name": "getArgument",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "long",
                      "name": "aIndex"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Find a command-line flag.\n   *\n   * @param aFlag          The flag name to locate. Do not include the initial\n   *                       hyphen.\n   * @param aCaseSensitive Whether to do case-sensitive comparisons.\n   * @return               The position of the flag in the command line, or -1 if\n   *                       not found.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "long",
                  "name": "findFlag",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "AString",
                      "name": "aFlag"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "boolean",
                          "name": "aCaseSensitive"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Remove arguments from the command line. This normally occurs after\n   * a handler has processed the arguments.\n   *\n   * @param aStart  Index to begin removing.\n   * @param aEnd    Index to end removing, inclusive.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "removeArguments",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "long",
                      "name": "aStart"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "long",
                          "name": "aEnd"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * A helper method which will find a flag and remove it in one step.\n   *\n   * @param aFlag  The flag name to find and remove.\n   * @param aCaseSensitive Whether to do case-sensitive comparisons.\n   * @return       Whether the flag was found.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "boolean",
                  "name": "handleFlag",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "AString",
                      "name": "aFlag"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "boolean",
                          "name": "aCaseSensitive"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Find a flag with a parameter and remove both. This is a helper\n   * method that combines \"findFlag\" and \"removeArguments\" in one step.\n   *\n   * @return   null (a void astring) if the flag is not found. The parameter value\n   *           if found. Note that null and the empty string are not the same.\n   * @throws   NS_ERROR_INVALID_ARG if the flag exists without a parameter\n   *\n   * @param aFlag The flag name to find and remove.\n   * @param aCaseSensitive Whether to do case-sensitive flag search.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "AString",
                  "name": "handleFlagWithParam",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "AString",
                      "name": "aFlag"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "boolean",
                          "name": "aCaseSensitive"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * The type of command line being processed.\n   *\n   * STATE_INITIAL_LAUNCH  is the first launch of the application instance.\n   * STATE_REMOTE_AUTO     is a remote command line automatically redirected to\n   *                       this instance.\n   * STATE_REMOTE_EXPLICIT is a remote command line explicitly redirected to\n   *                       this instance using xremote/windde/appleevents.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "unsigned long",
                  "name": "state"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "STATE_INITIAL_LAUNCH",
                  "value": "0"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "STATE_REMOTE_AUTO",
                  "value": "1"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "STATE_REMOTE_EXPLICIT",
                  "value": "2"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * There may be a command-line handler which performs a default action if\n   * there was no explicit action on the command line (open a default browser\n   * window, for example). This flag allows the default action to be prevented.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": null,
                  "type": "boolean",
                  "name": "preventDefault"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * The working directory for this command line. Use this property instead\n   * of the working directory for the current process, since a redirected\n   * command line may have had a different working directory.\n   *\n   * @throws NS_ERROR_NOT_INITIALIZED if the working directory was not specified.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "nsIFile",
                  "name": "workingDirectory"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Resolve a file-path argument into an nsIFile. This method gracefully\n   * handles relative or absolute file paths, according to the working\n   * directory of this command line.\n   * If the path is relative and there is no working directory available,\n   * this may return null.\n   *\n   * @param aArgument  The path to resolve.\n   *\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "nsIFile",
                  "name": "resolveFile",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "AString",
                      "name": "aArgument"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Resolves a URI argument into a URI. This method has platform-specific\n   * logic for converting an absolute URI or a relative file-path into the\n   * appropriate URI object; it gracefully handles win32 C:\\ paths which would\n   * confuse the ioservice if passed directly.\n   *\n   * @param aArgument  The command-line argument to resolve.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "nsIURI",
                  "name": "resolveURI",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "AString",
                      "name": "aArgument"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n"
  ]
}