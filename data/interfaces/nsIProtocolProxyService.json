{
  "kind": "idlfile",
  "contents": [
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* -*- Mode: IDL; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */"
      }
    },
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* vim:set ts=4 sw=4 sts=4 et: */"
      }
    },
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */"
      }
    },
    {
      "kind": "INCLUDE",
      "ident": "nsISupports"
    },
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsICancelable",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIProtocolProxyCallback",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIProtocolProxyFilter",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIProtocolProxyChannelFilter",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIProxyInfo",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIChannel",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIURI",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsISerialEventTarget",
      "base": null,
      "body": null
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "77984234-aad5-47fc-a412-03398c2134a5"
              }
            }
          }
        ]
      },
      "name": "nsIProxyConfigChangedCallback",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * Called when one of the following conditions are changed.\n     * 1. System proxy settings changed.\n     * 2. A proxy filter is registered or unregistered.\n     * 3. Proxy related prefs changed.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "onProxyConfigChanged",
                  "params": null,
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": {
        "kind": "DOC_COMMENT",
        "contents": "/**\n * nsIProtocolProxyService provides methods to access information about\n * various network proxies.\n */"
      },
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "builtinclass",
              "param": null
            }
          },
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "ef57c8b6-e09d-4cd4-9222-2a5d2402e15d"
              }
            }
          }
        ]
      },
      "name": "nsIProtocolProxyService",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** Flag 1 << 0 is unused **/"
                  },
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * When the proxy configuration is manual this flag may be passed to the\n     * resolve and asyncResolve methods to request to prefer the SOCKS proxy\n     * to HTTP ones.\n     */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "RESOLVE_PREFER_SOCKS_PROXY",
                  "value": {
                    "kind": "num_$2"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * When the proxy configuration is manual this flag may be passed to the\n     * resolve and asyncResolve methods to request to not analyze the uri's\n     * scheme specific proxy. When this flag is set the main HTTP proxy is the\n     * preferred one.\n     *\n     * NOTE: if RESOLVE_PREFER_SOCKS_PROXY is set then the SOCKS proxy is\n     *       the preferred one.\n     *\n     * NOTE: if RESOLVE_PREFER_HTTPS_PROXY is set then the HTTPS proxy\n     *       is the preferred one.\n     */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "RESOLVE_IGNORE_URI_SCHEME",
                  "value": {
                    "kind": "num_$2"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * When the proxy configuration is manual this flag may be passed to the\n     * resolve and asyncResolve methods to request to prefer the HTTPS proxy\n     * to the others HTTP ones.\n     *\n     * NOTE: RESOLVE_PREFER_SOCKS_PROXY takes precedence over this flag.\n     *\n     * NOTE: This flag implies RESOLVE_IGNORE_URI_SCHEME.\n     */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "RESOLVE_PREFER_HTTPS_PROXY",
                  "value": {
                    "kind": "num_$1"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * When the proxy configuration is manual this flag may be passed to the\n     * resolve and asyncResolve methods to that all methods will be tunneled via\n     * CONNECT through the http proxy.\n     */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "RESOLVE_ALWAYS_TUNNEL",
                  "value": {
                    "kind": "unary_$0"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * This method returns via callback a nsIProxyInfo instance that identifies\n     * a proxy to be used for the given channel.  Otherwise, this method returns\n     * null indicating that a direct connection should be used.\n     *\n     * @param aChannelOrURI\n     *        The channel for which a proxy is to be found, or, if no channel is\n     *        available, a URI indicating the same. This method will return\n     *        NS_ERROR_NOINTERFACE if this argument isn't either an nsIURI or an\n     *        nsIChannel.\n     * @param aFlags\n     *        A bit-wise combination of the RESOLVE_ flags defined above.  Pass\n     *        0 to specify the default behavior.  Any additional bits that do\n     *        not correspond to a RESOLVE_ flag are reserved for future use.\n     * @param aCallback\n     *        The object to be notified when the result is available.\n     * @param aMainThreadTarget\n     *        A labelled event target for dispatching runnables to main thread.\n     *\n     * @return An object that can be used to cancel the asychronous operation.\n     *         If canceled, the cancelation status (aReason) will be forwarded\n     *         to the callback's onProxyAvailable method via the aStatus param.\n     *\n     * NOTE: If this proxy is unavailable, getFailoverForProxy may be called\n     * to determine the correct secondary proxy to be used.\n     *\n     * NOTE: If the protocol handler for the given URI supports\n     * nsIProxiedProtocolHandler, then the nsIProxyInfo instance returned from\n     * resolve may be passed to the newProxiedChannel method to create a\n     * nsIChannel to the given URI that uses the specified proxy.\n     *\n     * NOTE: However, if the nsIProxyInfo type is \"http\", then it means that\n     * the given URI should be loaded using the HTTP protocol handler, which\n     * also supports nsIProxiedProtocolHandler.\n     *\n     * @see nsIProxiedProtocolHandler::newProxiedChannel\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "nsICancelable",
                  "name": "asyncResolve",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsISupports",
                      "name": "aChannelOrURI"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "unsigned long",
                          "name": "aFlags"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "nsIProtocolProxyCallback",
                          "name": "aCallback"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": {
                            "kind": "attributes",
                            "first_attribute": {
                              "kind": "attribute",
                              "name": "optional",
                              "param": null
                            },
                            "other_attributes": []
                          },
                          "refType": "in",
                          "type": "nsISerialEventTarget",
                          "name": "aMainThreadTarget"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * This method may be called to construct a nsIProxyInfo instance from\n     * the given parameters.  This method may be useful in conjunction with\n     * nsISocketTransportService::createTransport for creating, for example,\n     * a SOCKS connection.\n     *\n     * @param aType\n     *        The proxy type.  This is a string value that identifies the proxy\n     *        type.  Standard values include:\n     *          \"http\"    - specifies a HTTP proxy\n     *          \"https\"   - specifies HTTP proxying over TLS connection to proxy\n     *          \"socks\"   - specifies a SOCKS version 5 proxy\n     *          \"socks4\"  - specifies a SOCKS version 4 proxy\n     *          \"direct\"  - specifies a direct connection (useful for failover)\n     *        The type name is case-insensitive.  Other string values may be\n     *        possible, and new types may be defined by a future version of\n     *        this interface.\n     * @param aHost\n     *        The proxy hostname or IP address.\n     * @param aPort\n     *        The proxy port.\n     * @param aFlags\n     *        Flags associated with this connection.  See nsIProxyInfo.idl\n     *        for currently defined flags.\n     * @param aFailoverTimeout\n     *        Specifies the length of time (in seconds) to ignore this proxy if\n     *        this proxy fails.  Pass UINT32_MAX to specify the default\n     *        timeout value, causing nsIProxyInfo::failoverTimeout to be\n     *        assigned the default value.\n     * @param aFailoverProxy\n     *        Specifies the next proxy to try if this proxy fails.  This\n     *        parameter may be null.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "nsIProxyInfo",
                  "name": "newProxyInfo",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "ACString",
                      "name": "aType"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "AUTF8String",
                          "name": "aHost"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "long",
                          "name": "aPort"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "ACString",
                          "name": "aProxyAuthorizationHeader"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "ACString",
                          "name": "aConnectionIsolationKey"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "unsigned long",
                          "name": "aFlags"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "unsigned long",
                          "name": "aFailoverTimeout"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "nsIProxyInfo",
                          "name": "aFailoverProxy"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * This method may be called to construct a nsIProxyInfo instance for\n     * with the specified username and password.\n     * Currently implemented for SOCKS proxies only.\n     * @param aType\n     *        The proxy type.  This is a string value that identifies the proxy\n     *        type.  Standard values include:\n     *          \"socks\"   - specifies a SOCKS version 5 proxy\n     *          \"socks4\"  - specifies a SOCKS version 4 proxy\n     *        The type name is case-insensitive.  Other string values may be\n     *        possible, and new types may be defined by a future version of\n     *        this interface.\n     * @param aHost\n     *        The proxy hostname or IP address.\n     * @param aPort\n     *        The proxy port.\n     * @param aUsername\n     *        The proxy username\n     * @param aPassword\n     *        The proxy password\n     * @param aFlags\n     *        Flags associated with this connection.  See nsIProxyInfo.idl\n     *        for currently defined flags.\n     * @param aFailoverTimeout\n     *        Specifies the length of time (in seconds) to ignore this proxy if\n     *        this proxy fails.  Pass UINT32_MAX to specify the default\n     *        timeout value, causing nsIProxyInfo::failoverTimeout to be\n     *        assigned the default value.\n     * @param aFailoverProxy\n     *        Specifies the next proxy to try if this proxy fails.  This\n     *        parameter may be null.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "nsIProxyInfo",
                  "name": "newProxyInfoWithAuth",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "ACString",
                      "name": "aType"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "AUTF8String",
                          "name": "aHost"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "long",
                          "name": "aPort"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "ACString",
                          "name": "aUsername"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "ACString",
                          "name": "aPassword"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "ACString",
                          "name": "aProxyAuthorizationHeader"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "ACString",
                          "name": "aConnectionIsolationKey"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "unsigned long",
                          "name": "aFlags"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "unsigned long",
                          "name": "aFailoverTimeout"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "nsIProxyInfo",
                          "name": "aFailoverProxy"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * If the proxy identified by aProxyInfo is unavailable for some reason,\n     * this method may be called to access an alternate proxy that may be used\n     * instead.  As a side-effect, this method may affect future result values\n     * from resolve/asyncResolve as well as from getFailoverForProxy.\n     *\n     * @param aProxyInfo\n     *        The proxy that was unavailable.\n     * @param aURI\n     *        The URI that was originally passed to resolve/asyncResolve.\n     * @param aReason\n     *        The error code corresponding to the proxy failure.  This value\n     *        may be used to tune the delay before this proxy is used again.\n     *\n     * @throw NS_ERROR_NOT_AVAILABLE if there is no alternate proxy available.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "nsIProxyInfo",
                  "name": "getFailoverForProxy",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIProxyInfo",
                      "name": "aProxyInfo"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "nsIURI",
                          "name": "aURI"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "nsresult",
                          "name": "aReason"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * This method may be used to register a proxy filter instance.  Each proxy\n     * filter is registered with an associated position that determines the\n     * order in which the filters are applied (starting from position 0).  When\n     * resolve/asyncResolve is called, it generates a list of proxies for the\n     * given URI, and then it applies the proxy filters.  The filters have the\n     * opportunity to modify the list of proxies.\n     *\n     * If two filters register for the same position, then the filters will be\n     * visited in the order in which they were registered.\n     *\n     * If the filter is already registered, then its position will be updated.\n     *\n     * After filters have been run, any disabled or disallowed proxies will be\n     * removed from the list.  A proxy is disabled if it had previously failed-\n     * over to another proxy (see getFailoverForProxy).  A proxy is disallowed,\n     * for example, if it is a HTTP proxy and the nsIProtocolHandler for the\n     * queried URI does not permit proxying via HTTP.\n     *\n     * If a nsIProtocolHandler disallows all proxying, then filters will never\n     * have a chance to intercept proxy requests for such URLs.\n     *\n     * @param aFilter\n     *        The nsIProtocolProxyFilter instance to be registered.\n     * @param aPosition\n     *        The position of the filter.\n     *\n     * NOTE: It is possible to construct filters that compete with one another\n     * in undesirable ways.  This API does not attempt to protect against such\n     * problems.  It is recommended that any extensions that choose to call\n     * this method make their position value configurable at runtime (perhaps\n     * via the preferences service).\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "registerFilter",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIProtocolProxyFilter",
                      "name": "aFilter"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "unsigned long",
                          "name": "aPosition"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * Similar to registerFilter, but accepts an nsIProtocolProxyChannelFilter,\n     * which selects proxies according to channel rather than URI.\n     *\n     * @param aFilter\n     *        The nsIProtocolProxyChannelFilter instance to be registered.\n     * @param aPosition\n     *        The position of the filter.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "registerChannelFilter",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIProtocolProxyChannelFilter",
                      "name": "aFilter"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "unsigned long",
                          "name": "aPosition"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * This method may be used to unregister a proxy filter instance.  All\n     * filters will be automatically unregistered at XPCOM shutdown.\n     *\n     * @param aFilter\n     *        The nsIProtocolProxyFilter instance to be unregistered.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "unregisterFilter",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIProtocolProxyFilter",
                      "name": "aFilter"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * This method may be used to unregister a proxy channel filter instance.  All\n     * filters will be automatically unregistered at XPCOM shutdown.\n     *\n     * @param aFilter\n     *        The nsIProtocolProxyChannelFilter instance to be unregistered.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "unregisterChannelFilter",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIProtocolProxyChannelFilter",
                      "name": "aFilter"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * This method is used to register a nsIProxyConfigChangedCallback.\n     *\n     * @param aCallback\n     *        The aCallback instance to be registered.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "addProxyConfigCallback",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIProxyConfigChangedCallback",
                      "name": "aCallback"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * This method is used to unregister a nsIProxyConfigChangedCallback.\n     *\n     * @param aCallback\n     *        The aCallback instance to be unregistered.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "removeProxyConfigCallback",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIProxyConfigChangedCallback",
                      "name": "aCallback"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * This method is used internal only. Called when proxy config is changed.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "notifyProxyConfigChangedInternal",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n      * These values correspond to the possible integer values for the\n      * network.proxy.type preference.\n      */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "PROXYCONFIG_DIRECT",
                  "value": "0"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "PROXYCONFIG_MANUAL",
                  "value": "1"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "PROXYCONFIG_PAC",
                  "value": "2"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "PROXYCONFIG_WPAD",
                  "value": "4"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "PROXYCONFIG_SYSTEM",
                  "value": "5"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n      * This attribute specifies the current type of proxy configuration.\n      */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "unsigned long",
                  "name": "proxyConfigType"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n      * True if there is a PAC download in progress.\n      */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "notxpcom",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "nostdcall",
                          "param": null
                        }
                      }
                    ]
                  },
                  "readonly": "readonly",
                  "type": "boolean",
                  "name": "isPACLoading"
                }
              }
            }
          ]
        }
      }
    },
    "\n"
  ]
}