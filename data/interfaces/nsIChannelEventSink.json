{
  "kind": "idlfile",
  "contents": [
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */"
      }
    },
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* vim:set ts=4 sw=4 sts=4 cin: */"
      }
    },
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */"
      }
    },
    {
      "kind": "INCLUDE",
      "ident": "nsISupports"
    },
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIChannel",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIAsyncVerifyRedirectCallback",
      "base": null,
      "body": null
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": {
        "kind": "DOC_COMMENT",
        "contents": "/**\n * Implement this interface to receive control over various channel events.\n * Channels will try to get this interface from a channel's\n * notificationCallbacks or, if not available there, from the loadGroup's\n * notificationCallbacks.\n *\n * These methods are called before onStartRequest.\n */"
      },
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "0197720d-37ed-4e75-8956-d0d296e4d8a6"
              }
            }
          }
        ]
      },
      "name": "nsIChannelEventSink",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * This is a temporary redirect. New requests for this resource should\n     * continue to use the URI of the old channel.\n     *\n     * The new URI may be identical to the old one.\n     */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "REDIRECT_TEMPORARY",
                  "value": {
                    "kind": "num_$2"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * This is a permanent redirect. New requests for this resource should use\n     * the URI of the new channel (This might be an HTTP 301 reponse).\n     * If this flag is not set, this is a temporary redirect.\n     *\n     * The new URI may be identical to the old one.\n     */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "REDIRECT_PERMANENT",
                  "value": {
                    "kind": "num_$2"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * This is an internal redirect, i.e. it was not initiated by the remote\n     * server, but is specific to the channel implementation.\n     *\n     * The new URI may be identical to the old one.\n     */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "REDIRECT_INTERNAL",
                  "value": {
                    "kind": "num_$2"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * This is a special-cased redirect coming from hitting HSTS upgrade\n     * redirect from http to https only.  In some cases this type of redirect\n     * may be considered as safe despite not being the-same-origin redirect.\n     */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "REDIRECT_STS_UPGRADE",
                  "value": {
                    "kind": "num_$2"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * This is a internal redirect used to handle http authentication retries.\n     * Upon receiving a 401 or 407 the channel gets redirected to a new channel\n     * (same URL) that performs the request with the appropriate credentials.\n     * Auth retry to the server must be made after redirecting to a new channel\n     */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "REDIRECT_AUTH_RETRY",
                  "value": {
                    "kind": "num_$2"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * Called when a redirect occurs. This may happen due to an HTTP 3xx status\n     * code. The purpose of this method is to notify the sink that a redirect\n     * is about to happen, but also to give the sink the right to veto the\n     * redirect by throwing or passing a failure-code in the callback.\n     *\n     * Note that vetoing the redirect simply means that |newChannel| will not\n     * be opened. It is important to understand that |oldChannel| will continue\n     * loading as if it received a HTTP 200, which includes notifying observers\n     * and possibly display or process content attached to the HTTP response.\n     * If the sink wants to prevent this loading it must explicitly deal with\n     * it, e.g. by calling |oldChannel->Cancel()|\n     *\n     * There is a certain freedom in implementing this method:\n     *\n     * If the return-value indicates success, a callback on |callback| is\n     * required. This callback can be done from within asyncOnChannelRedirect\n     * (effectively making the call synchronous) or at some point later\n     * (making the call asynchronous). Repeat: A callback must be done\n     * if this method returns successfully.\n     *\n     * If the return value indicates error (method throws an exception)\n     * the redirect is vetoed and no callback must be done. Repeat: No\n     * callback must be done if this method throws!\n     *\n     * NOTE: originalURI isn't yet set on the new channel when\n     * asyncOnChannelRedirect is called.\n     *\n     * @see nsIAsyncVerifyRedirectCallback::onRedirectVerifyCallback()\n     *\n     * @param oldChannel\n     *        The channel that's being redirected.\n     * @param newChannel\n     *        The new channel. This channel is not opened yet.\n     * @param flags\n     *        Flags indicating the type of redirect. A bitmask consisting\n     *        of flags from above.\n     *        One of REDIRECT_TEMPORARY and REDIRECT_PERMANENT will always be\n     *        set.\n     * @param callback\n     *        Object to inform about the async result of this method\n     *\n     * @throw <any> Throwing an exception will cause the redirect to be\n     *        cancelled\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "asyncOnChannelRedirect",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIChannel",
                      "name": "oldChannel"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "nsIChannel",
                          "name": "newChannel"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "unsigned long",
                          "name": "flags"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "nsIAsyncVerifyRedirectCallback",
                          "name": "callback"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n"
  ]
}