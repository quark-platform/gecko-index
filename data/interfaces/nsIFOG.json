{
  "kind": "idlfile",
  "contents": [
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* -*- Mode: C++; c-basic-offset: 2; indent-tabs-mode: nil; tab-width: 8 -*- */"
      }
    },
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */"
      }
    },
    {
      "kind": "INCLUDE",
      "ident": "nsISupports"
    },
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "98d0e975-9cad-4ce3-ae2f-f878b8be6307"
              }
            }
          }
        ]
      },
      "name": "nsIFOG",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Initialize FOG.\n   *\n   * To be scheduled at some opportune time after the bulk of Firefox startup\n   * has completed.\n   *\n   * @param aDataPathOverride - The path of a custom Glean data path to use\n   *        instead of the profile dir.\n   * @param aAppIdOverride - The application_id to use instead of\n   *        \"firefox.desktop\".\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "initializeFOG",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": {
                        "kind": "attributes",
                        "first_attribute": {
                          "kind": "attribute",
                          "name": "optional",
                          "param": null
                        },
                        "other_attributes": []
                      },
                      "refType": "in",
                      "type": "AUTF8String",
                      "name": "aDataPathOverride"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": {
                            "kind": "attributes",
                            "first_attribute": {
                              "kind": "attribute",
                              "name": "optional",
                              "param": null
                            },
                            "other_attributes": []
                          },
                          "refType": "in",
                          "type": "AUTF8String",
                          "name": "aAppIdOverride"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Register custom pings.\n   *\n   * Ensure all custom pings are registered with Glean.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "registerCustomPings",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Enable or Disable the logging of pings in the Glean SDK.\n   * See https://firefox-source-docs.mozilla.org/toolkit/components/glean/testing.html\n   * for details.\n   *\n   * @param aEnableLogPings - true to enable logging, false to disable.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "setLogPings",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "boolean",
                      "name": "aEnableLogPings"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Set the tag to be applied to pings assembled from now on.\n   * See https://firefox-source-docs.mozilla.org/toolkit/components/glean/testing.html\n   * for details.\n   *\n   * @param aDebugTag - The string tag to apply.\n   *                    If it cannot be applied (e.g it contains characters that are\n   *                    forbidden in HTTP headers) the old value will remain.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "setTagPings",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "ACString",
                      "name": "aDebugTag"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Send the named ping.\n   * See https://firefox-source-docs.mozilla.org/toolkit/components/glean/testing.html\n   * for details.\n   *\n   * @param aPingName - The name of the ping to send. If no ping of that name\n   *                    exists, or the ping is known but cannot be assembled\n   *                    (e.g if it is empty), no ping will be sent.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "sendPing",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "ACString",
                      "name": "aPingName"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Indicate that an experiment is running.\n   * Glean will add an experiment annotation which is sent with pings.\n   * This information is not persisted between runs.\n   *\n   * See `glean_core::Glean::set_experiment_active`.\n   *\n   * Logs on error, but does not throw.\n   *\n   * @param aExperimentId - The id/slug of the experiment.\n   * @param aBranch - The name of the active branch of the experiment.\n   * @param aExtra - Optional string -> string dictionary of extra information.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "implicit_jscontext",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "setExperimentActive",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "ACString",
                      "name": "aExperimentId"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "ACString",
                          "name": "aBranch"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": {
                            "kind": "attributes",
                            "first_attribute": {
                              "kind": "attribute",
                              "name": "optional",
                              "param": null
                            },
                            "other_attributes": []
                          },
                          "refType": "in",
                          "type": "jsval",
                          "name": "aExtra"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Indicate that an experiment is no longer running.\n   *\n   * See `glean_core::Glean::set_experiment_inactive`.\n   *\n   * Logs on error, but does not throw.\n   *\n   * @param aExperimentId - The id/slug of the experiment from setExperimentActive.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "setExperimentInactive",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "ACString",
                      "name": "aExperimentId"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * **Test-only API**\n   *\n   * If the identified experiment was set active and hasn't been set inactive,\n   * this will give you the active branch and extra information.\n   *\n   * @param aExperimentId - The id/slug of the experiment from setExperimentActive.\n   *\n   * @return an object of the form\n   *         {branch: \"branch-name\", extra: {extra_key1: extra_value1, ...}}\n   *         if there is an active experiment. Undefined, otherwise.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "implicit_jscontext",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "jsval",
                  "name": "testGetExperimentData",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "ACString",
                      "name": "aExperimentId"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * ** Test-only Method **\n   *\n   * Flush all data from all child processes.\n   *\n   * @returns A promise that resolves when the data's been stored.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "implicit_jscontext",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "Promise",
                  "name": "testFlushAllChildren",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * ** Test-only Method **\n   *\n   * Reset FOG and the Glean SDK, clearing storage.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "testResetFOG",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": {
                        "kind": "attributes",
                        "first_attribute": {
                          "kind": "attribute",
                          "name": "optional",
                          "param": null
                        },
                        "other_attributes": []
                      },
                      "refType": "in",
                      "type": "AUTF8String",
                      "name": "aDataPathOverride"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": {
                            "kind": "attributes",
                            "first_attribute": {
                              "kind": "attribute",
                              "name": "optional",
                              "param": null
                            },
                            "other_attributes": []
                          },
                          "refType": "in",
                          "type": "AUTF8String",
                          "name": "aAppIdOverride"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * ** Test-only Method **\n   *\n   * Trigger test metric instrumentation on the GPU, RDD or Socket process.\n   *\n   * @param aProcessType - A PROCESS_TYPE_* value from the constants defined\n   *                       in the nsIXULRuntime interface.\n   *\n   * @returns A promise that resolves when the test data has been added.\n   *          The promise will be rejected if the process type is not supported\n   *          or if sending the IPC to the child process fails.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "implicit_jscontext",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "Promise",
                  "name": "testTriggerMetrics",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "unsigned long",
                      "name": "aProcessType"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * ** Test-only Method **\n   *\n   * Register a metric.\n   *\n   * This function is deliberately not too friendly to use. You probably aren't\n   * supposed to use it unless you're testing metric registration itself.\n   *\n   * @param aType - The metric's type.\n   * @param aCategory - The metric's category.\n   * @param aName - The metric's name.\n   * @param aPings - The pings to send it in.\n   * @param aLifetime - The metric's lifetime.\n   * @param aDisabled - Whether the metric, though existing, isn't enabled.\n   * @param aExtraArgs - Optional JSON string of extra args.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "uint32_t",
                  "name": "testRegisterRuntimeMetric",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "ACString",
                      "name": "aType"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "ACString",
                          "name": "aCategory"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "ACString",
                          "name": "aName"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": {
                            "kind": "IDENTIFIER_$0"
                          },
                          "name": "aPings"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "ACString",
                          "name": "aLifetime"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "boolean",
                          "name": "aDisabled"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": {
                            "kind": "attributes",
                            "first_attribute": {
                              "kind": "attribute",
                              "name": "optional",
                              "param": null
                            },
                            "other_attributes": []
                          },
                          "refType": "in",
                          "type": "ACString",
                          "name": "aExtraArgs"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * ** Test-only Method **\n   *\n   * Register a ping.\n   *\n   * This function is deliberately not too friendly to use. You probably aren't\n   * supposed to use it unless you're testing ping registration itself.\n   *\n   * @param aName - The ping's name.\n   * @param aIncludeClientId - Whether the ping should include the client_id.\n   * @param aSendIfEmpty - Whether the ping should send even if empty.\n   * @param aReasonCodes - The list of valid reasons for ping submission.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "uint32_t",
                  "name": "testRegisterRuntimePing",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "ACString",
                      "name": "aName"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "boolean",
                          "name": "aIncludeClientId"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "boolean",
                          "name": "aSendIfEmpty"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": {
                            "kind": "IDENTIFIER_$0"
                          },
                          "name": "aReasonCodes"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n"
  ]
}