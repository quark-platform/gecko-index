{
  "kind": "idlfile",
  "contents": [
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */"
      }
    },
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* vim: set ts=2 et sw=2 tw=80: */"
      }
    },
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */"
      }
    },
    {
      "kind": "INCLUDE",
      "ident": "nsISupports"
    },
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIPrincipal",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIQuotaRequest",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIQuotaCallback",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIQuotaUsageCallback",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIQuotaUsageRequest",
      "base": null,
      "body": null
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "builtinclass",
              "param": null
            }
          },
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "1b3d0a38-8151-4cf9-89fa-4f92c2ef0e7e"
              }
            }
          }
        ]
      },
      "name": "nsIQuotaManagerService",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Asynchronously retrieves storage name and returns it as a plain string.\n   *\n   * If the dom.quotaManager.testing preference is not true the call will be\n   * a no-op.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "must_use",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "nsIQuotaRequest",
                  "name": "storageName",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Check if storage is initialized.\n   *\n   * If the dom.quotaManager.testing preference is not true the call will be\n   * a no-op.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "must_use",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "nsIQuotaRequest",
                  "name": "storageInitialized",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Check if temporary storage is initialized.\n   *\n   * If the dom.quotaManager.testing preference is not true the call will be\n   * a no-op.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "must_use",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "nsIQuotaRequest",
                  "name": "temporaryStorageInitialized",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Initializes storage directory. This can be used in tests to verify\n   * upgrade methods.\n   *\n   * If the dom.quotaManager.testing preference is not true the call will be\n   * a no-op.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "must_use",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "nsIQuotaRequest",
                  "name": "init",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Initializes temporary storage. This can be used in tests to verify\n   * temporary storage initialization.\n   *\n   * If the dom.quotaManager.testing preference is not true the call will be\n   * a no-op.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "must_use",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "nsIQuotaRequest",
                  "name": "initTemporaryStorage",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Initializes persistent origin directory for the given origin. This can be\n   * used in tests to verify origin initialization.\n   *\n   * If the dom.quotaManager.testing preference is not true the call will be\n   * a no-op.\n   *\n   * @param aPrincipal\n   *        A principal for the origin whose directory is to be initialized.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "must_use",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "nsIQuotaRequest",
                  "name": "initializePersistentOrigin",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIPrincipal",
                      "name": "aPrincipal"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Initializes temporary origin directory for the given origin. This can be\n   * used in tests to verify origin initialization.\n   *\n   * If the dom.quotaManager.testing preference is not true the call will be\n   * a no-op.\n   *\n   * @param aPersistenceType\n   *        A string that tells what persistence type of origin will be\n   *        initialized (temporary or default).\n   *\n   * @param aPrincipal\n   *        A principal for the origin whose directory is to be initialized.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "must_use",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "nsIQuotaRequest",
                  "name": "initializeTemporaryOrigin",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "ACString",
                      "name": "aPersistenceType"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "nsIPrincipal",
                          "name": "aPrincipal"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Gets full origin metadata cached in memory for the given persistence type\n   * and origin.\n   *\n   * NOTE: This operation may still be delayed by other operations on the QM\n   *       I/O thread that are peforming I/O.\n   *\n   * @param aPersistenceType\n   *        A string that tells what persistence type will be used for getting\n   *        the metadata (either \"temporary\" or \"default\").\n   * @param aPrincipal\n   *        A principal that tells which origin will be used for getting the\n   *        metadata.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "must_use",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "nsIQuotaRequest",
                  "name": "getFullOriginMetadata",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "ACString",
                      "name": "aPersistenceType"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "nsIPrincipal",
                          "name": "aPrincipal"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Schedules an asynchronous callback that will inspect all origins and\n   * return the total amount of disk space being used by storages for each\n   * origin separately.\n   *\n   * @param aCallback\n   *        The callback that will be called when the usage is available.\n   * @param aGetAll\n   *        An optional boolean to indicate inspection of all origins,\n   *        including internal ones.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "must_use",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "nsIQuotaUsageRequest",
                  "name": "getUsage",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIQuotaUsageCallback",
                      "name": "aCallback"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": {
                            "kind": "attributes",
                            "first_attribute": {
                              "kind": "attribute",
                              "name": "optional",
                              "param": null
                            },
                            "other_attributes": []
                          },
                          "refType": "in",
                          "type": "boolean",
                          "name": "aGetAll"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Schedules an asynchronous callback that will return the total amount of\n   * disk space being used by storages for the given origin.\n   *\n   * @param aPrincipal\n   *        A principal for the origin whose usage is being queried.\n   * @param aCallback\n   *        The callback that will be called when the usage is available.\n   * @param aFromMemory\n   *        An optional flag to indicate whether the cached usage should be\n   *        obtained. The default value is false.  Note that this operation may\n   *        still be delayed by other operations on the QM I/O thread that are\n   *        peforming I/O.\n   * Note:  Origin usage here represents total usage of an origin. However,\n   *        cached usage here represents only non-persistent usage of an origin.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "must_use",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "nsIQuotaUsageRequest",
                  "name": "getUsageForPrincipal",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIPrincipal",
                      "name": "aPrincipal"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "nsIQuotaUsageCallback",
                          "name": "aCallback"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": {
                            "kind": "attributes",
                            "first_attribute": {
                              "kind": "attribute",
                              "name": "optional",
                              "param": null
                            },
                            "other_attributes": []
                          },
                          "refType": "in",
                          "type": "boolean",
                          "name": "aFromMemory"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Asynchronously lists all origins and returns them as plain strings.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "must_use",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "nsIQuotaRequest",
                  "name": "listOrigins",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Removes all storages. The files may not be deleted immediately depending\n   * on prohibitive concurrent operations.\n   * Be careful, this removes *all* the data that has ever been stored!\n   *\n   * If the dom.quotaManager.testing preference is not true the call will be\n   * a no-op.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "must_use",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "nsIQuotaRequest",
                  "name": "clear",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Removes all storages stored for private browsing. The files may not be\n   * deleted immediately depending on prohibitive concurrent operations.  In\n   * terms of locks, it will get an exclusive multi directory lock for entire\n   * private repository.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "must_use",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "nsIQuotaRequest",
                  "name": "clearStoragesForPrivateBrowsing",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Removes all storages stored for the given pattern. The files may not be\n   * deleted immediately depending on prohibitive concurrent operations.  In\n   * terms of locks, it will get an exclusive multi directory lock for given\n   * pattern.  For example, given pattern {\"userContextId\":1007} and set of 3\n   * origins [\"http://www.mozilla.org^userContextId=1007\",\n   * \"http://www.example.org^userContextId=1007\",\n   * \"http://www.example.org^userContextId=1008\"], the method will only lock 2\n   * origins [\"http://www.mozilla.org^userContextId=1007\",\n   * \"http://www.example.org^userContextId=1007\"].\n   *\n   * @param aPattern\n   *        A pattern for the origins whose storages are to be cleared.\n   *        Currently this is expected to be a JSON representation of the\n   *        OriginAttributesPatternDictionary defined in ChromeUtils.webidl.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "must_use",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "nsIQuotaRequest",
                  "name": "clearStoragesForOriginAttributesPattern",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "AString",
                      "name": "aPattern"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Removes all storages stored for the given principal. The files may not be\n   * deleted immediately depending on prohibitive concurrent operations.\n   *\n   * @param aPrincipal\n   *        A principal for the origin whose storages are to be cleared.\n   * @param aPersistenceType\n   *        An optional string that tells what persistence type of storages\n   *        will be cleared.  If omitted (or void), all persistence types will\n   *        be cleared for the principal.  If a single persistence type\n   *        (\"persistent\", \"temporary\", or \"default\") is provided, then only\n   *        that persistence directory will be considered.  Note that\n   *        \"persistent\" is different than being \"persisted\" via persist() and\n   *        is only for chrome principals.  See bug 1354500 for more info.\n   *        In general, null is the right thing to pass here.\n   * @param aClientType\n   *        An optional string that tells what client type of storages\n   *        will be cleared.  If omitted (or void), all client types will be\n   *        cleared for the principal.  If a single client type is provided\n   *        from Client.h, then only that client's storage will be cleared.\n   *        If you want to clear multiple client types (but not all), then you\n   *        must call this method multiple times.\n   * @param aClearAll\n   *        An optional boolean to indicate clearing all storages under the\n   *        given origin.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "must_use",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "nsIQuotaRequest",
                  "name": "clearStoragesForPrincipal",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIPrincipal",
                      "name": "aPrincipal"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": {
                            "kind": "attributes",
                            "first_attribute": {
                              "kind": "attribute",
                              "name": "optional",
                              "param": null
                            },
                            "other_attributes": []
                          },
                          "refType": "in",
                          "type": "ACString",
                          "name": "aPersistenceType"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": {
                            "kind": "attributes",
                            "first_attribute": {
                              "kind": "attribute",
                              "name": "optional",
                              "param": null
                            },
                            "other_attributes": []
                          },
                          "refType": "in",
                          "type": "AString",
                          "name": "aClientType"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": {
                            "kind": "attributes",
                            "first_attribute": {
                              "kind": "attribute",
                              "name": "optional",
                              "param": null
                            },
                            "other_attributes": []
                          },
                          "refType": "in",
                          "type": "boolean",
                          "name": "aClearAll"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Resets quota and storage management. This can be used to force\n   * reinitialization of the temp storage, for example when the pref for\n   * overriding the temp storage limit has changed.\n   * Be carefull, this invalidates all live storages!\n   *\n   * If the dom.quotaManager.testing preference is not true the call will be\n   * a no-op.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "must_use",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "nsIQuotaRequest",
                  "name": "reset",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Resets all storages stored for the given principal.\n   *\n   * If the dom.quotaManager.testing preference is not true the call will be\n   * a no-op.\n   *\n   * @param aPrincipal\n   *        A principal for the origin whose storages are to be reset.\n   * @param aPersistenceType\n   *        An optional string that tells what persistence type of storages\n   *        will be reset.  If omitted (or void), all persistence types will\n   *        be cleared for the principal.  If a single persistence type\n   *        (\"persistent\", \"temporary\", or \"default\") is provided, then only\n   *        that persistence directory will be considered.  Note that\n   *        \"persistent\" is different than being \"persisted\" via persist() and\n   *        is only for chrome principals.  See bug 1354500 for more info.\n   *        In general, null is the right thing to pass here.\n   * @param aClientType\n   *        An optional string that tells what client type of storages\n   *        will be reset.  If omitted (or void), all client types will be\n   *        cleared for the principal.  If a single client type is provided\n   *        from Client.h, then only that client's storage will be cleared.\n   *        If you want to clear multiple client types (but not all), then you\n   *        must call this method multiple times.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "must_use",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "nsIQuotaRequest",
                  "name": "resetStoragesForPrincipal",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIPrincipal",
                      "name": "aPrincipal"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": {
                            "kind": "attributes",
                            "first_attribute": {
                              "kind": "attribute",
                              "name": "optional",
                              "param": null
                            },
                            "other_attributes": []
                          },
                          "refType": "in",
                          "type": "ACString",
                          "name": "aPersistenceType"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": {
                            "kind": "attributes",
                            "first_attribute": {
                              "kind": "attribute",
                              "name": "optional",
                              "param": null
                            },
                            "other_attributes": []
                          },
                          "refType": "in",
                          "type": "AString",
                          "name": "aClientType"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Check if given origin is persisted.\n   *\n   * @param aPrincipal\n   *        A principal for the origin which we want to check.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "must_use",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "nsIQuotaRequest",
                  "name": "persisted",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIPrincipal",
                      "name": "aPrincipal"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Persist given origin.\n   *\n   * @param aPrincipal\n   *        A principal for the origin which we want to persist.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "must_use",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "nsIQuotaRequest",
                  "name": "persist",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIPrincipal",
                      "name": "aPrincipal"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Given an origin, asynchronously calculate its group quota usage and quota\n   * limit. An origin's group is the set of all origins that share the same\n   * eTLD+1. This method is intended to be used for our implementation of the\n   * StorageManager.estimate() method. When we fix bug 1305665 and stop tracking\n   * quota limits on a group basis, this method will switch to operating on\n   * origins. Callers should strongly consider whether they want to be using\n   * getUsageForPrincipal() instead.\n   *\n   * This mechanism uses cached quota values and does not perform any I/O on its\n   * own, but it may be delayed by QuotaManager operations that do need to\n   * perform I/O on the QuotaManager I/O thread.\n   *\n   * @param aPrincipal\n   *        A principal for the origin (group) which we want to estimate.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "must_use",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "nsIQuotaRequest",
                  "name": "estimate",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIPrincipal",
                      "name": "aPrincipal"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n"
  ]
}