{
  "kind": "idlfile",
  "contents": [
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* -*- Mode: IDL; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */"
      }
    },
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */"
      }
    },
    {
      "kind": "INCLUDE",
      "ident": "nsIThreadRetargetableStreamListener"
    },
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIChannel",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIInputStream",
      "base": null,
      "body": null
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": {
        "kind": "DOC_COMMENT",
        "contents": "/**\n * nsIStreamConverter provides an interface to implement when you have code\n * that converts data from one type to another.\n *\n * Suppose you had code that converted plain text into HTML. You could implement\n * this interface to allow everyone else to use your conversion logic using a\n * standard api.\n * <p>\n * <b>STREAM CONVERTER USERS</b>\n *\n * There are currently two ways to use a stream converter:\n * <ol>\n * <li> <b>SYNCHRONOUS</b> Stream to Stream\n *    You can supply the service with a stream of type X\n *    and it will convert it to your desired output type and return\n *    a converted (blocking) stream to you.</li>\n *\n * <li> <b>ASYNCHRONOUS</b> nsIStreamListener to nsIStreamListener\n *    You can supply data directly to the converter by calling it's\n *    nsIStreamListener::OnDataAvailable() method. It will then\n *    convert that data from type X to your desired output type and\n *    return converted data to you via the nsIStreamListener you passed\n *    in by calling its OnDataAvailable() method.</li>\n * </ol>\n * <p>\n *\n * <b>STREAM CONVERTER SUPPLIERS</b>\n *\n * Registering a stream converter:\n * Stream converter registration is a two step process. First of all the stream\n * converter implementation must register itself with the component manager using\n * a contractid in the format below. Second, the stream converter must add the contractid\n * to the registry.\n *\n * Stream converter contractid format (the stream converter root key is defined in this\n * file):\n *\n * <pre>@mozilla.org/streamconv;1?from=FROM_MIME_TYPE&to=TO_MIME_TYPE</pre>\n *\n * @author Jud Valeski\n * @see nsIStreamConverterService\n */"
      },
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "0b6e2c69-5cf5-48b0-9dfd-c95950e2cc7b"
              }
            }
          }
        ]
      },
      "name": "nsIStreamConverter",
      "base": {
        "kind": "ifacebase",
        "extends": "nsIThreadRetargetableStreamListener"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * <b>SYNCRONOUS VERSION</b>\n     * Converts a stream of one type, to a stream of another type.\n     *\n     * Use this method when you have a stream you want to convert.\n     *\n     * @param aFromStream   The stream representing the original/raw data.\n     * @param aFromType     The MIME type of aFromStream.\n     * @param aToType       The MIME type of the returned stream.\n     * @param aCtxt         Either an opaque context, or a converter specific context\n     *                      (implementation specific).\n     * @return              The converted stream. NOTE: The returned stream may not\n     *                      already be converted. An efficient stream converter\n     *                      implementation will converter data on demand rather than\n     *                      buffering the converted data until it is used.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "nsIInputStream",
                  "name": "convert",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIInputStream",
                      "name": "aFromStream"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "string",
                          "name": "aFromType"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "string",
                          "name": "aToType"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "nsISupports",
                          "name": "aCtxt"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * <b>ASYNCRONOUS VERSION</b>\n     * Converts data arriving via the converter's nsIStreamListener::OnDataAvailable()\n     * method from one type to another, pushing the converted data out to the caller\n     * via aListener::OnDataAvailable().\n     *\n     * Use this method when you want to proxy (and convert) nsIStreamListener callbacks\n     * asynchronously.\n     *\n     * @param aFromType     The MIME type of the original/raw data.\n     * @param aToType       The MIME type of the converted data.\n     * @param aListener     The listener who receives the converted data.\n     * @param aCtxt         Either an opaque context, or a converter specific context\n     *                      (implementation specific).\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "asyncConvertData",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "string",
                      "name": "aFromType"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "string",
                          "name": "aToType"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "nsIStreamListener",
                          "name": "aListener"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "nsISupports",
                          "name": "aCtxt"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * Returns the content type that the stream listener passed to asyncConvertData will\n     * see on the channel if the conversion is being done from aFromType to * /*.\n     *\n     * @param aFromType     The type of the content prior to conversion.\n     * @param aChannel      The channel that we'd like to convert. May be null.\n     *\n     * @throws if the converter does not support conversion to * /* or if it doesn't know\n     *         the type in advance.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "ACString",
                  "name": "getConvertedType",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "ACString",
                      "name": "aFromType"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "nsIChannel",
                          "name": "aChannel"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n\n",
    "%{C++\n#define NS_ISTREAMCONVERTER_KEY         \"@mozilla.org/streamconv;1\"\n%}\n"
  ]
}