{
  "kind": "idlfile",
  "contents": [
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 4 -*- */"
      }
    },
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */"
      }
    },
    {
      "kind": "INCLUDE",
      "ident": "nsISupports"
    },
    "%{C++\nnamespace mozilla {\nclass TimeStamp;\n}\n%}\n\n",
    {
      "kind": "native"
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": {
        "kind": "DOC_COMMENT",
        "contents": "/**\n * An instance implementing nsIIdlePeriod is used by an associated\n * nsIThread to estimate when it is likely that it will receive an\n * event.\n */"
      },
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "uuid",
          "param": {
            "kind": "attribute_$0",
            "value": "21dd35a2-eae9-4bd8-b470-0dfa35a0e3b9"
          }
        },
        "other_attributes": []
      },
      "name": "nsIIdlePeriod",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * Return an estimate of a point in time in the future when we\n     * think that the associated thread will become busy. Should\n     * return TimeStamp() (i.e. the null time) or a time less than\n     * TimeStamp::Now() if the thread is currently busy or will become\n     * busy very soon.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "TimeStamp",
                  "name": "getIdlePeriodHint",
                  "params": null,
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n"
  ]
}