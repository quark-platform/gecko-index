{
  "kind": "idlfile",
  "contents": [
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */"
      }
    },
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */"
      }
    },
    {
      "kind": "INCLUDE",
      "ident": "nsISupports"
    },
    {
      "kind": "INCLUDE",
      "ident": "nsIDirectoryEnumerator"
    },
    "%{C++\nstruct PRFileDesc;\nstruct PRLibrary;\n#include <stdio.h>\n#include \"mozilla/Path.h\"\n#include \"nsCOMPtr.h\"\n#include \"nsStringFwd.h\"\nnamespace mozilla {\nusing PathString = nsTString<filesystem::Path::value_type>;\nusing PathSubstring = nsTSubstring<filesystem::Path::value_type>;\n} // namespace mozilla\n%}\n\n",
    {
      "kind": "native"
    },
    "\n",
    {
      "kind": "native"
    },
    "\n",
    {
      "kind": "native"
    },
    "\n",
    {
      "kind": "native"
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": {
        "kind": "DOC_COMMENT",
        "contents": "/**\n * An nsIFile is an abstract representation of a filename. It manages\n * filename encoding issues, pathname component separators ('/' vs. '\\\\'\n * vs. ':') and weird stuff like differing volumes with identical names, as\n * on pre-Darwin Macintoshes.\n *\n * This file has long introduced itself to new hackers with this opening\n * paragraph:\n *\n *    This is the only correct cross-platform way to specify a file.\n *    Strings are not such a way. If you grew up on windows or unix, you\n *    may think they are.  Welcome to reality.\n *\n * While taking the pose struck here to heart would be uncalled for, one\n * may safely conclude that writing cross-platform code is an embittering\n * experience.\n *\n * All methods with string parameters have two forms.  The preferred\n * form operates on UCS-2 encoded characters strings.  An alternate\n * form operates on characters strings encoded in the \"native\" charset.\n *\n * A string containing characters encoded in the native charset cannot\n * be safely passed to javascript via xpconnect.  Therefore, the \"native\n * methods\" are not scriptable.\n */"
      },
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "main_process_scriptable_only",
              "param": null
            }
          },
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "2fa6884a-ae65-412a-9d4c-ce6e34544ba1"
              }
            }
          },
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "builtinclass",
              "param": null
            }
          }
        ]
      },
      "name": "nsIFile",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     *  Create Types\n     *\n     *  NORMAL_FILE_TYPE - A normal file.\n     *  DIRECTORY_TYPE   - A directory/folder.\n     */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "NORMAL_FILE_TYPE",
                  "value": "0"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "DIRECTORY_TYPE",
                  "value": "1"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     *  append[Native]\n     *\n     *  This function is used for constructing a descendent of the\n     *  current nsIFile.\n     *\n     *   @param node\n     *       A string which is intended to be a child node of the nsIFile.\n     *       For security reasons, this cannot contain .. and cannot start with\n     *       a directory separator. For the |appendNative| method, the node must\n     *       be in the native filesystem charset.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "append",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "AString",
                      "name": "node"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "appendNative",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "ACString",
                      "name": "node"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     *  Normalize the pathName (e.g. removing .. and . components on Unix).\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "normalize",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     *  create\n     *\n     *  This function will create a new file or directory in the\n     *  file system. Any nodes that have not been created or\n     *  resolved, will be.  If the file or directory already\n     *  exists create() will return NS_ERROR_FILE_ALREADY_EXISTS.\n     *\n     *   @param type\n     *       This specifies the type of file system object\n     *       to be made.  The only two types at this time\n     *       are file and directory which are defined above.\n     *       If the type is unrecongnized, we will return an\n     *       error (NS_ERROR_FILE_UNKNOWN_TYPE).\n     *\n     *   @param permissions\n     *       The unix style octal permissions.  This may\n     *       be ignored on systems that do not need to do\n     *       permissions.\n     *\n     *   @param skipAncestors\n     *       Optional; if set to true, we'll skip creating\n     *       ancestor directories (and return an error instead).\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "must_use",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "create",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "unsigned long",
                      "name": "type"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "unsigned long",
                          "name": "permissions"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": {
                            "kind": "attributes",
                            "first_attribute": {
                              "kind": "attribute",
                              "name": "optional",
                              "param": null
                            },
                            "other_attributes": [
                              {
                                "kind": "attributes_$0",
                                "attr": {
                                  "kind": "attribute",
                                  "name": "default",
                                  "param": {
                                    "kind": "attribute_$0",
                                    "value": "false"
                                  }
                                }
                              }
                            ]
                          },
                          "refType": "in",
                          "type": "bool",
                          "name": "skipAncestors"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     *  Accessor to the leaf name of the file itself.\n     *  For the |nativeLeafName| method, the nativeLeafName must\n     *  be in the native filesystem charset.\n     */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": null,
                  "type": "AString",
                  "name": "leafName"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": null,
                  "type": "ACString",
                  "name": "nativeLeafName"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * The leaf name as displayed in OS-provided file pickers and similar UI.\n     * On Windows and macOS, 'real' leaf names of some directories can be\n     * in English, but the OS will show a different, translated name to users\n     * using a different locale. So folders like \"Downloads\", \"Desktop\" and\n     * \"Documents\" might not normally appear to users with that (English) name,\n     * but with an OS-localized translation. This API will return such a\n     * translation if it exists, or the leafName if it doesn't.\n     * On Linux, this will always be the same as `leafName`.\n     */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "AString",
                  "name": "displayName"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     *  copyTo[Native]\n     *\n     *  This will copy this file to the specified newParentDir.\n     *  If a newName is specified, the file will be renamed.\n     *  If 'this' is not created we will return an error\n     *  (NS_ERROR_FILE_NOT_FOUND).\n     *\n     *  copyTo may fail if the file already exists in the destination\n     *  directory.\n     *\n     *  copyTo will NOT resolve aliases/shortcuts during the copy.\n     *\n     *   @param newParentDir\n     *       This param is the destination directory. If the\n     *       newParentDir is null, copyTo() will use the parent\n     *       directory of this file. If the newParentDir is not\n     *       empty and is not a directory, an error will be\n     *       returned (NS_ERROR_FILE_DESTINATION_NOT_DIR). For the\n     *       |CopyToNative| method, the newName must be in the\n     *       native filesystem charset.\n     *\n     *   @param newName\n     *       This param allows you to specify a new name for\n     *       the file to be copied. This param may be empty, in\n     *       which case the current leaf name will be used.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "copyTo",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIFile",
                      "name": "newParentDir"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "AString",
                          "name": "newName"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "CopyToNative",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIFile",
                      "name": "newParentDir"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "ACString",
                          "name": "newName"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     *  copyToFollowingLinks[Native]\n     *\n     *  This function is identical to copyTo with the exception that,\n     *  as the name implies, it follows symbolic links.  The XP_UNIX\n     *  implementation always follow symbolic links when copying.  For\n     *  the |CopyToFollowingLinks| method, the newName must be in the\n     *  native filesystem charset.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "copyToFollowingLinks",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIFile",
                      "name": "newParentDir"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "AString",
                          "name": "newName"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "copyToFollowingLinksNative",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIFile",
                      "name": "newParentDir"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "ACString",
                          "name": "newName"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     *  moveTo[Native]\n     *\n     *  A method to move this file or directory to newParentDir.\n     *  If a newName is specified, the file or directory will be renamed.\n     *  If 'this' is not created we will return an error\n     *  (NS_ERROR_FILE_NOT_FOUND).\n     *  If 'this' is a file, and the destination file already exists, moveTo\n     *  will replace the old file.\n     *  This object is updated to refer to the new file.\n     *\n     *  moveTo will NOT resolve aliases/shortcuts during the copy.\n     *  moveTo will do the right thing and allow copies across volumes.\n     *  moveTo will return an error (NS_ERROR_FILE_DIR_NOT_EMPTY) if 'this' is\n     *  a directory and the destination directory is not empty.\n     *  moveTo will return an error (NS_ERROR_FILE_ACCESS_DENIED) if 'this' is\n     *  a directory and the destination directory is not writable.\n     *\n     *   @param newParentDir\n     *       This param is the destination directory. If the\n     *       newParentDir is empty, moveTo() will rename the file\n     *       within its current directory. If the newParentDir is\n     *       not empty and does not name a directory, an error will\n     *       be returned (NS_ERROR_FILE_DESTINATION_NOT_DIR).  For\n     *       the |moveToNative| method, the newName must be in the\n     *       native filesystem charset.\n     *\n     *   @param newName\n     *       This param allows you to specify a new name for\n     *       the file to be moved. This param may be empty, in\n     *       which case the current leaf name will be used.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "moveTo",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIFile",
                      "name": "newParentDir"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "AString",
                          "name": "newName"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "moveToNative",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIFile",
                      "name": "newParentDir"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "ACString",
                          "name": "newName"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     *  moveToFollowingLinks[Native]\n     *\n     *  This function is identical to moveTo with the exception that,\n     *  as the name implies, it follows symbolic links.  The XP_UNIX\n     *  implementation always follows symbolic links when moving.  For\n     *  the |MoveToFollowingLinks| method, the newName ust be in the native\n     *  filesystem charset.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "moveToFollowingLinks",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIFile",
                      "name": "newParentDir"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "AString",
                          "name": "newName"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "moveToFollowingLinksNative",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIFile",
                      "name": "newParentDir"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "ACString",
                          "name": "newName"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     *  renameTo\n     *\n     *  This method is identical to moveTo except that if this file or directory\n     *  is moved to a a different volume, it fails and returns an error\n     *  (NS_ERROR_FILE_ACCESS_DENIED).\n     *  This object will still point to the old location after renaming.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "renameTo",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIFile",
                      "name": "newParentDir"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "AString",
                          "name": "newName"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "renameToNative",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIFile",
                      "name": "newParentDir"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "ACString",
                          "name": "newName"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     *  This will try to delete this file.  The 'recursive' flag\n     *  must be PR_TRUE to delete directories which are not empty.\n     *\n     *  This will not resolve any symlinks.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "remove",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "boolean",
                      "name": "recursive"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     *  Attributes of nsIFile.\n     */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": null,
                  "type": "unsigned long",
                  "name": "permissions"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": null,
                  "type": "unsigned long",
                  "name": "permissionsOfLink"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * The last accesss time of the file in milliseconds from midnight, January\n     * 1, 1970 GMT, if available.\n     */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": null,
                  "type": "PRTime",
                  "name": "lastAccessedTime"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": null,
                  "type": "PRTime",
                  "name": "lastAccessedTimeOfLink"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     *  File Times are to be in milliseconds from\n     *  midnight (00:00:00), January 1, 1970 Greenwich Mean\n     *  Time (GMT).\n     */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": null,
                  "type": "PRTime",
                  "name": "lastModifiedTime"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": null,
                  "type": "PRTime",
                  "name": "lastModifiedTimeOfLink"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * The creation time of file in milliseconds from midnight, January 1, 1970\n     * GMT, if available.\n     *\n     * This attribute is only implemented on Windows and macOS. Accessing this\n     * on another platform will this will throw NS_ERROR_NOT_IMPLEMENTED.\n     */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "PRTime",
                  "name": "creationTime"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "PRTime",
                  "name": "creationTimeOfLink"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     *  WARNING!  On the Mac, getting/setting the file size with nsIFile\n     *  only deals with the size of the data fork.  If you need to\n     *  know the size of the combined data and resource forks use the\n     *  GetFileSizeWithResFork() method defined on nsILocalFileMac.\n     */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": null,
                  "type": "int64_t",
                  "name": "fileSize"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "int64_t",
                  "name": "fileSizeOfLink"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     *  target & path\n     *\n     *  Accessor to the string path.  The native version of these\n     *  strings are not guaranteed to be a usable path to pass to\n     *  NSPR or the C stdlib.  There are problems that affect\n     *  platforms on which a path does not fully specify a file\n     *  because two volumes can have the same name (e.g., mac).\n     *  This is solved by holding \"private\", native data in the\n     *  nsIFile implementation.  This native data is lost when\n     *  you convert to a string.\n     *\n     *      DO NOT PASS TO USE WITH NSPR OR STDLIB!\n     *\n     *  target\n     *      Find out what the symlink points at.  Will give error\n     *      (NS_ERROR_FILE_INVALID_PATH) if not a symlink.\n     *\n     *  path\n     *      Find out what the nsIFile points at.\n     *\n     *  Note that the ACString attributes are returned in the\n     *  native filesystem charset.\n     *\n     */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "AString",
                  "name": "target"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": "readonly",
                  "type": "ACString",
                  "name": "nativeTarget"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "AString",
                  "name": "path"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "notxpcom",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "nostdcall",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "must_use",
                          "param": null
                        }
                      }
                    ]
                  },
                  "return_type": "PathString",
                  "name": "nativePath",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": "%{C++\n#ifndef XP_WIN\n    nsresult GetNativePath(nsACString& aPath);\n#endif\n    /*\n     * Returns a human-readable path string.\n     */\n    nsCString HumanReadablePath();\n%}\n\n    "
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "boolean",
                  "name": "exists",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "boolean",
                  "name": "isWritable",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "boolean",
                  "name": "isReadable",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "boolean",
                  "name": "isExecutable",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "boolean",
                  "name": "isHidden",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "boolean",
                  "name": "isDirectory",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "boolean",
                  "name": "isFile",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "boolean",
                  "name": "isSymlink",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * Not a regular file, not a directory, not a symlink.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "boolean",
                  "name": "isSpecial",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     *  createUnique\n     *\n     *  This function will create a new file or directory in the\n     *  file system. Any nodes that have not been created or\n     *  resolved, will be.  If this file already exists, we try\n     *  variations on the leaf name \"suggestedName\" until we find\n     *  one that did not already exist.\n     *\n     *  If the search for nonexistent files takes too long\n     *  (thousands of the variants already exist), we give up and\n     *  return NS_ERROR_FILE_TOO_BIG.\n     *\n     *   @param type\n     *       This specifies the type of file system object\n     *       to be made.  The only two types at this time\n     *       are file and directory which are defined above.\n     *       If the type is unrecongnized, we will return an\n     *       error (NS_ERROR_FILE_UNKNOWN_TYPE).\n     *\n     *   @param permissions\n     *       The unix style octal permissions.  This may\n     *       be ignored on systems that do not need to do\n     *       permissions.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "must_use",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "createUnique",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "unsigned long",
                      "name": "type"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "unsigned long",
                          "name": "permissions"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n      * clone()\n      *\n      * This function will allocate and initialize a nsIFile object to the\n      * exact location of the |this| nsIFile.\n      *\n      *   @param file\n      *          A nsIFile which this object will be initialize\n      *          with.\n      *\n      */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "nsIFile",
                  "name": "clone",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     *  Will determine if the inFile equals this.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "boolean",
                  "name": "equals",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIFile",
                      "name": "inFile"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     *  Will determine if inFile is a descendant of this file.\n     *  This routine looks in subdirectories too.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "boolean",
                  "name": "contains",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIFile",
                      "name": "inFile"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     *  Parent will be null when this is at the top of the volume.\n     */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "nsIFile",
                  "name": "parent"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     *  Returns an enumeration of the elements in a directory. Each\n     *  element in the enumeration is an nsIFile.\n     *\n     *   @throws NS_ERROR_FILE_NOT_DIRECTORY if the current nsIFile does\n     *           not specify a directory.\n     */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "binaryname",
                      "param": {
                        "kind": "attribute_$0",
                        "value": "DirectoryEntriesImpl"
                      }
                    },
                    "other_attributes": []
                  },
                  "readonly": "readonly",
                  "type": "nsIDirectoryEnumerator",
                  "name": "directoryEntries"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": "%{C++\n    nsresult GetDirectoryEntries(nsIDirectoryEnumerator** aOut)\n    {\n      return GetDirectoryEntriesImpl(aOut);\n    };\n    %}\n\n    "
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     *  initWith[Native]Path\n     *\n     *  This function will initialize the nsIFile object.  Any\n     *  internal state information will be reset.\n     *\n     *   @param filePath\n     *       A string which specifies a full file path to a\n     *       location.  Relative paths will be treated as an\n     *       error (NS_ERROR_FILE_UNRECOGNIZED_PATH).  For\n     *       initWithNativePath, the filePath must be in the native\n     *       filesystem charset.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "initWithPath",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "AString",
                      "name": "filePath"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "initWithNativePath",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "ACString",
                      "name": "filePath"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     *  initWithFile\n     *\n     *  Initialize this object with another file\n     *\n     *   @param aFile\n     *       the file this becomes equivalent to\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "initWithFile",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIFile",
                      "name": "aFile"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * Flag for openNSPRFileDesc(), to hint to the OS that the file will be\n     * read sequentially with agressive readahead.\n     */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "OS_READAHEAD",
                  "value": "0x40000000"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * Flag for openNSPRFileDesc(). Deprecated and unreliable!\n     * Instead use NS_OpenAnonymousTemporaryFile() to create a temporary\n     * file which will be deleted upon close!\n     */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "DELETE_ON_CLOSE",
                  "value": "0x80000000"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * Return the result of PR_Open on the file.  The caller is\n     * responsible for calling PR_Close on the result.  On success, the\n     * returned PRFileDescr must be non-null.\n     *\n     * @param flags the PR_Open flags from prio.h, plus optionally\n     * OS_READAHEAD or DELETE_ON_CLOSE. OS_READAHEAD is a hint to the\n     * OS that the file will be read sequentially with agressive\n     * readahead. DELETE_ON_CLOSE is unreliable on Windows and is deprecated.\n     * Instead use NS_OpenAnonymousTemporaryFile() to create a temporary\n     * file which will be deleted upon close.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "must_use",
                          "param": null
                        }
                      }
                    ]
                  },
                  "return_type": "PRFileDescStar",
                  "name": "openNSPRFileDesc",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "long",
                      "name": "flags"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "long",
                          "name": "mode"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * Return the result of fopen on the file.  The caller is\n     * responsible for calling fclose on the result.  On success, the\n     * returned FILE pointer must be non-null.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "must_use",
                          "param": null
                        }
                      }
                    ]
                  },
                  "return_type": "FILE",
                  "name": "openANSIFileDesc",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "string",
                      "name": "mode"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * Return the result of PR_LoadLibrary on the file.  The caller is\n     * responsible for calling PR_UnloadLibrary on the result.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "must_use",
                          "param": null
                        }
                      }
                    ]
                  },
                  "return_type": "PRLibraryStar",
                  "name": "load",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "must_use",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": "readonly",
                  "type": "int64_t",
                  "name": "diskSpaceAvailable"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "must_use",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": "readonly",
                  "type": "int64_t",
                  "name": "diskCapacity"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     *  appendRelative[Native]Path\n     *\n     *  Append a relative path to the current path of the nsIFile object.\n     *\n     *   @param relativeFilePath\n     *       relativeFilePath is a native relative path. For security reasons,\n     *       this cannot contain .. and cannot start with a directory separator.\n     *       For the |appendRelativeNativePath| method, the relativeFilePath\n     *       must be in the native filesystem charset.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "appendRelativePath",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "AString",
                      "name": "relativeFilePath"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "appendRelativeNativePath",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "ACString",
                      "name": "relativeFilePath"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     *  Accessor to a null terminated string which will specify\n     *  the file in a persistent manner for disk storage.\n     *\n     *  The character set of this attribute is undefined.  DO NOT TRY TO\n     *  INTERPRET IT AS HUMAN READABLE TEXT!\n     */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "must_use",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": null,
                  "type": "ACString",
                  "name": "persistentDescriptor"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     *  reveal\n     *\n     *  Ask the operating system to open the folder which contains\n     *  this file or folder. This routine only works on platforms which\n     *  support the ability to open a folder and is run async on Windows.\n     *  This routine must be called on the main.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "must_use",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "reveal",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     *  launch\n     *\n     *  Ask the operating system to attempt to open the file.\n     *  this really just simulates \"double clicking\" the file on your platform.\n     *  This routine only works on platforms which support this functionality\n     *  and is run async on Windows.  This routine must be called on the\n     *  main thread.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "must_use",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "launch",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     *  getRelativeDescriptor\n     *\n     *  Returns a relative file path in an opaque, XP format. It is therefore\n     *  not a native path.\n     *\n     *  The character set of the string returned from this function is\n     *  undefined.  DO NOT TRY TO INTERPRET IT AS HUMAN READABLE TEXT!\n     *\n     *   @param fromFile\n     *       the file from which the descriptor is relative.\n     *       Throws if fromFile is null.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "must_use",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "ACString",
                  "name": "getRelativeDescriptor",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIFile",
                      "name": "fromFile"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     *  setRelativeDescriptor\n     *\n     *  Initializes the file to the location relative to fromFile using\n     *  a string returned by getRelativeDescriptor.\n     *\n     *   @param fromFile\n     *       the file to which the descriptor is relative\n     *   @param relative\n     *       the relative descriptor obtained from getRelativeDescriptor\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "must_use",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "setRelativeDescriptor",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIFile",
                      "name": "fromFile"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "ACString",
                          "name": "relativeDesc"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     *  getRelativePath\n     *\n     *  Returns a relative file from 'fromFile' to this file as a UTF-8 string.\n     *  Going up the directory tree is represented via \"../\".  '/' is used as\n     *  the path segment separator.  This is not a native path, since it's UTF-8\n     *  encoded.\n     *\n     *   @param fromFile\n     *       the file from which the path is relative.\n     *       Throws if fromFile is null.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "must_use",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "AUTF8String",
                  "name": "getRelativePath",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIFile",
                      "name": "fromFile"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     *  setRelativePath\n     *\n     *  Initializes the file to the location relative to fromFile using\n     *  a string returned by getRelativePath.\n     *\n     *   @param fromFile\n     *       the file from which the path is relative\n     *   @param relative\n     *       the relative path obtained from getRelativePath\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "must_use",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "setRelativePath",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIFile",
                      "name": "fromFile"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "AUTF8String",
                          "name": "relativeDesc"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n\n",
    "%{C++\n#ifdef MOZILLA_INTERNAL_API\n#include \"nsDirectoryServiceUtils.h\"\n#include \"nsString.h\"\n\ninline std::ostream& operator<<(std::ostream& aOut, const nsIFile& aFile) {\n  nsIFile* file = const_cast<nsIFile*>(&aFile);\n  nsAutoString path;\n  file->GetPath(path);\n  return aOut << \"nsIFile { \" << path << \" }\";\n}\n#endif\n%}\n"
  ]
}