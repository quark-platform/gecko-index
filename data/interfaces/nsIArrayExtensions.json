{
  "kind": "idlfile",
  "contents": [
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */"
      }
    },
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */"
      }
    },
    {
      "kind": "INCLUDE",
      "ident": "nsIArray"
    },
    {
      "kind": "interface_main",
      "doc_comment": {
        "kind": "DOC_COMMENT",
        "contents": "/**\n * Helper interface for allowing scripts to treat nsIArray instances as if\n * they were nsISupportsArray instances while iterating.\n *\n * nsISupportsArray is convenient to iterate over in JavaScript:\n *\n * for (let i = 0; i < array.Count(); ++i) {\n *   let elem = array.GetElementAt(i);\n *   ...\n * }\n *\n * but doing the same with nsIArray is somewhat less convenient, since\n * queryElementAt is not nearly so nice to use from JavaScript.  So we provide\n * this extension interface so interfaces that currently return\n * nsISupportsArray can start returning nsIArrayExtensions and all JavaScript\n * should Just Work. Eventually we'll roll this interface into nsIArray\n * itself, possibly getting rid of the Count() method, as it duplicates\n * nsIArray functionality.\n */"
      },
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "builtinclass",
              "param": null
            }
          },
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "261d442e-050c-453d-8aaa-b3f23bcc528b"
              }
            }
          }
        ]
      },
      "name": "nsIArrayExtensions",
      "base": {
        "kind": "ifacebase",
        "extends": "nsIArray"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Count()\n   *\n   * Retrieves the length of the array. This is an alias for the\n   * |nsIArray.length| attribute.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "uint32_t",
                  "name": "Count",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * GetElementAt()\n   *\n   * Retrieve a specific element of the array. null is a valid result for\n   * this method.\n   *\n   * Note: If the index is out of bounds null will be returned.\n   *       This differs from the behavior of nsIArray.queryElementAt() which\n   *       will throw if an invalid index is specified.\n   *\n   * @param index position of element\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "nsISupports",
                  "name": "GetElementAt",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "uint32_t",
                      "name": "index"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n"
  ]
}