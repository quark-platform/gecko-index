{
  "kind": "idlfile",
  "contents": [
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 4 -*- */"
      }
    },
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */"
      }
    },
    {
      "kind": "INCLUDE",
      "ident": "nsISupports"
    },
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIDNSRecord",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIFile",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsISocketTransport",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIProxyInfo",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIRunnable",
      "base": null,
      "body": null
    },
    "\n\n",
    "%{C++\nclass nsASocketHandler;\nstruct PRFileDesc;\n%}\n\n",
    {
      "kind": "native"
    },
    "\n",
    {
      "kind": "native"
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "function",
              "param": null
            }
          },
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "338947df-2f3b-4d24-9ce4-ecf161c1b7df"
              }
            }
          }
        ]
      },
      "name": "nsISTSShutdownObserver",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n    * Observe will be called when the SocketTransportService is shutting down,\n    * before threads are stopped.\n    */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "observe",
                  "params": null,
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "builtinclass",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "scriptable",
              "param": null
            }
          },
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "ad56b25f-e6bb-4db3-9f7b-5b7db33fd2b1"
              }
            }
          }
        ]
      },
      "name": "nsISocketTransportService",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * Creates a transport for a specified host and port.\n     *\n     * @param aSocketTypes\n     *        array of socket type strings.  Empty array if using default\n     *        socket type.\n     * @param aHost\n     *        specifies the target hostname or IP address literal of the peer\n     *        for this socket.\n     * @param aPort\n     *        specifies the target port of the peer for this socket.\n     * @param aProxyInfo\n     *        specifies the transport-layer proxy type to use.  null if no\n     *        proxy.  used for communicating information about proxies like\n     *        SOCKS (which are transparent to upper protocols).\n     * @param aDnsRecord\n     *        the dns record to be used for the connection\n     *\n     * @see nsIProxiedProtocolHandler\n     * @see nsIProtocolProxyService::GetProxyInfo\n     *\n     * NOTE: this function can be called from any thread\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "nsISocketTransport",
                  "name": "createTransport",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": {
                        "kind": "IDENTIFIER_$0"
                      },
                      "name": "aSocketTypes"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "AUTF8String",
                          "name": "aHost"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "long",
                          "name": "aPort"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "nsIProxyInfo",
                          "name": "aProxyInfo"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "nsIDNSRecord",
                          "name": "dnsRecord"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * Create a transport built on a Unix domain socket, connecting to the\n     * given filename.\n     *\n     * Since Unix domain sockets are always local to the machine, they are\n     * not affected by the nsIIOService's 'offline' flag.\n     *\n     * On systems that don't support Unix domain sockets at all, this\n     * returns NS_ERROR_SOCKET_ADDRESS_NOT_SUPPORTED.\n     *\n     * The system-level socket API may impose restrictions on the length of\n     * the filename that are stricter than those of the underlying\n     * filesystem. If the file name is too long, this returns\n     * NS_ERROR_FILE_NAME_TOO_LONG.\n     *\n     * The |aPath| parameter must specify an existing directory entry.\n     * Otherwise, this returns NS_ERROR_FILE_NOT_FOUND.\n     *\n     * The program must have search permission on all components of the\n     * path prefix of |aPath|, and read and write permission on |aPath|\n     * itself. Without such permission, this returns\n     * NS_ERROR_CONNECTION_REFUSED.\n     *\n     * The |aPath| parameter must refer to a unix-domain socket. Otherwise,\n     * this returns NS_ERROR_CONNECTION_REFUSED. (POSIX specifies\n     * ECONNREFUSED when \"the target address was not listening for\n     * connections\", and this is what Linux returns.)\n     *\n     * @param aPath\n     *        The file name of the Unix domain socket to which we should\n     *        connect.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "nsISocketTransport",
                  "name": "createUnixDomainTransport",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIFile",
                      "name": "aPath"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * Create a transport built on a Unix domain socket that uses abstract\n     * address name.\n     *\n     * If abstract socket address isn't supported on System, this returns\n     * NS_ERROR_SOCKET_ADDRESS_NOT_SUPPORTED.\n     *\n     * @param aName\n     *        The name of abstract socket adress of the Unix domain socket to\n     *        which we should connect.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "nsISocketTransport",
                  "name": "createUnixDomainAbstractAddressTransport",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "ACString",
                      "name": "aName"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * Adds a new socket to the list of controlled sockets.\n     *\n     * This will fail with the error code NS_ERROR_NOT_AVAILABLE if the maximum\n     * number of sockets is already reached.\n     * In this case, the notifyWhenCanAttachSocket method should be used.\n     *\n     * @param aFd\n     *        Open file descriptor of the socket to control.\n     * @param aHandler\n     *        Socket handler that will receive notifications when the socket is\n     *        ready or detached.\n     *\n     * NOTE: this function may only be called from an event dispatch on the\n     *       socket thread.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "attachSocket",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "PRFileDescPtr",
                      "name": "aFd"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "nsASocketHandlerPtr",
                          "name": "aHandler"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * if the number of sockets reaches the limit, then consumers can be\n     * notified when the number of sockets becomes less than the limit.  the\n     * notification is asynchronous, delivered via the given nsIRunnable\n     * instance on the socket transport thread.\n     *\n     * @param aEvent\n     *        Event that will receive the notification when a new socket can\n     *        be attached\n     *\n     * NOTE: this function may only be called from an event dispatch on the\n     *       socket thread.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "notifyWhenCanAttachSocket",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIRunnable",
                      "name": "aEvent"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "addShutdownObserver",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsISTSShutdownObserver",
                      "name": "aObserver"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "removeShutdownObserver",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsISTSShutdownObserver",
                      "name": "aObserver"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "builtinclass",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "scriptable",
              "param": null
            }
          },
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "c5204623-5b58-4a16-8b2e-67c34dd02e3f"
              }
            }
          }
        ]
      },
      "name": "nsIRoutedSocketTransportService",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISocketTransportService"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  },
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "nsISocketTransport",
                  "name": "createRoutedTransport",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": {
                        "kind": "IDENTIFIER_$0"
                      },
                      "name": "aSocketTypes"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "AUTF8String",
                          "name": "aHost"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "long",
                          "name": "aPort"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "AUTF8String",
                          "name": "aHostRoute"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "long",
                          "name": "aPortRoute"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "nsIProxyInfo",
                          "name": "aProxyInfo"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "nsIDNSRecord",
                          "name": "aDnsRecord"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n"
  ]
}