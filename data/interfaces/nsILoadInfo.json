{
  "kind": "idlfile",
  "contents": [
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-\n * vim: ft=cpp tw=78 sw=2 et ts=2 sts=2 cin\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */"
      }
    },
    {
      "kind": "INCLUDE",
      "ident": "nsISupports"
    },
    {
      "kind": "INCLUDE",
      "ident": "nsIContentPolicy"
    },
    {
      "kind": "INCLUDE",
      "ident": "nsIScriptSecurityManager"
    },
    {
      "kind": "INCLUDE",
      "ident": "nsIInterceptionInfo"
    },
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIChannel",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIContentSecurityPolicy",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsICookieJarSettings",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsICSPEventListener",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsINode",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIPrincipal",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIRedirectHistoryEntry",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIURI",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "webidl"
    },
    "\n",
    {
      "kind": "webidl"
    },
    "\n",
    {
      "kind": "native"
    },
    "\n",
    "%{C++\n#include \"nsTArray.h\"\n#include \"mozilla/LoadTainting.h\"\n#include \"mozilla/OriginAttributes.h\"\n#include \"mozilla/UniquePtr.h\"\n#include \"nsRFPService.h\"\n#include \"nsStringFwd.h\"\n\nnamespace mozilla {\nnamespace dom {\nclass ClientInfo;\nclass ClientSource;\nclass PerformanceStorage;\nclass ServiceWorkerDescriptor;\n} // namespace dom\n} // namespace mozilla\n%}\n\n",
    {
      "kind": "native"
    },
    "\n",
    {
      "kind": "native"
    },
    "\n",
    {
      "kind": "native"
    },
    "\n",
    {
      "kind": "native"
    },
    "\n",
    {
      "kind": "native"
    },
    "\n",
    {
      "kind": "native"
    },
    "\n",
    {
      "kind": "native"
    },
    "\n",
    {
      "kind": "native"
    },
    "\n      ",
    {
      "kind": "native"
    },
    "\n      ",
    {
      "kind": "native"
    },
    "\n",
    {
      "kind": "native"
    },
    "\n",
    {
      "kind": "native"
    },
    "\n",
    {
      "kind": "native"
    },
    "\n",
    {
      "kind": "native"
    },
    "\n      ",
    {
      "kind": "native"
    },
    "\n",
    {
      "kind": "native"
    },
    "\n      ",
    {
      "kind": "native"
    },
    "\n      ",
    {
      "kind": "native"
    },
    "\n\n",
    {
      "kind": "typedef"
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": {
        "kind": "DOC_COMMENT",
        "contents": "/**\n * The LoadInfo object contains information about a network load, why it\n * was started, and how we plan on using the resulting response.\n * If a network request is redirected, the new channel will receive a new\n * LoadInfo object. The new object will contain mostly the same\n * information as the pre-redirect one, but updated as appropriate.\n * For detailed information about what parts of LoadInfo are updated on\n * redirect, see documentation on individual properties.\n */"
      },
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "builtinclass",
              "param": null
            }
          },
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "ddc65bf9-2f60-41ab-b22a-4f1ae9efcd36"
              }
            }
          }
        ]
      },
      "name": "nsILoadInfo",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * The following five flags determine the security mode and hence what kind of\n   * security checks should be performed throughout the lifetime of the channel.\n   *\n   *    * SEC_REQUIRE_SAME_ORIGIN_INHERITS_SEC_CONTEXT\n   *    * SEC_REQUIRE_SAME_ORIGIN_DATA_IS_BLOCKED\n   *    * SEC_ALLOW_CROSS_ORIGIN_INHERITS_SEC_CONTEXT\n   *    * SEC_ALLOW_CROSS_ORIGIN_SEC_CONTEXT_IS_NULL\n   *    * SEC_REQUIRE_CORS_INHERITS_SEC_CONTEXT\n   *\n   * Exactly one of these flags are required to be set in order to allow\n   * the channel to perform the correct security checks (SOP, CORS, ...) and\n   * return the correct result principal. If none or more than one of these\n   * flags are set AsyncOpen will fail.\n   */"
                  },
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n    * Warning: Never use this flag when creating a new channel!\n    * Only use this flag if you have to create a temporary LoadInfo\n    * for performing an explicit nsIContentPolicy check, like e.g.\n    * when loading something from the cache that needs an explicit\n    * nsIContentPolicy check. In all other cases pick one of the\n    * security flags underneath.\n    */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "SEC_ONLY_FOR_EXPLICIT_CONTENTSEC_CHECK",
                  "value": "0"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/*\n   * Enforce the same origin policy where loads inherit the principal.\n   * See the documentation for principalToInherit, which describes exactly what\n   * principal is inherited.\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "SEC_REQUIRE_SAME_ORIGIN_INHERITS_SEC_CONTEXT",
                  "value": {
                    "kind": "unary_$0"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/*\n   * Enforce the same origin policy and data: loads are blocked.\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "SEC_REQUIRE_SAME_ORIGIN_DATA_IS_BLOCKED",
                  "value": {
                    "kind": "unary_$0"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Allow loads from other origins. Loads which inherit the principal should\n   * see the documentation for principalToInherit, which describes exactly what\n   * principal is inherited.\n   *\n   * Commonly used by plain <img>, <video>, <link rel=stylesheet> etc.\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "SEC_ALLOW_CROSS_ORIGIN_INHERITS_SEC_CONTEXT",
                  "value": {
                    "kind": "unary_$0"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Allow loads from other origins. Loads from data: will be allowed,\n   * but the resulting resource will get a null principal.\n   * Used in blink/webkit for <iframe>s. Likely also the mode\n   * that should be used by most Chrome code.\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "SEC_ALLOW_CROSS_ORIGIN_SEC_CONTEXT_IS_NULL",
                  "value": {
                    "kind": "unary_$0"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Allow loads from any origin, but require CORS for cross-origin loads.\n   * See the documentation for principalToInherit, which describes exactly what\n   * principal is inherited.\n   *\n   * Commonly used by <img crossorigin>, <video crossorigin>,\n   * XHR, fetch(), etc.\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "SEC_REQUIRE_CORS_INHERITS_SEC_CONTEXT",
                  "value": {
                    "kind": "unary_$0"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Choose cookie policy. The default policy is equivalent to \"INCLUDE\" for\n   * SEC_REQUIRE_SAME_ORIGIN_* and SEC_ALLOW_CROSS_ORIGIN_* modes, and\n   * equivalent to \"SAME_ORIGIN\" for SEC_REQUIRE_CORS_INHERITS_SEC_CONTEXT mode.\n   *\n   * This means that if you want to perform a CORS load with credentials, pass\n   * SEC_COOKIES_INCLUDE.\n   *\n   * Note that these flags are still subject to the user's cookie policies.\n   * For example, if the user is blocking 3rd party cookies, those cookies\n   * will be blocked no matter which of these flags are set.\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "SEC_COOKIES_DEFAULT",
                  "value": {
                    "kind": "unary_$0"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "SEC_COOKIES_INCLUDE",
                  "value": {
                    "kind": "unary_$0"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "SEC_COOKIES_SAME_ORIGIN",
                  "value": {
                    "kind": "unary_$0"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "SEC_COOKIES_OMIT",
                  "value": {
                    "kind": "unary_$0"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Force inheriting of the principal.  See the documentation for\n   * principalToInherit, which describes exactly what principal is inherited.\n   *\n   * Setting this flag will cause GetChannelResultPrincipal to return the\n   * principal to be inherited as the channel principal.\n   *\n   * This will happen independently of the scheme of the URI that the\n   * channel is loading.\n   *\n   * So if the principal that gets inherited is \"http://a.com/\", and the channel\n   * is loading the URI \"http://b.com/whatever\", GetChannelResultPrincipal\n   * will return a principal from \"http://a.com/\".\n   *\n   * This flag can not be used together with SANDBOXED_ORIGIN sandbox flag.  If\n   * both are passed to the LoadInfo constructor then this flag will be dropped.\n   * If you need to know whether this flag would have been present but was dropped\n   * due to sandboxing, check for the forceInheritPrincipalDropped flag.\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "SEC_FORCE_INHERIT_PRINCIPAL",
                  "value": {
                    "kind": "unary_$0"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Inherit the Principal for about:blank.\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "SEC_ABOUT_BLANK_INHERITS",
                  "value": {
                    "kind": "unary_$0"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Allow access to chrome: packages that are content accessible.\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "SEC_ALLOW_CHROME",
                  "value": {
                    "kind": "unary_$0"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Disallow access to javascript: uris.\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "SEC_DISALLOW_SCRIPT",
                  "value": {
                    "kind": "unary_$0"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Don't follow redirects. Instead the redirect response is returned\n   * as a successful response for the channel.\n   *\n   * Redirects not initiated by a server response, i.e. REDIRECT_INTERNAL and\n   * REDIRECT_STS_UPGRADE, are still followed.\n   *\n   * Note: If this flag is set and the channel response is a redirect, then\n   * the response body might not be available.\n   * This can happen if the redirect was cached.\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "SEC_DONT_FOLLOW_REDIRECTS",
                  "value": {
                    "kind": "unary_$0"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Load an error page, it should be one of following : about:neterror,\n   * about:certerror, about:blocked, about:tabcrashed or about:restartrequired.\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "SEC_LOAD_ERROR_PAGE",
                  "value": {
                    "kind": "unary_$0"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Force inheriting of the principal, overruling any owner that might be set\n   * on the channel. (Please note that channel.owner is deprecated and will be\n   * removed within Bug 1286838).  See the documentation for principalToInherit,\n   * which describes exactly what principal is inherited.\n   *\n   * Setting this flag will cause GetChannelResultPrincipal to return the\n   * principal to be inherited as the channel principal.\n   *\n   * This will happen independently of the scheme of the URI that the\n   * channel is loading.\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "SEC_FORCE_INHERIT_PRINCIPAL_OVERRULE_OWNER",
                  "value": {
                    "kind": "unary_$0"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * This is the principal of the network request's caller/requester where\n   * the resulting resource will be used. I.e. it is the principal which\n   * will get access to the result of the request. (Where \"get access to\"\n   * might simply mean \"embed\" depending on the type of resource that is\n   * loaded).\n   *\n   * For example for an image, it is the principal of the document where\n   * the image is rendered. For a stylesheet it is the principal of the\n   * document where the stylesheet will be applied.\n   *\n   * So if document at http://a.com/page.html loads an image from\n   * http://b.com/pic.jpg, then loadingPrincipal will be\n   * http://a.com/page.html.\n   *\n   * For <iframe> and <frame> loads, the LoadingPrincipal is the\n   * principal of the parent document. For top-level loads, the\n   * LoadingPrincipal is null. For all loads except top-level loads\n   * the LoadingPrincipal is never null.\n   *\n   * If the loadingPrincipal is the system principal, no security checks\n   * will be done at all. There will be no security checks on the initial\n   * load or any subsequent redirects. This means there will be no\n   * nsIContentPolicy checks or any CheckLoadURI checks. Because of\n   * this, never set the loadingPrincipal to the system principal when\n   * the URI to be loaded is controlled by a webpage.\n   * If the loadingPrincipal and triggeringPrincipal are both\n   * content principals, then we will always call into\n   * nsIContentPolicies and CheckLoadURI. The call to nsIContentPolicies\n   * and CheckLoadURI happen even if the URI to be loaded is same-origin\n   * with the loadingPrincipal or triggeringPrincipal.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "nsIPrincipal",
                  "name": "loadingPrincipal"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * A C++-friendly version of triggeringPrincipal.\n   *\n   * This is a bit awkward because we can't use\n   * binaryname(GetLoadingPrincipal).\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "notxpcom",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "nostdcall",
                          "param": null
                        }
                      }
                    ]
                  },
                  "return_type": "nsIPrincipal",
                  "name": "virtualGetLoadingPrincipal",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": "%{C++\n  nsIPrincipal* GetLoadingPrincipal() {\n    return VirtualGetLoadingPrincipal();\n  }\n%}\n\n  "
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * This is the principal which caused the network load to start. I.e.\n   * this is the principal which provided the URL to be loaded. This is\n   * often the same as the LoadingPrincipal, but there are a few cases\n   * where that's not true.\n   *\n   * For example for loads into an <iframe>, the LoadingPrincipal is always\n   * the principal of the parent document. However the triggeringPrincipal\n   * is the principal of the document which provided the URL that the\n   * <iframe> is navigating to. This could be the previous document inside\n   * the <iframe> which set document.location. Or a document elsewhere in\n   * the frame tree which contained a <a target=\"...\"> which targetted the\n   * <iframe>.\n   *\n   * If a stylesheet links to a sub-resource, like an @imported stylesheet,\n   * or a background image, then the triggeringPrincipal is the principal\n   * of the stylesheet, while the LoadingPrincipal is the principal of the\n   * document being styled.\n   *\n   * The triggeringPrincipal is never null.\n   *\n   * If the triggeringPrincipal is the system principal, no security checks\n   * will be done at all. There will be no security checks on the initial\n   * load or any subsequent redirects. This means there will be no\n   * nsIContentPolicy checks or any CheckLoadURI checks. Because of\n   * this, never set the triggeringPrincipal to the system principal when\n   * the URI to be loaded is controlled by a webpage.\n   * If the loadingPrincipal and triggeringPrincipal are both\n   * content principals, then we will always call into\n   * nsIContentPolicies and CheckLoadURI. The call to nsIContentPolicies\n   * and CheckLoadURI happen even if the URI to be loaded is same-origin\n   * with the loadingPrincipal or triggeringPrincipal.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "nsIPrincipal",
                  "name": "triggeringPrincipal"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * A C++-friendly version of triggeringPrincipal.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "notxpcom",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "nostdcall",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "binaryname",
                          "param": {
                            "kind": "attribute_$0",
                            "value": "TriggeringPrincipal"
                          }
                        }
                      }
                    ]
                  },
                  "return_type": "nsIPrincipal",
                  "name": "binaryTriggeringPrincipal",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * The remote type of the process which caused the network load to start. I.e.\n   * this is the remote type of the process which provided the URL to be loaded.\n   *\n   * For subresource loads, this should be the same as the process which will\n   * handle the response, however for document loads this may both be different\n   * than the final process, as well as different from the process which starts\n   * the navigation.\n   *\n   * This field is intentionally not perfectly preserved over IPC, and will be\n   * reset to the remote type of the sending process when sent from a content\n   * process to the parent process.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": null,
                  "type": "AUTF8String",
                  "name": "triggeringRemoteType"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * For non-document loads the principalToInherit is always null. For\n   * loads of type TYPE_DOCUMENT or TYPE_SUBDOCUMENT the principalToInherit\n   * might be null. If it's non null, then this is the principal that is\n   * inherited if a principal needs to be inherited. If the principalToInherit\n   * is null but the inherit flag is set, then the triggeringPrincipal is\n   * the principal that is inherited.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": null,
                  "type": "nsIPrincipal",
                  "name": "principalToInherit"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * A C++-friendly version of principalToInherit.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "notxpcom",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "nostdcall",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "binaryname",
                          "param": {
                            "kind": "attribute_$0",
                            "value": "PrincipalToInherit"
                          }
                        }
                      }
                    ]
                  },
                  "return_type": "nsIPrincipal",
                  "name": "binaryPrincipalToInherit",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Finds the correct principal to inherit for the given channel, based on\n   * the values of PrincipalToInherit and TriggeringPrincipal.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "notxpcom",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "nostdcall",
                          "param": null
                        }
                      }
                    ]
                  },
                  "return_type": "nsIPrincipal",
                  "name": "FindPrincipalToInherit",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIChannel",
                      "name": "aChannel"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * This is the ownerDocument of the LoadingNode. Unless the LoadingNode\n   * is a Document, in which case the LoadingDocument is the same as the\n   * LoadingNode.\n   *\n   * For top-level loads, and for loads originating from workers, the\n   * LoadingDocument is null. When the LoadingDocument is not null, the\n   * LoadingPrincipal is set to the principal of the LoadingDocument.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "Document",
                  "name": "loadingDocument"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * A C++-friendly version of loadingDocument (loadingNode).\n   * This is the Node where the resulting resource will be used. I.e. it is\n   * the Node which will get access to the result of the request. (Where\n   * \"get access to\" might simply mean \"embed\" depending on the type of\n   * resource that is loaded).\n   *\n   * For example for an <img>/<video> it is the image/video element. For\n   * document loads inside <iframe> and <frame>s, the LoadingNode is the\n   * <iframe>/<frame> element. For an XMLHttpRequest, it is the Document\n   * which contained the JS which initiated the XHR. For a stylesheet, it\n   * is the Document that contains <link rel=stylesheet>.\n   *\n   * For loads triggered by the HTML pre-parser, the LoadingNode is the\n   * Document which is currently being parsed.\n   *\n   * For top-level loads, and for loads originating from workers, the\n   * LoadingNode is null. If the LoadingNode is non-null, then the\n   * LoadingPrincipal is the principal of the LoadingNode.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "notxpcom",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "nostdcall",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "binaryname",
                          "param": {
                            "kind": "attribute_$0",
                            "value": "LoadingNode"
                          }
                        }
                      }
                    ]
                  },
                  "return_type": "nsINode",
                  "name": "binaryLoadingNode",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * A C++ friendly version of the loadingContext for toplevel loads.\n   * Most likely you want to query the ownerDocument or LoadingNode\n   * and not this context only available for TYPE_DOCUMENT loads.\n   * Please note that except for loads of TYPE_DOCUMENT, this\n   * ContextForTopLevelLoad will always return null.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "notxpcom",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "nostdcall",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "binaryname",
                          "param": {
                            "kind": "attribute_$0",
                            "value": "ContextForTopLevelLoad"
                          }
                        }
                      }
                    ]
                  },
                  "return_type": "LoadContextRef",
                  "name": "binaryContextForTopLevelLoad",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * For all loads except loads of TYPE_DOCUMENT, the loadingContext\n   * simply returns the loadingNode. For loads of TYPE_DOCUMENT this\n   * will return the context available for top-level loads which\n   * do not have a loadingNode.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "binaryname",
                      "param": {
                        "kind": "attribute_$0",
                        "value": "LoadingContextXPCOM"
                      }
                    },
                    "other_attributes": []
                  },
                  "readonly": "readonly",
                  "type": "nsISupports",
                  "name": "loadingContext"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * A C++ friendly version of the loadingContext.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "notxpcom",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "nostdcall",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "binaryname",
                          "param": {
                            "kind": "attribute_$0",
                            "value": "GetLoadingContext"
                          }
                        }
                      }
                    ]
                  },
                  "return_type": "LoadContextRef",
                  "name": "binaryGetLoadingContext",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * The securityFlags of that channel.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "nsSecurityFlags",
                  "name": "securityFlags"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": "%{C++\n  inline nsSecurityFlags GetSecurityFlags()\n  {\n    nsSecurityFlags result;\n    mozilla::DebugOnly<nsresult> rv = GetSecurityFlags(&result);\n    MOZ_ASSERT(NS_SUCCEEDED(rv));\n    return result;\n  }\n%}\n\n  "
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * The sandboxFlags of that channel.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": "readonly",
                  "type": "unsigned long",
                  "name": "sandboxFlags"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n  *   The TriggingSandboxFlags are the SandboxFlags of the entity\n  *   responsible for causing the load to occur.\n  */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": null,
                  "type": "unsigned long",
                  "name": "triggeringSandboxFlags"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n  * The window id and storage access status of the window of the\n  * context that triggered the load. This is used to allow self-initiated\n  * same-origin navigations to propogate their \"has storage access\" bit\n  * to the next Document.\n  */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": null,
                  "type": "unsigned long long",
                  "name": "triggeringWindowId"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": null,
                  "type": "boolean",
                  "name": "triggeringStorageAccess"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Allows to query only the security mode bits from above.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": "readonly",
                  "type": "unsigned long",
                  "name": "securityMode"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * This flag is used for any browsing context where we should not sniff\n   * the content type. E.g if an iframe has the XCTO nosniff header, then\n   * that flag is set to true so we skip content sniffing for that browsing\n   * context.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": null,
                  "type": "boolean",
                  "name": "skipContentSniffing"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * (default) If this flag is set, it has not yet been determined if the\n   * HTTPS-Only mode will upgrade the request.\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "HTTPS_ONLY_UNINITIALIZED",
                  "value": {
                    "kind": "unary_$0"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Indicates that the request will get upgraded, and the HTTPS-Only\n   * StreamListener got registered.\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "HTTPS_ONLY_UPGRADED_LISTENER_NOT_REGISTERED",
                  "value": {
                    "kind": "unary_$0"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Indicates that this is the first time the request gets upgraded, and thus\n   * the HTTPS-Only StreamListener hasn't been registered yet. Even though there\n   * might be multiple channels per request that have to be upgraded (e.g.,\n   * because of redirects), the StreamListener only has to be attached to one\n   * channel.\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "HTTPS_ONLY_UPGRADED_LISTENER_REGISTERED",
                  "value": {
                    "kind": "unary_$0"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * This flag can be manually set if the HTTPS-Only mode should exempt the\n   * request and not upgrade it. (e.g in the case of OCSP.\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "HTTPS_ONLY_EXEMPT",
                  "value": {
                    "kind": "unary_$0"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * This flag can only ever be set on top-level loads. It indicates\n   * that the top-level https connection succeeded. This flag is mostly\n   * used to counter time-outs which allows to cancel the channel\n   * if the https load has not started.\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "HTTPS_ONLY_TOP_LEVEL_LOAD_IN_PROGRESS",
                  "value": {
                    "kind": "unary_$0"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * This flag can only ever be set on downloads. It indicates\n   * that the download https connection succeeded. This flag is mostly\n   * used to counter time-outs which allows to cancel the channel\n   * if the https load has not started.\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "HTTPS_ONLY_DOWNLOAD_IN_PROGRESS",
                  "value": {
                    "kind": "unary_$0"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * This flag indicates that the request should not be logged to the\n   * console.\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "HTTPS_ONLY_DO_NOT_LOG_TO_CONSOLE",
                  "value": {
                    "kind": "unary_$0"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * This flag indicates that the request was upgraded by https-first mode.\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "HTTPS_ONLY_UPGRADED_HTTPS_FIRST",
                  "value": {
                    "kind": "unary_$0"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * This flag indicates that the request should not be blocked by ORB.\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "HTTPS_ONLY_BYPASS_ORB",
                  "value": {
                    "kind": "unary_$0"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * This flag indicates that HTTPS_ONLY_EXEMPT should be\n   * set the next time HTTPS-Only exemptions are checked\n   * and HTTPS-First is enabled.\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "HTTPS_FIRST_EXEMPT_NEXT_LOAD",
                  "value": {
                    "kind": "unary_$0"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Upgrade state of HTTPS-Only Mode. The flag HTTPS_ONLY_EXEMPT can get\n   * set on requests that should be excempt from an upgrade.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": null,
                  "type": "unsigned long",
                  "name": "httpsOnlyStatus"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Reflects whetehr this is an HTTP Strict Transport Security host\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": null,
                  "type": "boolean",
                  "name": "hstsStatus"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Returns true if at the time of the loadinfo construction the document\n   * that triggered this load has the bit hasValidTransientUserGestureActivation\n   * set or the load was triggered from External. (Mostly this bool is used\n   * in the context of Sec-Fetch-User.)\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": null,
                  "type": "boolean",
                  "name": "hasValidUserGestureActivation"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * We disallow the SystemPrincipal to initiate requests to\n   * the public web. This flag is to allow exceptions.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": null,
                  "type": "boolean",
                  "name": "allowDeprecatedSystemRequests"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Only ever returns true if the loadinfo is of TYPE_SCRIPT and\n   * the script was created by the HTML parser.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": null,
                  "type": "boolean",
                  "name": "parserCreatedScript"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * True if this request is known to have been triggered by a user\n   * manually requesting the URI to be saved.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": null,
                  "type": "boolean",
                  "name": "isUserTriggeredSave"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * True if this request is from DevTools.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": null,
                  "type": "boolean",
                  "name": "isInDevToolsContext"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * True if this request is embedded in a context that can't be third-party\n   * (i.e. an iframe embedded in a cross-origin parent window). If this is\n   * false, then this request may be third-party if it's a third-party to\n   * loadingPrincipal.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": null,
                  "type": "boolean",
                  "name": "isInThirdPartyContext"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * True if this request is a third party in respect to the top-level window.\n   *\n   * Note that this doesn't consider the parent window. I.e. It will still\n   * return false even in the case that the parent is cross-origin but the\n   * top-level is same-origin.\n   *\n   * This value would be set during opening the channel in parent and propagate\n   * to the channel in the content.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": null,
                  "type": "boolean",
                  "name": "isThirdPartyContextToTopWindow"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * See the SEC_COOKIES_* flags above. This attribute will never return\n   * SEC_COOKIES_DEFAULT, but will instead return what the policy resolves to.\n   * I.e. SEC_COOKIES_SAME_ORIGIN for CORS mode, and SEC_COOKIES_INCLUDE\n   * otherwise.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": "readonly",
                  "type": "unsigned long",
                  "name": "cookiePolicy"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * The cookie jar settings inherited from the top-level document's loadInfo.\n   * It cannot be null.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": null,
                  "type": "nsICookieJarSettings",
                  "name": "cookieJarSettings"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "enum_code",
                  "name": "StoragePermissionState",
                  "base": "8",
                  "values": {
                    "kind": "cenumlist",
                    "first_value": {
                      "kind": "cenum",
                      "comment": [],
                      "identifier": "NoStoragePermission",
                      "value": {
                        "kind": "cenum_$0",
                        "value": "0"
                      }
                    },
                    "other_values": [
                      {
                        "kind": "cenumlist_$0",
                        "value": {
                          "kind": "cenum",
                          "comment": [],
                          "identifier": "HasStoragePermission",
                          "value": {
                            "kind": "cenum_$0",
                            "value": "1"
                          }
                        }
                      },
                      {
                        "kind": "cenumlist_$0",
                        "value": {
                          "kind": "cenum",
                          "comment": [],
                          "identifier": "StoragePermissionAllowListed",
                          "value": {
                            "kind": "cenum_$0",
                            "value": "2"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * The result of the storage permission check of the loading document. This\n   * value would be set during opening the channel.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": null,
                  "type": "nsILoadInfo_StoragePermissionState",
                  "name": "storagePermission"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Get the granular overrides of fingerprinting protections associated to the\n   * channel, the value will override the default fingerprinting protection\n   * settings. This field will only get populated if these is one that comes\n   * from the local granular overrides pref or WebCompat. Otherwise, a value of\n   * Nothing() indicates no granular overrides are present for this channel.\n   *\n   * The RFPTarget defined in the RFPTargets.inc.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "nostdcall",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "notxpcom",
                          "param": null
                        }
                      }
                    ]
                  },
                  "return_type": "const_MaybeRFPTarget",
                  "name": "GetOverriddenFingerprintingSettings",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Set the granular overrides of fingerprinting protections for the channel.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "nostdcall",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "notxpcom",
                          "param": null
                        }
                      }
                    ]
                  },
                  "return_type": "void",
                  "name": "SetOverriddenFingerprintingSettings",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "RFPTarget",
                      "name": "aTargets"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * True if the load was triggered by a meta refresh.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": null,
                  "type": "boolean",
                  "name": "isMetaRefresh"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * If forceInheritPrincipal is true, the data coming from the channel should\n   * inherit its principal, even when the data is loaded over http:// or another\n   * protocol that would normally use a URI-based principal.\n   *\n   * See the documentation for principalToInherit, which describes exactly what\n   * principal is inherited.\n   *\n   * This attribute will never be true when loadingSandboxed is true.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": "readonly",
                  "type": "boolean",
                  "name": "forceInheritPrincipal"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * If forceInheritPrincipalOverruleOwner is true, the data coming from the\n   * channel should inherit the principal, even when the data is loaded over\n   * http:// or another protocol that would normally use a URI-based principal\n   * and even if the channel's .owner is not null.  This last is the difference\n   * between forceInheritPrincipalOverruleOwner and forceInheritPrincipal: the\n   * latter does _not_ overrule the .owner setting.\n   *\n   * See the documentation for principalToInherit, which describes exactly what\n   * principal is inherited.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": "readonly",
                  "type": "boolean",
                  "name": "forceInheritPrincipalOverruleOwner"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * If loadingSandboxed is true, the data coming from the channel is\n   * being loaded sandboxed, so it should have a nonce origin and\n   * hence should use a NullPrincipal.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": "readonly",
                  "type": "boolean",
                  "name": "loadingSandboxed"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * If aboutBlankInherits is true, then about:blank should inherit\n   * the principal.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": "readonly",
                  "type": "boolean",
                  "name": "aboutBlankInherits"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * If allowChrome is true, then use nsIScriptSecurityManager::ALLOW_CHROME\n   * when calling CheckLoadURIWithPrincipal().\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": "readonly",
                  "type": "boolean",
                  "name": "allowChrome"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * If disallowScript is true, then use nsIScriptSecurityManager::DISALLOW_SCRIPT\n   * when calling CheckLoadURIWithPrincipal().\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": "readonly",
                  "type": "boolean",
                  "name": "disallowScript"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": "%{C++\n  uint32_t CheckLoadURIFlags() {\n    uint32_t flags = nsIScriptSecurityManager::STANDARD;\n    if (GetAllowChrome()) {\n      flags |= nsIScriptSecurityManager::ALLOW_CHROME;\n    }\n    if (GetDisallowScript()) {\n      flags |= nsIScriptSecurityManager::DISALLOW_SCRIPT;\n    }\n    return flags;\n  }\n%}\n\n  "
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Returns true if SEC_DONT_FOLLOW_REDIRECTS is set.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": "readonly",
                  "type": "boolean",
                  "name": "dontFollowRedirects"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Returns true if SEC_LOAD_ERROR_PAGE is set.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": "readonly",
                  "type": "boolean",
                  "name": "loadErrorPage"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * True if the load was initiated by a form request.\n   * This is important to know to handle the CSP directive navigate-to.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": null,
                  "type": "boolean",
                  "name": "isFormSubmission"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * The external contentPolicyType of the channel, used for security checks\n   * like Mixed Content Blocking and Content Security Policy.\n   *\n   * Specifically, content policy types with _INTERNAL_ in their name will\n   * never get returned from this attribute.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "nsContentPolicyType",
                  "name": "externalContentPolicyType"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * CSP uses this parameter to send or not CSP violation events.\n   * Default value: true.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": null,
                  "type": "boolean",
                  "name": "sendCSPViolationEvents"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": "%{ C++\n  inline ExtContentPolicyType GetExternalContentPolicyType()\n  {\n    nsContentPolicyType result;\n    mozilla::DebugOnly<nsresult> rv = GetExternalContentPolicyType(&result);\n    MOZ_ASSERT(NS_SUCCEEDED(rv));\n    return static_cast<ExtContentPolicyType>(result);\n  }\n\n%}\n\n\n  "
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * The internal contentPolicyType of the channel, used for constructing\n   * RequestContext values when creating a fetch event for an intercepted\n   * channel.\n   *\n   * This should not be used for the purposes of security checks, since\n   * the content policy implementations cannot be expected to deal with\n   * _INTERNAL_ values.  Please use the contentPolicyType attribute above\n   * for that purpose.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "notxpcom",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "nostdcall",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "binaryname",
                          "param": {
                            "kind": "attribute_$0",
                            "value": "InternalContentPolicyType"
                          }
                        }
                      }
                    ]
                  },
                  "return_type": "nsContentPolicyType",
                  "name": "binaryInternalContentPolicyType",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "nsContentPolicyType",
                  "name": "internalContentPolicyType"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Returns true if document or any of the documents ancestors\n   * up to the toplevel document make use of the CSP directive\n   * 'block-all-mixed-content'.\n   *\n   * Warning: If the loadingDocument is null, then the\n   * blockAllMixedContent is false.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": "readonly",
                  "type": "boolean",
                  "name": "blockAllMixedContent"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Returns true if document or any of the documents ancestors\n   * up to the toplevel document make use of the CSP directive\n   * 'upgrade-insecure-requests'.\n   *\n   * Warning: If the loadingDocument is null, then the\n   * upgradeInsecureRequests is false.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": "readonly",
                  "type": "boolean",
                  "name": "upgradeInsecureRequests"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Returns true if the the page is https and the content is upgradable from http\n   * requires 'security.mixed_content.upgrade_display_content' pref to be true.\n   * Currently this only upgrades display content but might be expanded to other loads.\n   * This is very similar in implementation to upgradeInsecureRequests but browser set.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": "readonly",
                  "type": "boolean",
                  "name": "browserUpgradeInsecureRequests"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Returns true if the display content was or will get upgraded from http to https.\n   * Requires 'security.mixed_content.upgrade_display_content' pref to be true.\n   * Flag is set purely to collect telemetry.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": null,
                  "type": "boolean",
                  "name": "browserDidUpgradeInsecureRequests"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Returns true if the the page is https and the content is upgradable from http\n   * requires 'security.mixed_content.upgrade_display_content' pref to be false.\n   * See browserUpgradeInsecureRequests for more details, this only happens\n   * when *not* upgrading purely for telemetry.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": "readonly",
                  "type": "boolean",
                  "name": "browserWouldUpgradeInsecureRequests"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * If true, toplevel data: URI navigation is allowed\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": null,
                  "type": "boolean",
                  "name": "forceAllowDataURI"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * If true, insecure redirects to a data: URI are allowed.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": null,
                  "type": "boolean",
                  "name": "allowInsecureRedirectToDataURI"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * If true, the content policy security check is excluded from web requests.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": null,
                  "type": "boolean",
                  "name": "skipContentPolicyCheckForWebRequest"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * If true, this is the load of a frame's original src attribute\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": null,
                  "type": "boolean",
                  "name": "originalFrameSrcLoad"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * The SEC_FORCE_INHERIT_PRINCIPAL flag may be dropped when a load info\n   * object is created.  Specifically, it will be dropped if the SANDBOXED_ORIGIN\n   * sandbox flag is also present.  This flag is set if SEC_FORCE_INHERIT_PRINCIPAL\n   * was dropped.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": "readonly",
                  "type": "boolean",
                  "name": "forceInheritPrincipalDropped"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * This is the inner window ID of the window in which the element being\n   * loaded lives.\n   *\n   * Note that this window ID can be 0 if the window is not\n   * available.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": "readonly",
                  "type": "unsigned long long",
                  "name": "innerWindowID"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * The BrowsingContext performing the load for this nsILoadInfo object.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": "readonly",
                  "type": "unsigned long long",
                  "name": "browsingContextID"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": "readonly",
                  "type": "BrowsingContext",
                  "name": "browsingContext"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * The BrowsingContext which the worker is associated.\n   *\n   * Note that this could be 0 if the load is not triggered in a WorkerScope.\n   * This value is only set and used in the parent process for some sitautions\n   * the channel is created in the parent process for Workers. Such as fetch().\n   * In content process, it is always 0.\n   * This value would not be propagated through IPC.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": null,
                  "type": "unsigned long long",
                  "name": "workerAssociatedBrowsingContextID"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": "readonly",
                  "type": "BrowsingContext",
                  "name": "workerAssociatedBrowsingContext"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Only when the element being loaded is <frame src=\"foo.html\">\n   * (or, more generally, if the element QIs to nsFrameLoaderOwner),\n   * the frameBrowsingContext is the browsing context containing the\n   * foo.html document.\n   *\n   * Note: For other cases, frameBrowsingContextID is 0.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": "readonly",
                  "type": "unsigned long long",
                  "name": "frameBrowsingContextID"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": "readonly",
                  "type": "BrowsingContext",
                  "name": "frameBrowsingContext"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * If the element being loaded is a nsFrameLoaderOwner,\n   * `targetBrowsingContext` is the Browsing Context which will contain the\n   * loading document (see `frameBrowsingContext`). Otherwise, it is the\n   * Browsing Context performing the load (see `browsingContext`).\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": "readonly",
                  "type": "unsigned long long",
                  "name": "targetBrowsingContextID"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": "readonly",
                  "type": "BrowsingContext",
                  "name": "targetBrowsingContext"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Resets the PrincipalToInherit to a freshly created NullPrincipal\n   * which inherits the origin attributes from the loadInfo.\n   *\n   * WARNING: Please only use that function if you know exactly what\n   * you are doing!!!\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "resetPrincipalToInheritToNullPrincipal",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Customized OriginAttributes within LoadInfo to allow overwriting of the\n   * default originAttributes from the loadingPrincipal.\n   *\n   * In chrome side, originAttributes.privateBrowsingId will always be 0 even if\n   * the usePrivateBrowsing is true, because chrome docshell won't set\n   * privateBrowsingId on origin attributes (See bug 1278664). This is to make\n   * sure nsILoadInfo and nsILoadContext have the same origin attributes.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "implicit_jscontext",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "binaryname",
                          "param": {
                            "kind": "attribute_$0",
                            "value": "ScriptableOriginAttributes"
                          }
                        }
                      }
                    ]
                  },
                  "readonly": null,
                  "type": "jsval",
                  "name": "originAttributes"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "nostdcall",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "binaryname",
                          "param": {
                            "kind": "attribute_$0",
                            "value": "GetOriginAttributes"
                          }
                        }
                      }
                    ]
                  },
                  "return_type": "OriginAttributes",
                  "name": "binaryGetOriginAttributes",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "nostdcall",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "binaryname",
                          "param": {
                            "kind": "attribute_$0",
                            "value": "SetOriginAttributes"
                          }
                        }
                      }
                    ]
                  },
                  "return_type": "void",
                  "name": "binarySetOriginAttributes",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "const_OriginAttributesRef",
                      "name": "aOriginAttrs"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": "%{ C++\n  inline mozilla::OriginAttributes GetOriginAttributes()\n  {\n    mozilla::OriginAttributes result;\n    mozilla::DebugOnly<nsresult> rv = GetOriginAttributes(&result);\n    MOZ_ASSERT(NS_SUCCEEDED(rv));\n    return result;\n  }\n%}\n\n  "
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Whenever a channel is evaluated by the ContentSecurityManager\n   * the first time, we set this flag to true to indicate that\n   * subsequent calls of AsyncOpen() do not have to enforce all\n   * security checks again. E.g., after a redirect there is no\n   * need to set up CORS again. We need this separate flag\n   * because the redirectChain might also contain internal\n   * redirects which might pollute the redirectChain so we can't\n   * rely on the size of the redirectChain-array to query whether\n   * a channel got redirected or not.\n   *\n   * Please note, once the flag is set to true it must remain true\n   * throughout the lifetime of the channel. Trying to set it\n   * to anything else than true will be discarded.\n   *\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": null,
                  "type": "boolean",
                  "name": "initialSecurityCheckDone"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Returns true if the load was triggered from an external application\n   * (e.g. Thunderbird). Please note that this flag will only ever be true\n   * if the load is of TYPE_DOCUMENT.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": null,
                  "type": "boolean",
                  "name": "loadTriggeredFromExternal"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * True if the tainting has been set by the service worker.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "infallible",
                          "param": null
                        }
                      }
                    ]
                  },
                  "readonly": "readonly",
                  "type": "boolean",
                  "name": "serviceWorkerTaintingSynthesized"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Whenever a channel gets redirected, append the redirect history entry of\n   * the channel which contains principal referrer and remote address [before\n   * the channels got redirected] to the loadinfo, so that at every point this\n   * array provides us information about all the redirects this channel went\n   * through.\n   * @param channelToDeriveFrom the channel being redirected\n   * @param aIsInternalRedirect should be true if the channel is going\n   *        through an internal redirect, otherwise false.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "appendRedirectHistoryEntry",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIChannel",
                      "name": "channelToDeriveFrom"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "boolean",
                          "name": "isInternalRedirect"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * An array of nsIRedirectHistoryEntry which stores redirects associated\n   * with this channel. This array is filled whether or not the channel has\n   * ever been opened. The last element of the array is associated with the\n   * most recent redirect. Please note, that this array *includes* internal\n   * redirects.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "implicit_jscontext",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": "readonly",
                  "type": "jsval",
                  "name": "redirectChainIncludingInternalRedirects"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * A C++-friendly version of redirectChain.\n   * Please note that this array has the same lifetime as the\n   * loadInfo object - use with caution!\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "notxpcom",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "nostdcall",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "binaryname",
                          "param": {
                            "kind": "attribute_$0",
                            "value": "RedirectChainIncludingInternalRedirects"
                          }
                        }
                      }
                    ]
                  },
                  "return_type": "nsIRedirectHistoryEntryArray",
                  "name": "binaryRedirectChainIncludingInternalRedirects",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Same as RedirectChain but does *not* include internal redirects.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "implicit_jscontext",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": "readonly",
                  "type": "jsval",
                  "name": "redirectChain"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * A C++-friendly version of redirectChain.\n   * Please note that this array has the same lifetime as the\n   * loadInfo object - use with caution!\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "notxpcom",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "nostdcall",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "binaryname",
                          "param": {
                            "kind": "attribute_$0",
                            "value": "RedirectChain"
                          }
                        }
                      }
                    ]
                  },
                  "return_type": "nsIRedirectHistoryEntryArray",
                  "name": "binaryRedirectChain",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * This array is only filled out when we are in the parent process and we are\n   * creating a loadInfo object or deserializing LoadInfoArgs into LoadInfo,\n   * as we ever only need in the parent process.\n   *\n   * The array is meant to be a list of principals of the documents that the\n   * browsing context, corresponding to this loadInfo object, is \"nested through\" in\n   * the sense of\n   * <https://html.spec.whatwg.org/multipage/browsers.html#browsing-context-nested-through>.\n   * Note that the array does not include the principal corresponding to the frame\n   * loading this request. The closest ancestor is at index zero and the top level\n   * ancestor is at the last index.\n   *\n   * If this is a toplevel content browsing context (i.e. toplevel document in spec\n   * terms), the list is empty.\n   *\n   * Otherwise the array is a list for the document we're nested through (again in\n   * the spec sense), with the principal of that document prepended. The\n   * ancestorPrincipals[0] entry for an iframe load will be the principal of the\n   * iframe element's owner document. The ancestorPrincipals[0] entry for an image\n   * loaded in an iframe will be the principal of the iframe element's owner\n   * document. This matches the ordering specified for Location.ancestorOrigins.\n   *\n   * Please note that this array has the same lifetime as the loadInfo object - use\n   * with caution!\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "notxpcom",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "nostdcall",
                          "param": null
                        }
                      }
                    ]
                  },
                  "return_type": "PrincipalArrayRef",
                  "name": "AncestorPrincipals",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * An array of BrowsingContext IDs which correspond to nsILoadInfo::AncestorPrincipals\n   * above.  AncestorBrowsingContextIDs[0] is the BrowsingContext ID of the frame\n   * associated with the principal at ancestorPrincipals[0], and so forth.\n   *\n   * Please note that this array has the same lifetime as the\n   * loadInfo object - use with caution!\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "notxpcom",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "nostdcall",
                          "param": null
                        }
                      }
                    ]
                  },
                  "return_type": "Uint64ArrayRef",
                  "name": "AncestorBrowsingContextIDs",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Sets the list of unsafe headers according to CORS spec, as well as\n   * potentially forces a preflight.\n   * Note that you do not need to set the Content-Type header. That will be\n   * automatically detected as needed.\n   *\n   * Only call this function when using the SEC_REQUIRE_CORS_INHERITS_SEC_CONTEXT mode.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "notxpcom",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "nostdcall",
                          "param": null
                        }
                      }
                    ]
                  },
                  "return_type": "void",
                  "name": "setCorsPreflightInfo",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "CStringArrayRef",
                      "name": "unsafeHeaders"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "boolean",
                          "name": "forcePreflight"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * A C++-friendly getter for the list of cors-unsafe headers.\n   * Please note that this array has the same lifetime as the\n   * loadInfo object - use with caution!\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "notxpcom",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "nostdcall",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "binaryname",
                          "param": {
                            "kind": "attribute_$0",
                            "value": "CorsUnsafeHeaders"
                          }
                        }
                      }
                    ]
                  },
                  "return_type": "CStringArrayRef",
                  "name": "corsUnsafeHeaders",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Returns value set through setCorsPreflightInfo.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": "readonly",
                  "type": "boolean",
                  "name": "forcePreflight"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * A C++ friendly getter for the forcePreflight flag.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": "readonly",
                  "type": "boolean",
                  "name": "isPreflight"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n  * Constants reflecting the channel tainting.  These are mainly defined here\n  * for script.  Internal C++ code should use the enum defined in LoadTainting.h.\n  * See LoadTainting.h for documentation.\n  */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "TAINTING_BASIC",
                  "value": "0"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "TAINTING_CORS",
                  "value": "1"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned long",
                  "name": "TAINTING_OPAQUE",
                  "value": "2"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Determine the associated channel's current tainting.  Note, this can\n   * change due to a service worker intercept, so it should be checked after\n   * OnStartRequest() fires.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "unsigned long",
                  "name": "tainting"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Note a new tainting level and possibly increase the current tainting\n   * to match.  If the tainting level is already greater than the given\n   * value, then there is no effect.  It is not possible to reduce the tainting\n   * level on an existing channel/loadinfo.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "maybeIncreaseTainting",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "unsigned long",
                      "name": "aTainting"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Various helper code to provide more convenient C++ access to the tainting\n   * attribute and maybeIncreaseTainting().\n   */"
                  }
                ],
                "code": "%{C++\n  static_assert(TAINTING_BASIC == static_cast<uint32_t>(mozilla::LoadTainting::Basic),\n                \"basic tainting enums should match\");\n  static_assert(TAINTING_CORS == static_cast<uint32_t>(mozilla::LoadTainting::CORS),\n                \"cors tainting enums should match\");\n  static_assert(TAINTING_OPAQUE == static_cast<uint32_t>(mozilla::LoadTainting::Opaque),\n                \"opaque tainting enums should match\");\n\n  mozilla::LoadTainting GetTainting()\n  {\n    uint32_t tainting = TAINTING_BASIC;\n    MOZ_ALWAYS_SUCCEEDS(GetTainting(&tainting));\n    return static_cast<mozilla::LoadTainting>(tainting);\n  }\n\n  void MaybeIncreaseTainting(mozilla::LoadTainting aTainting)\n  {\n    uint32_t tainting = static_cast<uint32_t>(aTainting);\n    MOZ_ALWAYS_SUCCEEDS(MaybeIncreaseTainting(tainting));\n  }\n%}\n\n  "
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Returns true if this load is for top level document.\n   * Note that the load for a sub-frame's document will return false here.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": "readonly",
                  "type": "boolean",
                  "name": "isTopLevelLoad"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * If this is non-null, this property represents two things: (1) the\n   * URI to be used for the principal if the channel with this loadinfo\n   * gets a principal based on URI and (2) the URI to use for a document\n   * created from the channel with this loadinfo.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": null,
                  "type": "nsIURI",
                  "name": "resultPrincipalURI"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * This is the URI used to create the most recent channel in the load's\n   * redirect chain, if it's different from channel's `originalURI`.\n   * This is always null for loads not handled by DocumentLoadListener. If\n   * non-null, channelCreationOriginalURI will be used instead of channel's\n   * originalURI to re-create the channel in the final content process selected\n   * to perform the load.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": null,
                  "type": "nsIURI",
                  "name": "channelCreationOriginalURI"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Returns a unique nsID used to construct the null principal for the\n   * resulting resource if the SANDBOXED_ORIGIN flag is set.  This is used by\n   * GetChannelResultPrincipal() to ensure that the same null principal is\n   * returned every time.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "nostdcall",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "notxpcom",
                          "param": null
                        }
                      }
                    ]
                  },
                  "return_type": "nsIDRef",
                  "name": "GetSandboxedNullPrincipalID",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Generates a new nsID to be returned by a future call to\n   * `GetSandboxedNullPrincipalID()`.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "nostdcall",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "notxpcom",
                          "param": null
                        }
                      }
                    ]
                  },
                  "return_type": "void",
                  "name": "ResetSandboxedNullPrincipalID",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Return the top-level principal, which is the principal of the top-level\n   * window.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "notxpcom",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "nostdcall",
                          "param": null
                        }
                      }
                    ]
                  },
                  "readonly": "readonly",
                  "type": "nsIPrincipal",
                  "name": "topLevelPrincipal"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Note which client (i.e. global) initiated this network request.  All\n   * nsGlobalWindow and WorkerPrivate can be converted to a ClientInfo to\n   * be set here.  While this is being added to support service worker\n   * FetchEvent, it can also be used to communicate other information about\n   * the source global context in the future.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "nostdcall",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "notxpcom",
                          "param": null
                        }
                      }
                    ]
                  },
                  "return_type": "void",
                  "name": "SetClientInfo",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "const_ClientInfoRef",
                      "name": "aClientInfo"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Get the ClientInfo for the global that initiated the network request,\n   * if it has been set.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "nostdcall",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "notxpcom",
                          "param": null
                        }
                      }
                    ]
                  },
                  "return_type": "const_MaybeClientInfoRef",
                  "name": "GetClientInfo",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Give a pre-allocated ClientSource to the channel LoadInfo.  This is\n   * intended to be used by docshell when loading windows without an\n   * initial about:blank document.  The docshell will allocate the ClientSource\n   * to represent the client that will be created as a result of the navigation\n   * network request.  If the channel succeeds and remains same-origin, then\n   * the result nsGlobalWindow will take ownership of the reserved ClientSource.\n   *\n   * This method is also called when a cross-origin redirect occurs.  A new\n   * ClientSource with a different UUID must be created in this case.\n   *\n   * This method automatically calls SetReservedClientInfo() with the\n   * ClientSource::Info().\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "nostdcall",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "notxpcom",
                          "param": null
                        }
                      }
                    ]
                  },
                  "return_type": "void",
                  "name": "GiveReservedClientSource",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "UniqueClientSourceMove",
                      "name": "aClientSource"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * This method takes ownership of the reserved ClientSource previously\n   * provided in GiveReservedClientSource().  It may return nullptr if the\n   * nsILoadInfo does not own a ClientSource object.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "nostdcall",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "notxpcom",
                          "param": null
                        }
                      }
                    ]
                  },
                  "return_type": "UniqueClientSource",
                  "name": "TakeReservedClientSource",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Note the reserved client that be created if this non-subresource\n   * network request succeeds.  Depending on the type of client this\n   * may be called directly or indirectly via GiveReservedClientSource().\n   * For example, web workers do not call give their ClientSource to\n   * the nsILoadInfo, but must still call this method to indicate the\n   * reserved client for their main script load.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "nostdcall",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "notxpcom",
                          "param": null
                        }
                      }
                    ]
                  },
                  "return_type": "void",
                  "name": "SetReservedClientInfo",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "const_ClientInfoRef",
                      "name": "aClientInfo"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * This will clear any existing reserved or initial client and override\n   * it with the given reserved client.  This is similar to calling\n   * TakeReservedClientSource() and then GiveReservedClientSource() with\n   * a new client as ClientChannelHelper does.  This method is needed,\n   * though, to perform this operation in the parent process where\n   * the LoadInfo does not have direct access to a ClientSource.\n   *\n   * If in doubt, do not call this method.  Its really only needed for\n   * a specific redirect case where the child has created a new client on\n   * redirect and we need to override the parent side's reserved client\n   * to match.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "nostdcall",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "notxpcom",
                          "param": null
                        }
                      }
                    ]
                  },
                  "return_type": "void",
                  "name": "OverrideReservedClientInfoInParent",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "const_ClientInfoRef",
                      "name": "aClientInfo"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Return the reserved ClientInfo for this load, if one has been set.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "nostdcall",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "notxpcom",
                          "param": null
                        }
                      }
                    ]
                  },
                  "return_type": "const_MaybeClientInfoRef",
                  "name": "GetReservedClientInfo",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Note that this non-subresource network request will result in\n   * re-using an existing \"initial\" active client.  This mainly only\n   * happens when an initial about:blank document is replaced with\n   * a real load in a window.  In these cases we need to track this\n   * initial client so that we may report its existence in a FetchEvent.\n   *\n   * Note, an nsILoadInfo may only have a reserved client or an\n   * initial client.  It should never have both.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "nostdcall",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "notxpcom",
                          "param": null
                        }
                      }
                    ]
                  },
                  "return_type": "void",
                  "name": "SetInitialClientInfo",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "const_ClientInfoRef",
                      "name": "aClientInfo"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Return the initial ClientInfo for this load, if one has been set.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "nostdcall",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "notxpcom",
                          "param": null
                        }
                      }
                    ]
                  },
                  "return_type": "const_MaybeClientInfoRef",
                  "name": "GetInitialClientInfo",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Note that this network request should be controlled by a service worker.\n   * For non-subresource requests this may be set during the load when\n   * the first service worker interception occurs.  For subresource requests\n   * it may be set by the source client if its already controlled by a\n   * service worker.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "nostdcall",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "notxpcom",
                          "param": null
                        }
                      }
                    ]
                  },
                  "return_type": "void",
                  "name": "SetController",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "const_ServiceWorkerDescriptorRef",
                      "name": "aServiceWorker"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Clear the service worker controller for this channel.  This should only\n   * be used for window navigation redirects.  By default we want to keep\n   * the controller in all other cases.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "nostdcall",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "notxpcom",
                          "param": null
                        }
                      }
                    ]
                  },
                  "return_type": "void",
                  "name": "ClearController",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Get the service worker controlling this network request, if one has\n   * been set.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "nostdcall",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "notxpcom",
                          "param": null
                        }
                      }
                    ]
                  },
                  "return_type": "const_MaybeServiceWorkerDescriptorRef",
                  "name": "GetController",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Set a custom performance storage. This is meant to be executed only for\n   * workers. If a PerformanceStorage is not set, the loadingDocument->Window\n   * Performance object will be returned instead.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "nostdcall",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "notxpcom",
                          "param": null
                        }
                      }
                    ]
                  },
                  "return_type": "void",
                  "name": "SetPerformanceStorage",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "PerformanceStoragePtr",
                      "name": "aPerformanceStorage"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Get the custom PerformanceStorage if set by SetPerformanceStorage.\n   * Otherwise the loadingDocument->Window Performance object will be returned\n   * instead if all the following conditions are met:\n   * - the triggeringPrincipal is the same as the loadingDocument's principal.\n   * - if the external content policy type is TYPE_SUBDOCUMENT then loading\n   *   wasn't caused by processing the attributes of the browsing context\n   *   container.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "nostdcall",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "notxpcom",
                          "param": null
                        }
                      }
                    ]
                  },
                  "return_type": "PerformanceStoragePtr",
                  "name": "GetPerformanceStorage",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Returns the CSP (or Preload CSP for preloads) which should be enforced\n   * when fetching the resource this loadinfo belongs to.\n   *\n   * a) Non-navigations:\n   * For non-navigation loads, GetCsp() returns what the spec refers to as the\n   * \"request's client's global object's CSP list\". In practice, if this is the\n   * loadinfo of a subresource load (e.g an image load), then GetCsp() or\n   * GetPreloadCSP() returns the CSP of the document which embeds the image.\n   * The returned CSP includes any policy delivered through the HTTP header or\n   * also through the meta tag (modulo the difference for preloads, e.g. image\n   * preloads have to query GetPreloadCsp() because at the time of preloading\n   * we are not entirely sure if the Meta CSP will be applied to the document\n   * in the end or not). Please note that GetCSPToInherit() called on a\n   * loadinfo for any non-navigation always returns null.\n   *\n   * b) Navigations:\n   *   * Top-level loads:\n   *     For top-level loads (navigations) GetCsp() will return null, unless\n   *     the navigation is started by a WebExtension, in which case it will\n   *     return the CSP of the webextension, if any.\n   *     If you need to query the CSP that potentially should apply to the\n   *     new top-level load, you have to query GetCspToInherit(), which is\n   *     the CSP of the request's client's global object, just like GetCsp()\n   *     is for non-navigation requests.\n   *\n   *   * Iframe-loads:\n   *     For iframe-loads (navigations) GetCsp() will return the CSP of the\n   *     parent document, unless the navigation is started by a WebExtension,\n   *     in which case it will return the CSP of the webextension, if any.\n   *\n   * If you need to query the CSP that should potentially be inherited\n   * into the new document, you have to query GetCSPToInherit().\n   *\n   * TODO Bug 1557114:\n   * After evaluating what CSP to use for frame navigations we should\n   * update the above documentation to match the outcome of Bug 1557114.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "notxpcom",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "nostdcall",
                          "param": null
                        }
                      }
                    ]
                  },
                  "return_type": "CSPRef",
                  "name": "GetCsp",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "notxpcom",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "nostdcall",
                          "param": null
                        }
                      }
                    ]
                  },
                  "return_type": "CSPRef",
                  "name": "GetPreloadCsp",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "notxpcom",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "nostdcall",
                          "param": null
                        }
                      }
                    ]
                  },
                  "return_type": "CSPRef",
                  "name": "GetCspToInherit",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n    * The service worker and fetch specifications require returning the\n    * exact tainting level of the Response passed to FetchEvent.respondWith().\n    * This method allows us to override the tainting level in that case.\n    *\n    * NOTE: This should not be used outside of service worker code! Use\n    *       nsILoadInfo::MaybeIncreaseTainting() instead.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "nostdcall",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "notxpcom",
                          "param": null
                        }
                      }
                    ]
                  },
                  "return_type": "void",
                  "name": "SynthesizeServiceWorkerTainting",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "LoadTainting",
                      "name": "aTainting"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n    * The top-level document has been user-interacted.\n    */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": null,
                  "type": "boolean",
                  "name": "documentHasUserInteracted"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n    * During a top-level document channel redirect from tracking to\n    * non-tracking resources, our anti-tracking heuristic, grants the storage\n    * access permission for a short amount of seconds (See\n    * privacy.restrict3rdpartystorage.expiration_redirect pref).\n    * We use this flag to remember this decision even if this channel is part\n    * of a chain of redirects.\n    */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": null,
                  "type": "boolean",
                  "name": "allowListFutureDocumentsCreatedFromThisRedirectChain"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Indicates that we need to check if we should apply the anti-tracking\n   * heuristic after the channel has been classified.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": null,
                  "type": "boolean",
                  "name": "needForCheckingAntiTrackingHeuristic"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * A snapshot of the nonce at load start time which is used for CSP\n   * checks and only set for:\n   *  * TYPE_SCRIPT and\n   *  * TYPE_STYLESHEET\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": null,
                  "type": "AString",
                  "name": "cspNonce"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": null,
                  "type": "AString",
                  "name": "integrityMetadata"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * List of possible reasons the request associated with this load info\n   * may have been blocked, set by various content blocking checkers.\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "uint32_t",
                  "name": "BLOCKING_REASON_NONE",
                  "value": "0"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "uint32_t",
                  "name": "BLOCKING_REASON_CORSDISABLED",
                  "value": "1001"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "uint32_t",
                  "name": "BLOCKING_REASON_CORSDIDNOTSUCCEED",
                  "value": "1002"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "uint32_t",
                  "name": "BLOCKING_REASON_CORSREQUESTNOTHTTP",
                  "value": "1003"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "uint32_t",
                  "name": "BLOCKING_REASON_CORSMULTIPLEALLOWORIGINNOTALLOWED",
                  "value": "1004"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "uint32_t",
                  "name": "BLOCKING_REASON_CORSMISSINGALLOWORIGIN",
                  "value": "1005"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "uint32_t",
                  "name": "BLOCKING_REASON_CORSNOTSUPPORTINGCREDENTIALS",
                  "value": "1006"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "uint32_t",
                  "name": "BLOCKING_REASON_CORSALLOWORIGINNOTMATCHINGORIGIN",
                  "value": "1007"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "uint32_t",
                  "name": "BLOCKING_REASON_CORSMISSINGALLOWCREDENTIALS",
                  "value": "1008"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "uint32_t",
                  "name": "BLOCKING_REASON_CORSORIGINHEADERNOTADDED",
                  "value": "1009"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "uint32_t",
                  "name": "BLOCKING_REASON_CORSEXTERNALREDIRECTNOTALLOWED",
                  "value": "1010"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "uint32_t",
                  "name": "BLOCKING_REASON_CORSPREFLIGHTDIDNOTSUCCEED",
                  "value": "1011"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "uint32_t",
                  "name": "BLOCKING_REASON_CORSINVALIDALLOWMETHOD",
                  "value": "1012"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "uint32_t",
                  "name": "BLOCKING_REASON_CORSMETHODNOTFOUND",
                  "value": "1013"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "uint32_t",
                  "name": "BLOCKING_REASON_CORSINVALIDALLOWHEADER",
                  "value": "1014"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "uint32_t",
                  "name": "BLOCKING_REASON_CORSMISSINGALLOWHEADERFROMPREFLIGHT",
                  "value": "1015"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "uint32_t",
                  "name": "BLOCKING_REASON_CLASSIFY_MALWARE_URI",
                  "value": "2001"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "uint32_t",
                  "name": "BLOCKING_REASON_CLASSIFY_PHISHING_URI",
                  "value": "2002"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "uint32_t",
                  "name": "BLOCKING_REASON_CLASSIFY_UNWANTED_URI",
                  "value": "2003"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "uint32_t",
                  "name": "BLOCKING_REASON_CLASSIFY_TRACKING_URI",
                  "value": "2004"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "uint32_t",
                  "name": "BLOCKING_REASON_CLASSIFY_BLOCKED_URI",
                  "value": "2005"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "uint32_t",
                  "name": "BLOCKING_REASON_CLASSIFY_HARMFUL_URI",
                  "value": "2006"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "uint32_t",
                  "name": "BLOCKING_REASON_CLASSIFY_CRYPTOMINING_URI",
                  "value": "2007"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "uint32_t",
                  "name": "BLOCKING_REASON_CLASSIFY_FINGERPRINTING_URI",
                  "value": "2008"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "uint32_t",
                  "name": "BLOCKING_REASON_CLASSIFY_SOCIALTRACKING_URI",
                  "value": "2009"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "uint32_t",
                  "name": "BLOCKING_REASON_CLASSIFY_EMAILTRACKING_URI",
                  "value": "2010"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "uint32_t",
                  "name": "BLOCKING_REASON_MIXED_BLOCKED",
                  "value": "3001"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  },
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "uint32_t",
                  "name": "BLOCKING_REASON_CONTENT_POLICY_GENERAL",
                  "value": "4000"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "uint32_t",
                  "name": "BLOCKING_REASON_CONTENT_POLICY_NO_DATA_PROTOCOL",
                  "value": "4001"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "uint32_t",
                  "name": "BLOCKING_REASON_CONTENT_POLICY_WEBEXT",
                  "value": "4002"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "uint32_t",
                  "name": "BLOCKING_REASON_CONTENT_POLICY_CONTENT_BLOCKED",
                  "value": "4003"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "uint32_t",
                  "name": "BLOCKING_REASON_CONTENT_POLICY_DATA_DOCUMENT",
                  "value": "4004"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "uint32_t",
                  "name": "BLOCKING_REASON_CONTENT_POLICY_WEB_BROWSER",
                  "value": "4005"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "uint32_t",
                  "name": "BLOCKING_REASON_CONTENT_POLICY_PRELOAD",
                  "value": "4006"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "uint32_t",
                  "name": "BLOCKING_REASON_NOT_SAME_ORIGIN",
                  "value": "5000"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "uint32_t",
                  "name": "BLOCKING_REASON_EXTENSION_WEBREQUEST",
                  "value": "6000"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * If the request associated with this load info was blocked by some of\n   * our content or load blockers, the reason can be found here.\n   * Note that setting this attribute has NO EFFECT on blocking the request.\n   * This attribute is only informative!\n   *\n   * By default the value is '0' - NONE.\n   * Each write rewrites the last value.\n   * Can be accessed only on a single thread.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": null,
                  "type": "unsigned long",
                  "name": "requestBlockingReason"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n    * The object in charged to receive CSP violation events. It can be null.\n    * This attribute will be merged into the CSP object eventually.\n    * See bug 1500908.\n    */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": null,
                  "type": "nsICSPEventListener",
                  "name": "cspEventListener"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * This attribute will be true if this is a load triggered by\n   * https://html.spec.whatwg.org/multipage/iframe-embed-object.html#process-the-iframe-attributes\n   * or https://html.spec.whatwg.org/multipage/obsolete.html#process-the-frame-attributes\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": "readonly",
                  "type": "boolean",
                  "name": "isFromProcessingFrameAttributes"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "enum_code",
                  "name": "CrossOriginOpenerPolicy",
                  "base": "8",
                  "values": {
                    "kind": "cenumlist",
                    "first_value": {
                      "kind": "cenum",
                      "comment": [],
                      "identifier": "OPENER_POLICY_UNSAFE_NONE",
                      "value": {
                        "kind": "cenum_$0",
                        "value": "0"
                      }
                    },
                    "other_values": [
                      {
                        "kind": "cenumlist_$0",
                        "value": {
                          "kind": "cenum",
                          "comment": [],
                          "identifier": "OPENER_POLICY_SAME_ORIGIN",
                          "value": {
                            "kind": "cenum_$0",
                            "value": "1"
                          }
                        }
                      },
                      {
                        "kind": "cenumlist_$0",
                        "value": {
                          "kind": "cenum",
                          "comment": [],
                          "identifier": "OPENER_POLICY_SAME_ORIGIN_ALLOW_POPUPS",
                          "value": {
                            "kind": "cenum_$0",
                            "value": "2"
                          }
                        }
                      },
                      {
                        "kind": "cenumlist_$0",
                        "value": {
                          "kind": "cenum",
                          "comment": [],
                          "identifier": "OPENER_POLICY_EMBEDDER_POLICY_REQUIRE_CORP_FLAG",
                          "value": {
                            "kind": "cenum_$0",
                            "value": "0x10"
                          }
                        }
                      },
                      {
                        "kind": "cenumlist_$0",
                        "value": {
                          "kind": "cenum",
                          "comment": [],
                          "identifier": "OPENER_POLICY_SAME_ORIGIN_EMBEDDER_POLICY_REQUIRE_CORP",
                          "value": {
                            "kind": "cenum_$0",
                            "value": {
                              "kind": "num_$1"
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "enum_code",
                  "name": "CrossOriginEmbedderPolicy",
                  "base": "8",
                  "values": {
                    "kind": "cenumlist",
                    "first_value": {
                      "kind": "cenum",
                      "comment": [],
                      "identifier": "EMBEDDER_POLICY_NULL",
                      "value": {
                        "kind": "cenum_$0",
                        "value": "0"
                      }
                    },
                    "other_values": [
                      {
                        "kind": "cenumlist_$0",
                        "value": {
                          "kind": "cenum",
                          "comment": [],
                          "identifier": "EMBEDDER_POLICY_REQUIRE_CORP",
                          "value": {
                            "kind": "cenum_$0",
                            "value": "1"
                          }
                        }
                      },
                      {
                        "kind": "cenumlist_$0",
                        "value": {
                          "kind": "cenum",
                          "comment": [],
                          "identifier": "EMBEDDER_POLICY_CREDENTIALLESS",
                          "value": {
                            "kind": "cenum_$0",
                            "value": "2"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * This attribute is the loading context's cross origin embedder policy.\n   * The value is initialized with corresponding WindowContext which get by\n   * innerWindowIID in the nsILoadInfo.\n   * It also could be set by workers when fetch is called under\n   * the workers' scope.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": null,
                  "type": "nsILoadInfo_CrossOriginEmbedderPolicy",
                  "name": "loadingEmbedderPolicy"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * This attribute will be true if the top level document has COEP:\n   * credentialless enabled in Origin Trial.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": null,
                  "type": "boolean",
                  "name": "isOriginTrialCoepCredentiallessEnabledForTopLevel"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * This attribute will be true if this is a load triggered by a media\n   * element.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": null,
                  "type": "boolean",
                  "name": "isMediaRequest"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * This attribute will be true if this is a load triggered by a media\n   * element and it's an initial request.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": null,
                  "type": "boolean",
                  "name": "isMediaInitialRequest"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * This attribute will be true if the fetch request is from object or embed\n   * elements\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": null,
                  "type": "boolean",
                  "name": "isFromObjectOrEmbed"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * This attribute will be true if the URL is known to be possibly broken and\n   * CheckForBrokenChromeURL and RecordZeroLengthEvent should be skipped.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": "readonly",
                  "type": "boolean",
                  "name": "shouldSkipCheckForBrokenURLOrZeroSized"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * If this is non-null, this property holds the URI as it was before query\n   * stripping was performed.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": null,
                  "type": "nsIURI",
                  "name": "unstrippedURI"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Propagated information from InterceptedHttpChannel\n   * It should be null when the channel is not created from FetchEvent.request\n   * or ServiceWorker NavigationPreload.\n   * nsIFetchEventInfo is C++ only, so it is not an attribute.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "notxpcom",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "nostdcall",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "binaryname",
                          "param": {
                            "kind": "attribute_$0",
                            "value": "InterceptionInfo"
                          }
                        }
                      }
                    ]
                  },
                  "return_type": "nsIInterceptionInfo",
                  "name": "binaryInterceptionInfo",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": [
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "notxpcom",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "nostdcall",
                          "param": null
                        }
                      },
                      {
                        "kind": "attributes_$0",
                        "attr": {
                          "kind": "attribute",
                          "name": "binaryname",
                          "param": {
                            "kind": "attribute_$0",
                            "value": "SetInterceptionInfo"
                          }
                        }
                      }
                    ]
                  },
                  "return_type": "void",
                  "name": "binarySetInterceptionInfo",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIInterceptionInfo",
                      "name": "info"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Whether nsICookieInjector has injected a cookie for this request to\n   * handle a cookie banner. This is only done for top-level requests.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": null,
                  "type": "boolean",
                  "name": "hasInjectedCookieForCookieBannerHandling"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Whether the load has gone through the URL bar, where the fixup had to add * the protocol scheme.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "infallible",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": null,
                  "type": "boolean",
                  "name": "wasSchemelessInput"
                }
              }
            }
          ]
        }
      }
    },
    "\n"
  ]
}