{
  "kind": "idlfile",
  "contents": [
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 4 -*- */"
      }
    },
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */"
      }
    },
    {
      "kind": "INCLUDE",
      "ident": "nsIURI"
    },
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIURIMutator",
      "base": null,
      "body": null
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": {
        "kind": "DOC_COMMENT",
        "contents": "/**\n * The nsIURL interface provides convenience methods that further\n * break down the path portion of nsIURI:\n *\n * http://host/directory/fileBaseName.fileExtension?query\n * http://host/directory/fileBaseName.fileExtension#ref\n *            \\          \\                       /\n *             \\          -----------------------\n *              \\                   |          /\n *               \\               fileName     /\n *                ----------------------------\n *                            |\n *                        filePath\n */"
      },
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "builtinclass",
              "param": null
            }
          },
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "86adcd89-0b70-47a2-b0fe-5bb2c5f37e31"
              }
            }
          }
        ]
      },
      "name": "nsIURL",
      "base": {
        "kind": "ifacebase",
        "extends": "nsIURI"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/*************************************************************************\n     * The URL path is broken down into the following principal components:\n     *\n     * attribute AUTF8String filePath;\n     * attribute AUTF8String query;\n     *\n     * These are inherited from nsIURI.\n     */"
                  },
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/*************************************************************************\n     * The URL filepath is broken down into the following sub-components:\n     */"
                  },
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * Returns the directory portion of a URL.  If the URL denotes a path to a\n     * directory and not a file, e.g. http://host/foo/bar/, then the Directory\n     * attribute accesses the complete /foo/bar/ portion, and the FileName is\n     * the empty string. If the trailing slash is omitted, then the Directory\n     * is /foo/ and the file is bar (i.e. this is a syntactic, not a semantic\n     * breakdown of the Path).  And hence don't rely on this for something to\n     * be a definitely be a file. But you can get just the leading directory\n     * portion for sure.\n     *\n     * Some characters may be escaped.\n     */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "AUTF8String",
                  "name": "directory"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * Returns the file name portion of a URL.  If the URL denotes a path to a\n     * directory and not a file, e.g. http://host/foo/bar/, then the Directory\n     * attribute accesses the complete /foo/bar/ portion, and the FileName is\n     * the empty string. Note that this is purely based on searching for the\n     * last trailing slash. And hence don't rely on this to be a definite file.\n     *\n     * Some characters may be escaped.\n     */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "AUTF8String",
                  "name": "fileName"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/*************************************************************************\n     * The URL filename is broken down even further:\n     */"
                  },
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * Returns the file basename portion of a filename in a url.\n     *\n     * Some characters may be escaped.\n     */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "AUTF8String",
                  "name": "fileBaseName"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * Returns the file extension portion of a filename in a url.  If a file\n     * extension does not exist, the empty string is returned.\n     *\n     * Some characters may be escaped.\n     */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "AUTF8String",
                  "name": "fileExtension"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * This method takes a uri and compares the two.  The common uri portion\n     * is returned as a string.  The minimum common uri portion is the\n     * protocol, and any of these if present:  login, password, host and port\n     * If no commonality is found, \"\" is returned.  If they are identical, the\n     * whole path with file/ref/etc. is returned.  For file uris, it is\n     * expected that the common spec would be at least \"file:///\" since '/' is\n     * a shared common root.\n     *\n     * Examples:\n     *    this.spec               aURIToCompare.spec        result\n     * 1) http://mozilla.org/     http://www.mozilla.org/   \"\"\n     * 2) http://foo.com/bar/     ftp://foo.com/bar/        \"\"\n     * 3) http://foo.com:8080/    http://foo.com/bar/       \"\"\n     * 4) ftp://user@foo.com/     ftp://user:pw@foo.com/    \"\"\n     * 5) ftp://foo.com/bar/      ftp://foo.com/bar         ftp://foo.com/\n     * 6) ftp://foo.com/bar/      ftp://foo.com/bar/b.html  ftp://foo.com/bar/\n     * 7) http://foo.com/a.htm#i  http://foo.com/b.htm      http://foo.com/\n     * 8) ftp://foo.com/c.htm#i   ftp://foo.com/c.htm       ftp://foo.com/c.htm\n     * 9) file:///a/b/c.html      file:///d/e/c.html        file:///\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "AUTF8String",
                  "name": "getCommonBaseSpec",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIURI",
                      "name": "aURIToCompare"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * This method tries to create a string which specifies the location of the\n     * argument relative to |this|.  If the argument and |this| are equal, the\n     * method returns \"\".  If any of the URIs' scheme, host, userpass, or port\n     * don't match, the method returns the full spec of the argument.\n     *\n     * Examples:\n     *    this.spec               aURIToCompare.spec        result\n     * 1) http://mozilla.org/     http://www.mozilla.org/   http://www.mozilla.org/\n     * 2) http://mozilla.org/     http://www.mozilla.org    http://www.mozilla.org/\n     * 3) http://foo.com/bar/     http://foo.com:80/bar/    \"\"\n     * 4) http://foo.com/         http://foo.com/a.htm#b    a.html#b\n     * 5) http://foo.com/a/b/     http://foo.com/c          ../../c\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "AUTF8String",
                  "name": "getRelativeSpec",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIURI",
                      "name": "aURIToCompare"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "builtinclass",
              "param": null
            }
          },
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "25072eb8-f1e6-482f-9ca9-eddd3d65169a"
              }
            }
          }
        ]
      },
      "name": "nsIURLMutator",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "must_use",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "nsIURIMutator",
                  "name": "setFileName",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "AUTF8String",
                      "name": "aFileName"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "must_use",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "nsIURIMutator",
                  "name": "setFileBaseName",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "AUTF8String",
                      "name": "aFileBaseName"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "must_use",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "nsIURIMutator",
                  "name": "setFileExtension",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "AUTF8String",
                      "name": "aFileExtension"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n"
  ]
}