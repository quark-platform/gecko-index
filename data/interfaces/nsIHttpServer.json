{
  "kind": "idlfile",
  "contents": [
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */"
      }
    },
    {
      "kind": "INCLUDE",
      "ident": "nsISupports"
    },
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIInputStream",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIFile",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIOutputStream",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsISimpleEnumerator",
      "base": null,
      "body": null
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIHttpServer",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIHttpServerStoppedCallback",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIHttpRequestHandler",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIHttpRequest",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIHttpResponse",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIHttpServerIdentity",
      "base": null,
      "body": null
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": {
        "kind": "DOC_COMMENT",
        "contents": "/**\n * An interface which represents an HTTP server.\n */"
      },
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "cea8812e-faa6-4013-9396-f9936cbb74ec"
              }
            }
          }
        ]
      },
      "name": "nsIHttpServer",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Starts up this server, listening upon the given port.\n   *\n   * @param port\n   *   the port upon which listening should happen, or -1 if no specific port is\n   *   desired\n   * @throws NS_ERROR_ALREADY_INITIALIZED\n   *   if this server is already started\n   * @throws NS_ERROR_NOT_AVAILABLE\n   *   if the server is not started and cannot be started on the desired port\n   *   (perhaps because the port is already in use or because the process does\n   *   not have privileges to do so)\n   * @note\n   *   Behavior is undefined if this method is called after stop() has been\n   *   called on this but before the provided callback function has been\n   *   called.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "start",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "long",
                      "name": "port"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Starts up this server, listening upon the given port on a ipv6 adddress.\n   *\n   * @param port\n   *   the port upon which listening should happen, or -1 if no specific port is\n   *   desired\n   * @throws NS_ERROR_ALREADY_INITIALIZED\n   *   if this server is already started\n   * @throws NS_ERROR_NOT_AVAILABLE\n   *   if the server is not started and cannot be started on the desired port\n   *   (perhaps because the port is already in use or because the process does\n   *   not have privileges to do so)\n   * @note\n   *   Behavior is undefined if this method is called after stop() has been\n   *   called on this but before the provided callback function has been\n   *   called.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "start_ipv6",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "long",
                      "name": "port"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Like the two functions above, but this server supports both IPv6 and\n   * IPv4 addresses.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "start_dualStack",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "long",
                      "name": "port"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Shuts down this server if it is running (including the period of time after\n   * stop() has been called but before the provided callback has been called).\n   *\n   * @param callback\n   *   an asynchronous callback used to notify the user when this server is\n   *   stopped and all pending requests have been fully served\n   * @throws NS_ERROR_NULL_POINTER\n   *   if callback is null\n   * @throws NS_ERROR_UNEXPECTED\n   *   if this server is not running\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "stop",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIHttpServerStoppedCallback",
                      "name": "callback"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Associates the local file represented by the string file with all requests\n   * which match request.\n   *\n   * @param path\n   *   the path which is to be mapped to the given file; must begin with \"/\" and\n   *   be a valid URI path (i.e., no query string, hash reference, etc.)\n   * @param file\n   *   the file to serve for the given path, or null to remove any mapping that\n   *   might exist; this file must exist for the lifetime of the server\n   * @param handler\n   *   an optional object which can be used to handle any further changes.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "registerFile",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "string",
                      "name": "path"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "nsIFile",
                          "name": "file"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": {
                            "kind": "attributes",
                            "first_attribute": {
                              "kind": "attribute",
                              "name": "optional",
                              "param": null
                            },
                            "other_attributes": []
                          },
                          "refType": "in",
                          "type": "nsIHttpRequestHandler",
                          "name": "handler"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Registers a custom path handler.\n   *\n   * @param path\n   *   the path on the server (beginning with a \"/\") which is to be handled by\n   *   handler; this path must not include a query string or hash component; it\n   *   also should usually be canonicalized, since most browsers will do so\n   *   before sending otherwise-matching requests\n   * @param handler\n   *   an object which will handle any requests for the given path, or null to\n   *   remove any existing handler; if while the server is running the handler\n   *   throws an exception while responding to a request, an HTTP 500 response\n   *   will be returned\n   * @throws NS_ERROR_INVALID_ARG\n   *   if path does not begin with a \"/\"\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "registerPathHandler",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "string",
                      "name": "path"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "nsIHttpRequestHandler",
                          "name": "handler"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Registers a custom prefix handler.\n   *\n   * @param prefix\n   *   the path on the server (beginning and ending with \"/\") which is to be\n   *   handled by handler; this path must not include a query string or hash\n   *   component. All requests that start with this prefix will be directed to\n   *   the given handler.\n   * @param handler\n   *   an object which will handle any requests for the given path, or null to\n   *   remove any existing handler; if while the server is running the handler\n   *   throws an exception while responding to a request, an HTTP 500 response\n   *   will be returned\n   * @throws NS_ERROR_INVALID_ARG\n   *   if path does not begin with a \"/\" or does not end with a \"/\"\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "registerPrefixHandler",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "string",
                      "name": "prefix"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "nsIHttpRequestHandler",
                          "name": "handler"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Registers a custom error page handler.\n   *\n   * @param code\n   *   the error code which is to be handled by handler\n   * @param handler\n   *   an object which will handle any requests which generate the given status\n   *   code, or null to remove any existing handler.  If the handler throws an\n   *   exception during server operation, fallback is to the genericized error\n   *   handler (the x00 version), then to 500, using a user-defined error\n   *   handler if one exists or the server default handler otherwise.  Fallback\n   *   will never occur from a user-provided handler that throws to the same\n   *   handler as provided by the server, e.g. a throwing user 404 falls back to\n   *   400, not a server-provided 404 that might not throw.\n   * @note\n   *   If the error handler handles HTTP 500 and throws, behavior is undefined.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "registerErrorHandler",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "unsigned long",
                      "name": "code"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "nsIHttpRequestHandler",
                          "name": "handler"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Maps all requests to paths beneath path to the corresponding file beneath\n   * dir.\n   *\n   * @param path\n   *   the absolute path on the server against which requests will be served\n   *   from dir (e.g., \"/\", \"/foo/\", etc.); must begin and end with a forward\n   *   slash\n   * @param dir\n   *   the directory to be used to serve all requests for paths underneath path\n   *   (except those further overridden by another, deeper path registered with\n   *   another directory); if null, any current mapping for the given path is\n   *   removed\n   * @throws NS_ERROR_INVALID_ARG\n   *   if dir is non-null and does not exist or is not a directory, or if path\n   *   does not begin with and end with a forward slash\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "registerDirectory",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "string",
                      "name": "path"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "nsIFile",
                          "name": "dir"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Associates files with the given extension with the given Content-Type when\n   * served by this server, in the absence of any file-specific information\n   * about the desired Content-Type.  If type is empty, removes any extant\n   * mapping, if one is present.\n   *\n   * @throws NS_ERROR_INVALID_ARG\n   *   if the given type is not a valid header field value, i.e. if it doesn't\n   *   match the field-value production in RFC 2616\n   * @note\n   *   No syntax checking is done of the given type, beyond ensuring that it is\n   *   a valid header field value.  Behavior when not given a string matching\n   *   the media-type production in RFC 2616 section 3.7 is undefined.\n   *   Implementations may choose to define specific behavior for types which do\n   *   not match the production, such as for CGI functionality.\n   * @note\n   *   Implementations MAY treat type as a trusted argument; users who fail to\n   *   generate this string from trusted data risk security vulnerabilities.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "registerContentType",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "string",
                      "name": "extension"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "string",
                          "name": "type"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Sets the handler used to display the contents of a directory if\n   * the directory contains no index page.\n   *\n   * @param handler\n   *   an object which will handle any requests for directories which\n   *   do not contain index pages, or null to reset to the default\n   *   index handler; if while the server is running the handler\n   *   throws an exception while responding to a request, an HTTP 500\n   *   response will be returned.  An nsIFile corresponding to the\n   *   directory is available from the metadata object passed to the\n   *   handler, under the key \"directory\".\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "setIndexHandler",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIHttpRequestHandler",
                      "name": "handler"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** Represents the locations at which this server is reachable. */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "nsIHttpServerIdentity",
                  "name": "identity"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Retrieves the string associated with the given key in this, for the given\n   * path's saved state.  All keys are initially associated with the empty\n   * string.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "AString",
                  "name": "getState",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "AString",
                      "name": "path"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "AString",
                          "name": "key"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Sets the string associated with the given key in this, for the given path's\n   * saved state.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "setState",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "AString",
                      "name": "path"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "AString",
                          "name": "key"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "AString",
                          "name": "value"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Retrieves the string associated with the given key in this, in\n   * entire-server saved state.  All keys are initially associated with the\n   * empty string.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "AString",
                  "name": "getSharedState",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "AString",
                      "name": "key"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Sets the string associated with the given key in this, in entire-server\n   * saved state.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "setSharedState",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "AString",
                      "name": "key"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "AString",
                          "name": "value"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Retrieves the object associated with the given key in this in\n   * object-valued saved state.  All keys are initially associated with null.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "nsISupports",
                  "name": "getObjectState",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "AString",
                      "name": "key"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Sets the object associated with the given key in this in object-valued\n   * saved state.  The value may be null.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "setObjectState",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "AString",
                      "name": "key"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "nsISupports",
                          "name": "value"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": {
        "kind": "DOC_COMMENT",
        "contents": "/**\n * An interface through which a notification of the complete stopping (socket\n * closure, in-flight requests all fully served and responded to) of an HTTP\n * server may be received.\n */"
      },
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "function",
              "param": null
            }
          },
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "925a6d33-9937-4c63-abe1-a1c56a986455"
              }
            }
          }
        ]
      },
      "name": "nsIHttpServerStoppedCallback",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/** Called when the corresponding server has been fully stopped. */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "onStopped",
                  "params": null,
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": {
        "kind": "DOC_COMMENT",
        "contents": "/**\n * Represents a set of names for a server, one of which is the primary name for\n * the server and the rest of which are secondary.  By default every server will\n * contain (\"http\", \"localhost\", port) and (\"http\", \"127.0.0.1\", port) as names,\n * where port is what was provided to the corresponding server when started;\n * however, except for their being removed when the corresponding server stops\n * they have no special importance.\n */"
      },
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "a89de175-ae8e-4c46-91a5-0dba99bbd284"
              }
            }
          }
        ]
      },
      "name": "nsIHttpServerIdentity",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * The primary scheme at which the corresponding server is located, defaulting\n   * to 'http'.  This name will be the value of nsIHttpRequest.scheme for\n   * HTTP/1.0 requests.\n   *\n   * This value is always set when the corresponding server is running.  If the\n   * server is not running, this value is set only if it has been set to a\n   * non-default name using setPrimary.  In this case reading this value will\n   * throw NS_ERROR_NOT_INITIALIZED.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "string",
                  "name": "primaryScheme"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * The primary name by which the corresponding server is known, defaulting to\n   * 'localhost'.  This name will be the value of nsIHttpRequest.host for\n   * HTTP/1.0 requests.\n   *\n   * This value is always set when the corresponding server is running.  If the\n   * server is not running, this value is set only if it has been set to a\n   * non-default name using setPrimary.  In this case reading this value will\n   * throw NS_ERROR_NOT_INITIALIZED.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "string",
                  "name": "primaryHost"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * The primary port on which the corresponding server runs, defaulting to the\n   * associated server's port.  This name will be the value of\n   * nsIHttpRequest.port for HTTP/1.0 requests.\n   *\n   * This value is always set when the corresponding server is running.  If the\n   * server is not running, this value is set only if it has been set to a\n   * non-default name using setPrimary.  In this case reading this value will\n   * throw NS_ERROR_NOT_INITIALIZED.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "long",
                  "name": "primaryPort"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Adds a location at which this server may be accessed.\n   *\n   * @throws NS_ERROR_ILLEGAL_VALUE\n   *   if scheme or host do not match the scheme or host productions imported\n   *   into RFC 2616 from RFC 2396, or if port is not a valid port number\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "add",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "string",
                      "name": "scheme"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "string",
                          "name": "host"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "long",
                          "name": "port"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Removes this name from the list of names by which the corresponding server\n   * is known.  If name is also the primary name for the server, the primary\n   * name reverts to 'http://127.0.0.1' with the associated server's port.\n   *\n   * @throws NS_ERROR_ILLEGAL_VALUE\n   *   if scheme or host do not match the scheme or host productions imported\n   *   into RFC 2616 from RFC 2396, or if port is not a valid port number\n   * @returns\n   *   true if the given name was a name for this server, false otherwise\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "boolean",
                  "name": "remove",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "string",
                      "name": "scheme"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "string",
                          "name": "host"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "long",
                          "name": "port"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Returns true if the given name is in this, false otherwise.\n   *\n   * @throws NS_ERROR_ILLEGAL_VALUE\n   *   if scheme or host do not match the scheme or host productions imported\n   *   into RFC 2616 from RFC 2396, or if port is not a valid port number\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "boolean",
                  "name": "has",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "string",
                      "name": "scheme"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "string",
                          "name": "host"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "long",
                          "name": "port"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Returns the scheme for the name with the given host and port, if one is\n   * present; otherwise returns the empty string.\n   *\n   * @throws NS_ERROR_ILLEGAL_VALUE\n   *   if host does not match the host production imported into RFC 2616 from\n   *   RFC 2396, or if port is not a valid port number\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "string",
                  "name": "getScheme",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "string",
                      "name": "host"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "long",
                          "name": "port"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Designates the given name as the primary name in this and adds it to this\n   * if it is not already present.\n   *\n   * @throws NS_ERROR_ILLEGAL_VALUE\n   *   if scheme or host do not match the scheme or host productions imported\n   *   into RFC 2616 from RFC 2396, or if port is not a valid port number\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "setPrimary",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "string",
                      "name": "scheme"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "string",
                          "name": "host"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "long",
                          "name": "port"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": {
        "kind": "DOC_COMMENT",
        "contents": "/**\n * A representation of a handler for HTTP requests.  The handler is used by\n * calling its .handle method with data for an incoming request; it is the\n * handler's job to use that data as it sees fit to make the desired response.\n *\n * @note\n *   This interface uses the [function] attribute, so you can pass a\n *   script-defined function with the functionality of handle() to any\n *   method which has a nsIHttpRequestHandler parameter, instead of wrapping\n *   it in an otherwise empty object.\n */"
      },
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "function",
              "param": null
            }
          },
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "2bbb4db7-d285-42b3-a3ce-142b8cc7e139"
              }
            }
          }
        ]
      },
      "name": "nsIHttpRequestHandler",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Processes an HTTP request and initializes the passed-in response to reflect\n   * the correct HTTP response.\n   *\n   * If this method throws an exception, externally observable behavior depends\n   * upon whether is being processed asynchronously.  If such is the case, the\n   * output is some prefix (perhaps all, perhaps none, perhaps only some) of the\n   * data which would have been sent if, instead, the response had been finished\n   * at that point.  If no data has been written, the response has not had\n   * seizePower() called on it, and it is not being asynchronously created, an\n   * error handler will be invoked (usually 500 unless otherwise specified).\n   *\n   * Some uses of nsIHttpRequestHandler may require this method to never throw\n   * an exception; in the general case, however, this method may throw an\n   * exception (causing an HTTP 500 response to occur, if the above conditions\n   * are met).\n   *\n   * @param request\n   *   data representing an HTTP request\n   * @param response\n   *   an initially-empty response which must be modified to reflect the data\n   *   which should be sent as the response to the request described by metadata\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "handle",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIHttpRequest",
                      "name": "request"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "nsIHttpResponse",
                          "name": "response"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n\n\n",
    {
      "kind": "interface_main",
      "doc_comment": {
        "kind": "DOC_COMMENT",
        "contents": "/**\n * A representation of the data included in an HTTP request.\n */"
      },
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "978cf30e-ad73-42ee-8f22-fe0aaf1bf5d2"
              }
            }
          }
        ]
      },
      "name": "nsIHttpRequest",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * The request type for this request (see RFC 2616, section 5.1.1).\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "string",
                  "name": "method"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * The scheme of the requested path, usually 'http' but might possibly be\n   * 'https' if some form of SSL tunneling is in use.  Note that this value\n   * cannot be accurately determined unless the incoming request used the\n   * absolute-path form of the request line; it defaults to 'http', so only\n   * if it is something else can you be entirely certain it's correct.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "string",
                  "name": "scheme"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * The host of the data being requested (e.g. \"localhost\" for the\n   * http://localhost:8080/file resource).  Note that the relevant port on the\n   * host is specified in this.port.  This value is in the ASCII character\n   * encoding.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "string",
                  "name": "host"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * The port on the server on which the request was received.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "unsigned long",
                  "name": "port"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * The requested path, without any query string (e.g. \"/dir/file.txt\").  It is\n   * guaranteed to begin with a \"/\".  The individual components in this string\n   * are URL-encoded.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "string",
                  "name": "path"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * The URL-encoded query string associated with this request, not including\n   * the initial \"?\", or \"\" if no query string was present.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "string",
                  "name": "queryString"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * A string containing the HTTP version of the request (i.e., \"1.1\").  Leading\n   * zeros for either component of the version will be omitted.  (In other\n   * words, if the request contains the version \"1.01\", this attribute will be\n   * \"1.1\"; see RFC 2616, section 3.1.)\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "string",
                  "name": "httpVersion"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Returns the value for the header in this request specified by fieldName.\n   *\n   * @param fieldName\n   *   the name of the field whose value is to be gotten; note that since HTTP\n   *   header field names are case-insensitive, this method produces equivalent\n   *   results for \"HeAdER\" and \"hEADer\" as fieldName\n   * @returns\n   *   The result is a string containing the individual values of the header,\n   *   usually separated with a comma.  The headers WWW-Authenticate,\n   *   Proxy-Authenticate, and Set-Cookie violate the HTTP specification,\n   *   however, and for these headers only the separator string is '\\n'.\n   *\n   * @throws NS_ERROR_INVALID_ARG\n   *   if fieldName does not constitute a valid header field name\n   * @throws NS_ERROR_NOT_AVAILABLE\n   *   if the given header does not exist in this\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "string",
                  "name": "getHeader",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "string",
                      "name": "fieldName"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Returns true if a header with the given field name exists in this, false\n   * otherwise.\n   *\n   * @param fieldName\n   *   the field name whose existence is to be determined in this; note that\n   *   since HTTP header field names are case-insensitive, this method produces\n   *   equivalent results for \"HeAdER\" and \"hEADer\" as fieldName\n   * @throws NS_ERROR_INVALID_ARG\n   *   if fieldName does not constitute a valid header field name\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "boolean",
                  "name": "hasHeader",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "string",
                      "name": "fieldName"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * An nsISimpleEnumerator of nsISupportsStrings over the names of the headers\n   * in this request.  The header field names in the enumerator may not\n   * necessarily have the same case as they do in the request itself.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "nsISimpleEnumerator",
                  "name": "headers"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * A stream from which data appearing in the body of this request can be read.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "nsIInputStream",
                  "name": "bodyInputStream"
                }
              }
            }
          ]
        }
      }
    },
    "\n\n\n",
    {
      "kind": "interface_main",
      "doc_comment": {
        "kind": "DOC_COMMENT",
        "contents": "/**\n * Represents an HTTP response, as described in RFC 2616, section 6.\n */"
      },
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "1acd16c2-dc59-42fa-9160-4f26c43c1c21"
              }
            }
          }
        ]
      },
      "name": "nsIHttpResponse",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Sets the status line for this.  If this method is never called on this, the\n   * status line defaults to \"HTTP/\", followed by the server's default HTTP\n   * version (e.g. \"1.1\"), followed by \" 200 OK\".\n   *\n   * @param httpVersion\n   *   the HTTP version of this, as a string (e.g. \"1.1\"); if null, the server\n   *   default is used\n   * @param code\n   *   the numeric HTTP status code for this\n   * @param description\n   *   a human-readable description of code; may be null if no description is\n   *   desired\n   * @throws NS_ERROR_INVALID_ARG\n   *   if httpVersion is not a valid HTTP version string, statusCode is greater\n   *   than 999, or description contains invalid characters\n   * @throws NS_ERROR_NOT_AVAILABLE\n   *   if this response is being processed asynchronously and data has been\n   *   written to this response's body, or if seizePower() has been called on\n   *   this\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "setStatusLine",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "string",
                      "name": "httpVersion"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "unsigned short",
                          "name": "statusCode"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "string",
                          "name": "description"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Sets the specified header in this.\n   *\n   * @param name\n   *   the name of the header; must match the field-name production per RFC 2616\n   * @param value\n   *   the value of the header; must match the field-value production per RFC\n   *   2616\n   * @param merge\n   *   when true, if the given header already exists in this, the values passed\n   *   to this function will be merged into the existing header, per RFC 2616\n   *   header semantics (except for the Set-Cookie, WWW-Authenticate, and\n   *   Proxy-Authenticate headers, which will treat each such merged header as\n   *   an additional instance of the header, for real-world compatibility\n   *   reasons); when false, replaces any existing header of the given name (if\n   *   any exists) with a new header with the specified value\n   * @throws NS_ERROR_INVALID_ARG\n   *   if name or value is not a valid header component\n   * @throws NS_ERROR_NOT_AVAILABLE\n   *   if this response is being processed asynchronously and data has been\n   *   written to this response's body, or if seizePower() has been called on\n   *   this\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "setHeader",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "string",
                      "name": "name"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "string",
                          "name": "value"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "boolean",
                          "name": "merge"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * This is used for testing our header handling, so header will be sent out\n   * without transformation. There can be multiple headers.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "setHeaderNoCheck",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "string",
                      "name": "name"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "string",
                          "name": "value"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * A stream to which data appearing in the body of this response (or in the\n   * totality of the response if seizePower() is called) should be written.\n   * After this response has been designated as being processed asynchronously,\n   * or after seizePower() has been called on this, subsequent writes will no\n   * longer be buffered and will be written to the underlying transport without\n   * delaying until the entire response is constructed.  Write-through may or\n   * may not be synchronous in the implementation, and in any case particular\n   * behavior may not be observable to the HTTP client as intermediate buffers\n   * both in the server socket and in the client may delay written data; be\n   * prepared for delays at any time.\n   *\n   * @throws NS_ERROR_NOT_AVAILABLE\n   *   if accessed after this response is fully constructed\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "nsIOutputStream",
                  "name": "bodyOutputStream"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Writes a string to the response's output stream.  This method is merely a\n   * convenient shorthand for writing the same data to bodyOutputStream\n   * directly.\n   *\n   * @note\n   *   This method is only guaranteed to work with ASCII data.\n   * @throws NS_ERROR_NOT_AVAILABLE\n   *   if called after this response has been fully constructed\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "write",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "string",
                      "name": "data"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Signals that this response is being constructed asynchronously.  Requests\n   * are typically completely constructed during nsIHttpRequestHandler.handle;\n   * however, responses which require significant resources (time, memory,\n   * processing) to construct can be created and sent incrementally by calling\n   * this method during the call to nsIHttpRequestHandler.handle.  This method\n   * only has this effect when called during nsIHttpRequestHandler.handle;\n   * behavior is undefined if it is called at a later time.  It may be called\n   * multiple times with no ill effect, so long as each call occurs before\n   * finish() is called.\n   *\n   * @throws NS_ERROR_UNEXPECTED\n   *   if not initially called within a nsIHttpRequestHandler.handle call or if\n   *   called after this response has been finished\n   * @throws NS_ERROR_NOT_AVAILABLE\n   *   if seizePower() has been called on this\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "processAsync",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Seizes complete control of this response (and its connection) from the\n   * server, allowing raw and unfettered access to data being sent in the HTTP\n   * response.  Once this method has been called the only property which may be\n   * accessed without an exception being thrown is bodyOutputStream, and the\n   * only methods which may be accessed without an exception being thrown are\n   * write(), finish(), and seizePower() (which may be called multiple times\n   * without ill effect so long as all calls are otherwise allowed).\n   *\n   * After a successful call, all data subsequently written to the body of this\n   * response is written directly to the corresponding connection.  (Previously-\n   * written data is silently discarded.)  No status line or headers are sent\n   * before doing so; if the response handler wishes to write such data, it must\n   * do so manually.  Data generation completes only when finish() is called; it\n   * is not enough to simply call close() on bodyOutputStream.\n   *\n   * @throws NS_ERROR_NOT_AVAILABLE\n   *   if processAsync() has been called on this\n   * @throws NS_ERROR_UNEXPECTED\n   *   if finish() has been called on this\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "seizePower",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Signals that construction of this response is complete and that it may be\n   * sent over the network to the client, or if seizePower() has been called\n   * signals that all data has been written and that the underlying connection\n   * may be closed.  This method may only be called after processAsync() or\n   * seizePower() has been called.  This method is idempotent.\n   *\n   * @throws NS_ERROR_UNEXPECTED\n   *   if processAsync() or seizePower() has not already been properly called\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "finish",
                  "params": null,
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n"
  ]
}