{
  "kind": "idlfile",
  "contents": [
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */"
      }
    },
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */"
      }
    },
    {
      "kind": "INCLUDE",
      "ident": "nsISupports"
    },
    {
      "kind": "INCLUDE",
      "ident": "nsIObserver"
    },
    {
      "kind": "INCLUDE",
      "ident": "nsICommandParams"
    },
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "mozIDOMWindowProxy",
      "base": null,
      "body": null
    },
    "\n\n",
    "%{C++\nclass nsCommandManager;\n%}\n\n",
    {
      "kind": "interface_main",
      "doc_comment": {
        "kind": "DOC_COMMENT",
        "contents": "/*\n * nsICommandManager is an interface used to executing user-level commands,\n * and getting the state of available commands.\n *\n * Commands are identified by strings, which are documented elsewhere.\n * In addition, the list of required and optional parameters for\n * each command, that are passed in via the nsICommandParams, are\n * also documented elsewhere. (Where? Need a good location for this).\n */"
      },
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "builtinclass",
              "param": null
            }
          },
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "bb5a1730-d83b-4fa2-831b-35b9d5842e84"
              }
            }
          }
        ]
      },
      "name": "nsICommandManager",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/*\n   * Register an observer on the specified command. The observer's Observe\n   * method will get called when the state (enabled/disabled, or toggled etc)\n   * of the command changes.\n   *\n   * You can register the same observer on multiple commmands by calling this\n   * multiple times.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "addCommandObserver",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIObserver",
                      "name": "aCommandObserver"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "string",
                          "name": "aCommandToObserve"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/*\n   * Stop an observer from observering the specified command. If the observer\n   * was also registered on ther commands, they will continue to be observed.\n   *\n   * Passing an empty string in 'aCommandObserved' will remove the observer\n   * from all commands.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "removeCommandObserver",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIObserver",
                      "name": "aCommandObserver"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "string",
                          "name": "aCommandObserved"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/*\n   * Ask the command manager if the specified command is supported.\n   * If aTargetWindow is null, the focused window is used.\n   *\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "boolean",
                  "name": "isCommandSupported",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "string",
                      "name": "aCommandName"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "mozIDOMWindowProxy",
                          "name": "aTargetWindow"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/*\n   * Ask the command manager if the specified command is currently.\n   * enabled.\n   * If aTargetWindow is null, the focused window is used.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "boolean",
                  "name": "isCommandEnabled",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "string",
                      "name": "aCommandName"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "mozIDOMWindowProxy",
                          "name": "aTargetWindow"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/*\n   * Get the state of the specified commands.\n   *\n   * On input: aCommandParams filled in with values that the caller cares\n   * about, most of which are command-specific (see the command documentation\n   * for details). One boolean value, \"enabled\", applies to all commands,\n   * and, in return will be set to indicate whether the command is enabled\n   * (equivalent to calling isCommandEnabled).\n   *\n   * aCommandName is the name of the command that needs the state\n   * aTargetWindow is the source of command controller\n   *      (null means use focus controller)\n   * On output: aCommandParams: values set by the caller filled in with\n   * state from the command.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "getCommandState",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "string",
                      "name": "aCommandName"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "mozIDOMWindowProxy",
                          "name": "aTargetWindow"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "nsICommandParams",
                          "name": "aCommandParams"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/*\n   * Execute the specified command.\n   * The command will be executed in aTargetWindow if it is specified.\n   * If aTargetWindow is null, it will go to the focused window.\n   *\n   * param: aCommandParams, a list of name-value pairs of command parameters,\n   * may be null for parameter-less commands.\n   *\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "doCommand",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "string",
                      "name": "aCommandName"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "nsICommandParams",
                          "name": "aCommandParams"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "mozIDOMWindowProxy",
                          "name": "aTargetWindow"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": "%{C++\n  /**\n   * In order to avoid circular dependency issues, these methods are defined\n   * in nsCommandManager.h.  Consumers need to #include that header.\n   */\n  inline nsCommandManager* AsCommandManager();\n  inline const nsCommandManager* AsCommandManager() const;\n%}\n"
              }
            }
          ]
        }
      }
    },
    "\n\n\n",
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/*\n\nArguments to observers \"Observe\" method are as follows:\n\n  void Observe(   in nsISupports aSubject,          // The nsICommandManager calling this Observer\n                  in string      aTopic,            // Name of the command\n                  in wstring     aDummy );          // unused\n\n*/"
      }
    }
  ]
}