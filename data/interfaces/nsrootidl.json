{
  "kind": "idlfile",
  "contents": [
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* -*- Mode: IDL; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */"
      }
    },
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */"
      }
    },
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/**\n * Root idl declarations to be used by all.\n */"
      }
    },
    "%{C++\n\n#include \"nscore.h\"\n#include \"nsID.h\"\ntypedef int64_t PRTime;\n\n/*\n * Forward declarations for new string types\n */\n#include \"nsStringFwd.h\"\n\nstruct JSContext;\n\n/*\n * Forward declaration of mozilla::dom::Promise\n */\nnamespace mozilla {\nnamespace dom {\nclass Promise;\n} // namespace dom\n} // namespace mozilla\n\n/*\n * Start commenting out the C++ versions of the below in the output header\n */\n#if 0\n%}\n\n",
    {
      "kind": "typedef"
    },
    "\n",
    {
      "kind": "typedef"
    },
    "\n",
    {
      "kind": "typedef"
    },
    "\n",
    {
      "kind": "typedef"
    },
    "\n",
    {
      "kind": "typedef"
    },
    "\n",
    {
      "kind": "typedef"
    },
    "\n",
    {
      "kind": "typedef"
    },
    "\n",
    {
      "kind": "typedef"
    },
    "\n",
    {
      "kind": "typedef"
    },
    "\n",
    {
      "kind": "typedef"
    },
    "\n\n",
    {
      "kind": "typedef"
    },
    "\n\n",
    {
      "kind": "SINGLE_LINE_COMMENT"
    },
    {
      "kind": "SINGLE_LINE_COMMENT"
    },
    {
      "kind": "native"
    },
    "\n\n",
    {
      "kind": "native"
    },
    "\n",
    {
      "kind": "native"
    },
    "\n",
    {
      "kind": "native"
    },
    "\n\n",
    {
      "kind": "native"
    },
    "\n",
    {
      "kind": "native"
    },
    "\n",
    {
      "kind": "native"
    },
    "\n\n",
    {
      "kind": "native"
    },
    "\n",
    {
      "kind": "native"
    },
    "\n",
    {
      "kind": "native"
    },
    "\n\n",
    {
      "kind": "SINGLE_LINE_COMMENT"
    },
    {
      "kind": "SINGLE_LINE_COMMENT"
    },
    {
      "kind": "SINGLE_LINE_COMMENT"
    },
    {
      "kind": "SINGLE_LINE_COMMENT"
    },
    {
      "kind": "SINGLE_LINE_COMMENT"
    },
    {
      "kind": "SINGLE_LINE_COMMENT"
    },
    {
      "kind": "SINGLE_LINE_COMMENT"
    },
    {
      "kind": "SINGLE_LINE_COMMENT"
    },
    {
      "kind": "SINGLE_LINE_COMMENT"
    },
    {
      "kind": "native"
    },
    "\n",
    {
      "kind": "native"
    },
    "\n",
    {
      "kind": "native"
    },
    "\n\n",
    {
      "kind": "native"
    },
    "\n\n",
    {
      "kind": "native"
    },
    "\n",
    {
      "kind": "native"
    },
    "\n",
    {
      "kind": "native"
    },
    "\n\n",
    {
      "kind": "native"
    },
    "\n",
    {
      "kind": "native"
    },
    "\n",
    {
      "kind": "native"
    },
    "\n\n",
    {
      "kind": "native"
    },
    "\n",
    {
      "kind": "native"
    },
    "\n",
    {
      "kind": "native"
    },
    "\n\n",
    {
      "kind": "native"
    },
    "\n              ",
    {
      "kind": "native"
    },
    "\n\n",
    {
      "kind": "native"
    },
    "\n\n",
    "%{C++\n/*\n * End commenting out the C++ versions of the above in the output header\n */\n#endif\n%}\n"
  ]
}