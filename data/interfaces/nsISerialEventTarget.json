{
  "kind": "idlfile",
  "contents": [
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */"
      }
    },
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* vim:set ts=2 sw=2 sts=2 et cindent: */"
      }
    },
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */"
      }
    },
    {
      "kind": "INCLUDE",
      "ident": "nsIEventTarget"
    },
    {
      "kind": "interface_main",
      "doc_comment": {
        "kind": "DOC_COMMENT",
        "contents": "/**\n * A serial event target is an event dispatching interface like\n * nsIEventTarget. Runnables dispatched to an nsISerialEventTarget are required\n * to execute serially. That is, two different runnables dispatched to the\n * target should never be allowed to execute simultaneously. One exception to\n * this rule is nested event loops. If a runnable spins a nested event loop,\n * causing another runnable dispatched to the target to run, the target may\n * still be considered \"serial\".\n *\n * Examples:\n * - nsIThread is a serial event target.\n * - Thread pools are not serial event targets.\n * - However, one can \"convert\" a thread pool into an nsISerialEventTarget\n *   by putting a TaskQueue in front of it.\n */"
      },
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "builtinclass",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "scriptable",
              "param": null
            }
          },
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "rust_sync",
              "param": null
            }
          },
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "9f982380-24b4-49f3-88f6-45e2952036c7"
              }
            }
          }
        ]
      },
      "name": "nsISerialEventTarget",
      "base": {
        "kind": "ifacebase",
        "extends": "nsIEventTarget"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": []
        }
      }
    },
    "\n"
  ]
}