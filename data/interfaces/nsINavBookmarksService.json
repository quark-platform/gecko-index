{
  "kind": "idlfile",
  "contents": [
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */"
      }
    },
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */"
      }
    },
    {
      "kind": "INCLUDE",
      "ident": "nsISupports"
    },
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIFile",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIURI",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsITransaction",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsINavHistoryBatchCallback",
      "base": null,
      "body": null
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": {
        "kind": "DOC_COMMENT",
        "contents": "/**\n * Observer for bookmarks changes.\n */"
      },
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "4d00c221-2c4a-47ab-a617-abb324110492"
              }
            }
          }
        ]
      },
      "name": "nsINavBookmarkObserver",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/*\n   * This observer should not be called for items that are tags.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "boolean",
                  "name": "skipTags"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Notifies that an item's information has changed.  This will be called\n   * whenever any attributes like \"title\" are changed.\n   *\n   * @param aItemId\n   *        The id of the item that was changed.\n   * @param aProperty\n   *        The property which changed.\n   * @param aIsAnnotationProperty\n   *        Obsolete and unused.\n   * @param aNewValue\n   *        For certain properties, this is set to the new value of the\n   *        property (see the list below).\n   * @param aLastModified\n   *        The updated last-modified value.\n   * @param aItemType\n   *        The type of the item to be removed (see TYPE_* constants below).\n   * @param aParentId\n   *        The id of the folder containing the item.\n   * @param aGuid\n   *        The unique ID associated with the item.\n   * @param aParentGuid\n   *        The unique ID associated with the item's parent.\n   * @param aOldValue\n   *        For certain properties, this is set to the new value of the\n   *        property (see the list below).\n   * @param aSource\n   *        A change source constant from nsINavBookmarksService::SOURCE_*,\n   *        passed to the method that notifies the observer.\n   *\n   * @note List of values that may be associated with properties:\n   *       aProperty     | aNewValue\n   *       =====================================================================\n   *       guid          | The new bookmark guid.\n   *       cleartime     | Empty string (all visits to this item were removed).\n   *       title         | The new title.\n   *       uri           | new URL.\n   *       tags          | Empty string (tags for this item changed)\n   *       dateAdded     | PRTime (as string) when the item was first added.\n   *       lastModified  | PRTime (as string) when the item was last modified.\n   *\n   *       aProperty     | aOldValue\n   *       =====================================================================\n   *       guid          | The old bookmark guid.\n   *       cleartime     | Empty string (currently unused).\n   *       title         | Empty string (currently unused).\n   *       uri           | old URL.\n   *       tags          | Empty string (currently unused).\n   *       dateAdded     | Empty string (currently unused).\n   *       lastModified  | Empty string (currently unused).\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "onItemChanged",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "long long",
                      "name": "aItemId"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "ACString",
                          "name": "aProperty"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "boolean",
                          "name": "aIsAnnotationProperty"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "AUTF8String",
                          "name": "aNewValue"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "PRTime",
                          "name": "aLastModified"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "unsigned short",
                          "name": "aItemType"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "long long",
                          "name": "aParentId"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "ACString",
                          "name": "aGuid"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "ACString",
                          "name": "aParentGuid"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "AUTF8String",
                          "name": "aOldValue"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "unsigned short",
                          "name": "aSource"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": {
        "kind": "DOC_COMMENT",
        "contents": "/**\n * The BookmarksService interface provides methods for managing bookmarked\n * history items.  Bookmarks consist of a set of user-customizable\n * folders.  A URI in history can be contained in one or more such folders.\n */"
      },
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "24533891-afa6-4663-b72d-3143d03f1b04"
              }
            }
          }
        ]
      },
      "name": "nsINavBookmarksService",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * The item ID of the Places root.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "long long",
                  "name": "placesRoot"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * The item ID of the bookmarks menu folder.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "long long",
                  "name": "bookmarksMenuFolder"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * The item ID of the top-level folder that contain the tag \"folders\".\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "long long",
                  "name": "tagsFolder"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * The item ID of the personal toolbar folder.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "long long",
                  "name": "toolbarFolder"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * The total number of Sync changes (inserts, updates, deletes, merges, and\n   * uploads) recorded since Places startup for all bookmarks.\n   *\n   * Note that this is *not* the number of bookmark syncs. It's a monotonically\n   * increasing counter incremented for every change that affects a bookmark's\n   * `syncChangeCounter`.\n   *\n   * The counter can be used to avoid keeping an exclusive transaction open for\n   * time-consuming work. One way to do that is to store the current value of\n   * the counter, do the work, start a transaction, check the current value\n   * again, and compare it to the stored value to determine if the database\n   * changed during the work.\n   *\n   * The bookmarks mirror does this to check for changes between building and\n   * applying a merged tree. This avoids blocking the main Places connection\n   * during the merge, and ensures that the new tree still applies cleanly.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "long long",
                  "name": "totalSyncChanges"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * This value should be used for APIs that allow passing in an index\n   * where an index is not known, or not required to be specified.\n   * e.g.: When appending an item to a folder.\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "short",
                  "name": "DEFAULT_INDEX",
                  "value": {
                    "kind": "unary_$1"
                  }
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned short",
                  "name": "TYPE_BOOKMARK",
                  "value": "1"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned short",
                  "name": "TYPE_FOLDER",
                  "value": "2"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned short",
                  "name": "TYPE_SEPARATOR",
                  "value": "3"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  },
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned short",
                  "name": "TYPE_DYNAMIC_CONTAINER",
                  "value": "4"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  },
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  },
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  },
                  {
                    "kind": "SINGLE_LINE_COMMENT"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned short",
                  "name": "SOURCE_DEFAULT",
                  "value": "0"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned short",
                  "name": "SOURCE_SYNC",
                  "value": "1"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned short",
                  "name": "SOURCE_IMPORT",
                  "value": "2"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned short",
                  "name": "SOURCE_SYNC_REPARENT_REMOVED_FOLDER_CHILDREN",
                  "value": "4"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned short",
                  "name": "SOURCE_RESTORE",
                  "value": "5"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned short",
                  "name": "SOURCE_RESTORE_ON_STARTUP",
                  "value": "6"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Sync status flags, stored in Places for each item. These affect conflict\n   * resolution, when an item is changed both locally and remotely; deduping,\n   * when a local item matches a remote item with similar contents and different\n   * GUIDs; and whether we write a tombstone when an item is deleted locally.\n   *\n   * Status  | Description               | Conflict   | Can     | Needs\n   *         |                           | resolution | dedupe? | tombstone?\n   * -----------------------------------------------------------------------\n   * UNKNOWN | Automatically restored    | Prefer     | No      | No\n   *         | on startup to recover     | deletion   |         |\n   *         | from database corruption, |            |         |\n   *         | or sync ID change on      |            |         |\n   *         | server.                   |            |         |\n   * -----------------------------------------------------------------------\n   * NEW     | Item not uploaded to      | Prefer     | Yes     | No\n   *         | server yet, or Sync       | newer      |         |\n   *         | disconnected.             |            |         |\n   * -----------------------------------------------------------------------\n   * NORMAL  | Item uploaded to server.  | Prefer     | No      | Yes\n   *         |                           | newer      |         |\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned short",
                  "name": "SYNC_STATUS_UNKNOWN",
                  "value": "0"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned short",
                  "name": "SYNC_STATUS_NEW",
                  "value": "1"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "unsigned short",
                  "name": "SYNC_STATUS_NORMAL",
                  "value": "2"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Inserts a child bookmark into the given folder.\n   *\n   *  @param aParentId\n   *         The id of the parent folder\n   *  @param aURI\n   *         The URI to insert\n   *  @param aIndex\n   *         The index to insert at, or DEFAULT_INDEX to append\n   *  @param aTitle\n   *         The title for the new bookmark\n   *  @param [optional] aGuid\n   *         The GUID to be set for the new item.  If not set, a new GUID is\n   *         generated.  Unless you've a very sound reason, such as an undo\n   *         manager implementation, do not pass this argument.\n   *  @param [optional] aSource\n   *         The change source. This is forwarded to all bookmark observers,\n   *         allowing them to distinguish between insertions from different\n   *         callers. Defaults to SOURCE_DEFAULT if omitted.\n   *  @return The ID of the newly-created bookmark.\n   *\n   *  @note aTitle will be truncated to TITLE_LENGTH_MAX and\n   *        aURI will be truncated to URI_LENGTH_MAX.\n   *  @throws if aGuid is malformed.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "long long",
                  "name": "insertBookmark",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "long long",
                      "name": "aParentId"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "nsIURI",
                          "name": "aURI"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "long",
                          "name": "aIndex"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "AUTF8String",
                          "name": "aTitle"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": {
                            "kind": "attributes",
                            "first_attribute": {
                              "kind": "attribute",
                              "name": "optional",
                              "param": null
                            },
                            "other_attributes": []
                          },
                          "refType": "in",
                          "type": "ACString",
                          "name": "aGuid"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": {
                            "kind": "attributes",
                            "first_attribute": {
                              "kind": "attribute",
                              "name": "optional",
                              "param": null
                            },
                            "other_attributes": []
                          },
                          "refType": "in",
                          "type": "unsigned short",
                          "name": "aSource"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Removes a child item. Used to delete a bookmark or separator.\n   *  @param aItemId\n   *         The child item to remove\n   *  @param [optional] aSource\n   *         The change source, forwarded to all bookmark observers. Defaults\n   *         to SOURCE_DEFAULT.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "removeItem",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "long long",
                      "name": "aItemId"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": {
                            "kind": "attributes",
                            "first_attribute": {
                              "kind": "attribute",
                              "name": "optional",
                              "param": null
                            },
                            "other_attributes": []
                          },
                          "refType": "in",
                          "type": "unsigned short",
                          "name": "aSource"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Creates a new child folder and inserts it under the given parent.\n   *  @param aParentFolder\n   *         The id of the parent folder\n   *  @param aName\n   *         The name of the new folder\n   *  @param aIndex\n   *         The index to insert at, or DEFAULT_INDEX to append\n   *  @param [optional] aGuid\n   *         The GUID to be set for the new item.  If not set, a new GUID is\n   *         generated.  Unless you've a very sound reason, such as an undo\n   *         manager implementation, do not pass this argument.\n   *  @param [optional] aSource\n   *         The change source, forwarded to all bookmark observers. Defaults\n   *         to SOURCE_DEFAULT.\n   *  @return The ID of the newly-inserted folder.\n   *  @throws if aGuid is malformed.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "long long",
                  "name": "createFolder",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "long long",
                      "name": "aParentFolder"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "AUTF8String",
                          "name": "name"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "long",
                          "name": "index"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": {
                            "kind": "attributes",
                            "first_attribute": {
                              "kind": "attribute",
                              "name": "optional",
                              "param": null
                            },
                            "other_attributes": []
                          },
                          "refType": "in",
                          "type": "ACString",
                          "name": "aGuid"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": {
                            "kind": "attributes",
                            "first_attribute": {
                              "kind": "attribute",
                              "name": "optional",
                              "param": null
                            },
                            "other_attributes": []
                          },
                          "refType": "in",
                          "type": "unsigned short",
                          "name": "aSource"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Set the title for an item.\n   *  @param aItemId\n   *         The id of the item whose title should be updated.\n   *  @param aTitle\n   *         The new title for the bookmark.\n   *  @param [optional] aSource\n   *         The change source, forwarded to all bookmark observers. Defaults\n   *         to SOURCE_DEFAULT.\n   *\n   *  @note  aTitle will be truncated to TITLE_LENGTH_MAX.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "setItemTitle",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "long long",
                      "name": "aItemId"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "AUTF8String",
                          "name": "aTitle"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": {
                            "kind": "attributes",
                            "first_attribute": {
                              "kind": "attribute",
                              "name": "optional",
                              "param": null
                            },
                            "other_attributes": []
                          },
                          "refType": "in",
                          "type": "unsigned short",
                          "name": "aSource"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Get the title for an item.\n   *\n   * If no item title is available it will return a void string (null in JS).\n   *\n   *  @param aItemId\n   *         The id of the item whose title should be retrieved\n   *  @return The title of the item.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "AUTF8String",
                  "name": "getItemTitle",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "long long",
                      "name": "aItemId"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Set the last modified time for an item.\n   *\n   * @param aItemId\n   *        the id of the item whose last modified time should be updated.\n   * @param aLastModified\n   *        the new last modified value in microseconds.  Note that it is\n   *        rounded down to milliseconds precision.\n   * @param [optional] aSource\n   *        The change source, forwarded to all bookmark observers. Defaults\n   *        to SOURCE_DEFAULT.\n   *\n   * @note This is the only method that will send an itemChanged notification\n   *       for the property.  lastModified will still be updated in\n   *       any other method that changes an item property, but we will send\n   *       the corresponding itemChanged notification instead.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "can_run_script",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "setItemLastModified",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "long long",
                      "name": "aItemId"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "PRTime",
                          "name": "aLastModified"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": {
                            "kind": "attributes",
                            "first_attribute": {
                              "kind": "attribute",
                              "name": "optional",
                              "param": null
                            },
                            "other_attributes": []
                          },
                          "refType": "in",
                          "type": "unsigned short",
                          "name": "aSource"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Get the parent folder's id for an item.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "long long",
                  "name": "getFolderIdForItem",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "long long",
                      "name": "aItemId"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Adds a bookmark observer. If ownsWeak is false, the bookmark service will\n   * keep an owning reference to the observer.  If ownsWeak is true, then\n   * aObserver must implement nsISupportsWeakReference, and the bookmark\n   * service will keep a weak reference to the observer.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "addObserver",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsINavBookmarkObserver",
                      "name": "observer"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": {
                            "kind": "attributes",
                            "first_attribute": {
                              "kind": "attribute",
                              "name": "optional",
                              "param": null
                            },
                            "other_attributes": []
                          },
                          "refType": "in",
                          "type": "boolean",
                          "name": "ownsWeak"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Removes a bookmark observer.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "removeObserver",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsINavBookmarkObserver",
                      "name": "observer"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Gets an array of registered nsINavBookmarkObserver objects.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": {
                    "kind": "IDENTIFIER_$0"
                  },
                  "name": "getObservers",
                  "params": null,
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n"
  ]
}