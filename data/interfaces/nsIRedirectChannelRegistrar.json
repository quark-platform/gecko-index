{
  "kind": "idlfile",
  "contents": [
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */"
      }
    },
    {
      "kind": "INCLUDE",
      "ident": "nsISupports"
    },
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIChannel",
      "base": null,
      "body": null
    },
    "\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIParentChannel",
      "base": null,
      "body": null
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": {
        "kind": "DOC_COMMENT",
        "contents": "/**\n * Used on the chrome process as a service to join channel implementation\n * and parent IPC protocol side under a unique id.  Provides this way a generic\n * communication while redirecting to various protocols.\n *\n * See also nsIChildChannel and nsIParentChannel.\n */"
      },
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "efa36ea2-5b07-46fc-9534-a5acb8b77b72"
              }
            }
          }
        ]
      },
      "name": "nsIRedirectChannelRegistrar",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Register the redirect target channel. The passed id needs to be a\n   * unique ID for that channel (see `nsContentUtils::GenerateLoadIdentifier`).\n   *\n   * Primarily used in ParentChannelListener::AsyncOnChannelRedirect to get\n   * a channel id sent to the HttpChannelChild being redirected.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "registerChannel",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIChannel",
                      "name": "channel"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "uint64_t",
                          "name": "id"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * First, search for the channel registered under the id.  If found return\n   * it.  Then, register under the same id the parent side of IPC protocol\n   * to let it be later grabbed back by the originator of the redirect and\n   * notifications from the real channel could be forwarded to this parent\n   * channel.\n   *\n   * Primarily used in parent side of an IPC protocol implementation\n   * in reaction to nsIChildChannel.connectParent(id) called from the child\n   * process.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "nsIChannel",
                  "name": "linkChannels",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "uint64_t",
                      "name": "id"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "nsIParentChannel",
                          "name": "channel"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Returns back the channel previously registered under the ID with\n   * registerChannel method.\n   *\n   * Primarilly used in chrome IPC side of protocols when attaching a redirect\n   * target channel to an existing 'real' channel implementation.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "nsIChannel",
                  "name": "getRegisteredChannel",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "uint64_t",
                      "name": "id"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Returns the stream listener that shall be attached to the redirect target\n   * channel, all notification from the redirect target channel will be\n   * forwarded to this stream listener.\n   *\n   * Primarilly used in HttpChannelParent::OnRedirectResult callback to grab\n   * the created parent side of the channel and forward notifications to it.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "nsIParentChannel",
                  "name": "getParentChannel",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "uint64_t",
                      "name": "id"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * To not force all channel implementations to support weak reference\n   * consumers of this service must ensure release of registered channels them\n   * self.  This releases both the real and parent channel registered under\n   * the id.\n   *\n   * Primarilly used in HttpChannelParent::OnRedirectResult callback.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "deregisterChannels",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "uint64_t",
                      "name": "id"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n"
  ]
}