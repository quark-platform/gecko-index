{
  "kind": "idlfile",
  "contents": [
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */"
      }
    },
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */"
      }
    },
    {
      "kind": "INCLUDE",
      "ident": "nsIFile"
    },
    "%{C++\n#include <Carbon/Carbon.h>\n#include <CoreFoundation/CoreFoundation.h>\n%}\n\n      ",
    {
      "kind": "native"
    },
    "\n      ",
    {
      "kind": "native"
    },
    "\n      ",
    {
      "kind": "native"
    },
    "\n",
    {
      "kind": "native"
    },
    "\n      ",
    {
      "kind": "native"
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "builtinclass",
              "param": null
            }
          },
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "623eca5b-c25d-4e27-be5a-789a66c4b2f7"
              }
            }
          }
        ]
      },
      "name": "nsILocalFileMac",
      "base": {
        "kind": "ifacebase",
        "extends": "nsIFile"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n    * initWithCFURL\n    *\n    * Init this object with a CFURLRef\n    *\n    * NOTE: Supported only for XP_MACOSX\n    * NOTE: If the path of the CFURL is /a/b/c, at least a/b must exist beforehand.\n    *\n    * @param   aCFURL         the CoreFoundation URL\n    *\n    */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "initWithCFURL",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "CFURLRef",
                      "name": "aCFURL"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n    * initWithFSRef\n    *\n    * Init this object with an FSRef\n    *\n    * NOTE: Supported only for XP_MACOSX\n    *\n    * @param   aFSRef         the native FSRef\n    *\n    */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "void",
                  "name": "initWithFSRef",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": {
                        "kind": "attributes",
                        "first_attribute": {
                          "kind": "attribute",
                          "name": "const",
                          "param": null
                        },
                        "other_attributes": []
                      },
                      "refType": "in",
                      "type": "FSRefPtr",
                      "name": "aFSRef"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n    * getCFURL\n    *\n    * Returns the CFURLRef of the file object. The caller is\n    * responsible for calling CFRelease() on it.\n    *\n    * NOTE: Observes the state of the followLinks attribute.\n    * If the file object is an alias and followLinks is TRUE, returns\n    * the target of the alias. If followLinks is FALSE, returns\n    * the unresolved alias file.\n    *\n    * NOTE: Supported only for XP_MACOSX\n    *\n    * @return\n    *\n    */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "CFURLRef",
                  "name": "getCFURL",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n    * getFSRef\n    *\n    * Returns the FSRef of the file object.\n    *\n    * NOTE: Observes the state of the followLinks attribute.\n    * If the file object is an alias and followLinks is TRUE, returns\n    * the target of the alias. If followLinks is FALSE, returns\n    * the unresolved alias file.\n    *\n    * NOTE: Supported only for XP_MACOSX\n    *\n    * @return\n    *\n    */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "FSRef",
                  "name": "getFSRef",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n    * getFSSpec\n    *\n    * Returns the FSSpec of the file object.\n    *\n    * NOTE: Observes the state of the followLinks attribute.\n    * If the file object is an alias and followLinks is TRUE, returns\n    * the target of the alias. If followLinks is FALSE, returns\n    * the unresolved alias file.\n    *\n    * @return\n    *\n    */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "FSSpec",
                  "name": "getFSSpec",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n    * fileSizeWithResFork\n    *\n    * Returns the combined size of both the data fork and the resource\n    * fork (if present) rather than just the size of the data fork\n    * as returned by GetFileSize()\n    *\n    */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "int64_t",
                  "name": "fileSizeWithResFork"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n    * fileType, creator\n    *\n    * File type and creator attributes\n    *\n    */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": null,
                  "type": "OSType",
                  "name": "fileType"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "attribute_code",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "noscript",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "readonly": null,
                  "type": "OSType",
                  "name": "fileCreator"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n    * launchWithDoc\n    *\n    * Launch the application that this file points to with a document.\n    *\n    * @param   aDocToLoad          Must not be NULL. If no document, use nsIFile::launch\n    * @param   aLaunchInBackground TRUE if the application should not come to the front.\n    *\n    */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "launchWithDoc",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIFile",
                      "name": "aDocToLoad"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "boolean",
                          "name": "aLaunchInBackground"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n    * openDocWithApp\n    *\n    * Open the document that this file points to with the given application.\n    *\n    * @param   aAppToOpenWith      The application with  which to open the document.\n    *                              If NULL, the creator code of the document is used\n    *                              to determine the application.\n    * @param   aLaunchInBackground TRUE if the application should not come to the front.\n    *\n    */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "openDocWithApp",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "nsIFile",
                      "name": "aAppToOpenWith"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": "boolean",
                          "name": "aLaunchInBackground"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n    * isPackage\n    *\n    * returns true if a directory is determined to be a package under Mac OS 9/X\n    *\n    */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "boolean",
                  "name": "isPackage",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n    * bundleDisplayName\n    *\n    * returns the display name of the application bundle (usually the human\n    * readable name of the application)\n    */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "AString",
                  "name": "bundleDisplayName"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n    * bundleIdentifier\n    *\n    * returns the identifier of the bundle\n    */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "AUTF8String",
                  "name": "bundleIdentifier"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * Last modified time of a bundle's contents (as opposed to its package\n     * directory).  Our convention is to make the bundle's Info.plist file\n     * stand in for the rest of its contents -- since this file contains the\n     * bundle's version information and other identifiers.  For non-bundles\n     * this is the same as lastModifiedTime.\n     */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "int64_t",
                  "name": "bundleContentsLastModifiedTime"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * Return whether or not the file has an extended attribute.\n     *\n     * @param aAttrName The attribute name to check for.\n     *\n     * @return Whether or not the extended attribute is present.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "bool",
                  "name": "hasXAttr",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "ACString",
                      "name": "aAttrName"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * Get the value of the extended attribute.\n     *\n     * @param aAttrName The attribute name to read.\n     *\n     * @return The extended attribute value.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": {
                    "kind": "IDENTIFIER_$0"
                  },
                  "name": "getXAttr",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "ACString",
                      "name": "aAttrName"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * Set an extended attribute.\n     *\n     * @param aAttrName The attribute name to set a value for.\n     * @param aAttrValue The value to set for the attribute.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "setXAttr",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "ACString",
                      "name": "aAttrName"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": null,
                          "refType": "in",
                          "type": {
                            "kind": "IDENTIFIER_$0"
                          },
                          "name": "aAttrValue"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n     * Delete an extended attribute.\n     *\n     * @param aAttrName The extended attribute to delete.\n     */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "delXAttr",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "ACString",
                      "name": "aAttrName"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n\n",
    "%{C++\nextern \"C\"\n{\nNS_EXPORT nsresult NS_NewLocalFileWithFSRef(const FSRef* aFSRef, bool aFollowSymlinks, nsILocalFileMac** result);\nNS_EXPORT nsresult NS_NewLocalFileWithCFURL(const CFURLRef aURL, bool aFollowSymlinks, nsILocalFileMac** result);\n}\n%}\n"
  ]
}