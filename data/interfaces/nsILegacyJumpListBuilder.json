{
  "kind": "idlfile",
  "contents": [
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */"
      }
    },
    {
      "kind": "ANY_COMMENT_$0",
      "doc": {
        "kind": "DOC_COMMENT",
        "contents": "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */"
      }
    },
    {
      "kind": "INCLUDE",
      "ident": "nsISupports"
    },
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": null,
      "name": "nsIArray",
      "base": null,
      "body": null
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "function",
              "param": null
            }
          },
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "5131a62a-e99f-4631-9138-751f8aad1ae4"
              }
            }
          }
        ]
      },
      "name": "nsILegacyJumpListCommittedCallback",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "done",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "boolean",
                      "name": "result"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n\n",
    {
      "kind": "interface_main",
      "doc_comment": null,
      "attrs": {
        "kind": "attributes",
        "first_attribute": {
          "kind": "attribute",
          "name": "scriptable",
          "param": null
        },
        "other_attributes": [
          {
            "kind": "attributes_$0",
            "attr": {
              "kind": "attribute",
              "name": "uuid",
              "param": {
                "kind": "attribute_$0",
                "value": "1FE6A9CD-2B18-4dd5-A176-C2B32FA4F683"
              }
            }
          }
        ]
      },
      "name": "nsILegacyJumpListBuilder",
      "base": {
        "kind": "ifacebase",
        "extends": "nsISupports"
      },
      "body": {
        "kind": "ifacebody",
        "contents": {
          "kind": "ifacebody_$0",
          "contents": [
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * JumpLists\n   *\n   * Jump lists are built and then applied. Modifying an applied jump list is not\n   * permitted. Callers should begin the creation of a new jump list using\n   * initListBuild, add sub lists using addListToBuild, then commit the jump list\n   * using commitListBuild. Lists are built in real-time during the sequence of\n   * build calls, make sure to check for errors on each individual step.\n   *\n   * The default number of allowed items in a jump list is ten. Users can change\n   * the number through system preferences. User may also pin items to jump lists,\n   * which take up additional slots. Applications do not have control over the\n   * number of items allowed in jump lists; excess items added are dropped by the\n   * system. Item insertion priority is defined as first to last added.\n   *\n   * Users may remove items from jump lists after they are commited. The system\n   * tracks removed items between commits. A list of these items is returned by\n   * a call to initListBuild. nsILegacyJumpListBuilder does not filter entries added that\n   * have been removed since the last commit. To prevent repeatedly adding entries\n   * users have removed, applications are encoraged to track removed items\n   * internally.\n   *\n   * Each list is made up of an array of nsILegacyJumpListItem representing items\n   * such as shortcuts, links, and separators. See nsILegacyJumpListItem for information\n   * on adding additional jump list types.\n   */"
                  },
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * List Types\n   */"
                  },
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Task List\n   *\n   * Tasks are common actions performed by users within the application. A task\n   * can be represented by an application shortcut and associated command line\n   * parameters or a URI. Task lists should generally be static lists that do not\n   * change often, if at all - similar to an application menu.\n   *\n   * Tasks are given the highest priority of all lists when space is limited.\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "short",
                  "name": "JUMPLIST_CATEGORY_TASKS",
                  "value": "0"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Recent or Frequent list\n   *\n   * Recent and frequent lists are based on Window's recent document lists. The\n   * lists are generated automatically by Windows. Applications that use recent\n   * or frequent lists should keep document use tracking up to date by calling\n   * the SHAddToRecentDocs shell api.\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "short",
                  "name": "JUMPLIST_CATEGORY_RECENT",
                  "value": "1"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "const_code",
                  "type": "short",
                  "name": "JUMPLIST_CATEGORY_FREQUENT",
                  "value": "2"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Custom Lists\n   *\n   * Custom lists can be made up of tasks, links, and separators. The title of\n   * of the list is passed through the optional string parameter of addBuildList.\n   */"
                  }
                ],
                "code": {
                  "kind": "const_code",
                  "type": "short",
                  "name": "JUMPLIST_CATEGORY_CUSTOMLIST",
                  "value": "3"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Indicates whether jump list taskbar features are supported by the current\n   * host.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "short",
                  "name": "available"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * JumpList management\n   *\n   * @throw NS_ERROR_NOT_AVAILABLE on all calls if taskbar functionality\n   * is not supported by the operating system.\n   */"
                  },
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Indicates if a commit has already occurred in this session.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "boolean",
                  "name": "isListCommitted"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * The maximum number of jump list items the current desktop can support.\n   */"
                  }
                ],
                "code": {
                  "kind": "attribute_code",
                  "attributes": null,
                  "readonly": "readonly",
                  "type": "short",
                  "name": "maxListItems"
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Initializes a jump list build and returns a promise with the list of\n   * items the user removed since the last time a jump list was committed.\n   * Removed items can become state after initListBuild is called, lists\n   * should be built in single-shot fasion.\n   *\n   * @returns a promise with the list of items that were removed by the user\n   * since the last commit.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": {
                    "kind": "attributes",
                    "first_attribute": {
                      "kind": "attribute",
                      "name": "implicit_jscontext",
                      "param": null
                    },
                    "other_attributes": []
                  },
                  "return_type": "Promise",
                  "name": "initListBuild",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Adds a list and if required, a set of items for the list.\n   *\n   * @param aCatType\n   *        The type of list to add.\n   * @param items\n   *        An array of nsILegacyJumpListItem items to add to the list.\n   * @param catName\n   *        For custom lists, the title of the list.\n   *\n   * @returns true if the operation completed successfully.\n   *\n   * @throw NS_ERROR_INVALID_ARG if incorrect parameters are passed for\n   * a particular category or item type.\n   * @throw NS_ERROR_ILLEGAL_VALUE if an item is added that was removed\n   * since the last commit.\n   * @throw NS_ERROR_UNEXPECTED on internal errors.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "boolean",
                  "name": "addListToBuild",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "short",
                      "name": "aCatType"
                    },
                    "other": [
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": {
                            "kind": "attributes",
                            "first_attribute": {
                              "kind": "attribute",
                              "name": "optional",
                              "param": null
                            },
                            "other_attributes": []
                          },
                          "refType": "in",
                          "type": "nsIArray",
                          "name": "items"
                        }
                      },
                      {
                        "kind": "paramlist_$0",
                        "param": {
                          "kind": "param",
                          "attribute": {
                            "kind": "attributes",
                            "first_attribute": {
                              "kind": "attribute",
                              "name": "optional",
                              "param": null
                            },
                            "other_attributes": []
                          },
                          "refType": "in",
                          "type": "AString",
                          "name": "catName"
                        }
                      }
                    ]
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Aborts and clears the current jump list build.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "abortListBuild",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Commits the current jump list build to the Taskbar.\n   *\n   * @param callback\n   *        Receives one argument, which is true if the operation completed\n   *        successfully, otherwise it is false.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "commitListBuild",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": {
                        "kind": "attributes",
                        "first_attribute": {
                          "kind": "attribute",
                          "name": "optional",
                          "param": null
                        },
                        "other_attributes": []
                      },
                      "refType": "in",
                      "type": "nsILegacyJumpListCommittedCallback",
                      "name": "callback"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [
                  {
                    "kind": "DOC_COMMENT",
                    "contents": "/**\n   * Deletes any currently applied taskbar jump list for this application.\n   * Common uses would be the enabling of a privacy mode and uninstallation.\n   *\n   * @returns true if the operation completed successfully.\n   *\n   * @throw NS_ERROR_UNEXPECTED on internal errors.\n   */"
                  }
                ],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "boolean",
                  "name": "deleteActiveList",
                  "params": null,
                  "raises": null
                }
              }
            },
            {
              "kind": "ifacebody_$0_$0",
              "contents": {
                "kind": "member_$0",
                "docComment": [],
                "code": {
                  "kind": "func",
                  "attributes": null,
                  "return_type": "void",
                  "name": "setAppUserModelID",
                  "params": {
                    "kind": "paramlist",
                    "first_param": {
                      "kind": "param",
                      "attribute": null,
                      "refType": "in",
                      "type": "AString",
                      "name": "aAppUserModelId"
                    },
                    "other": []
                  },
                  "raises": null
                }
              }
            }
          ]
        }
      }
    },
    "\n"
  ]
}