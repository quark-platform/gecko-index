/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* // Taken from: http://www.devdoc.net/web/developer.mozilla.org/en-US/docs/XPIDL/Syntax.html
* idlfile := {_ | ANY_COMMENT | CDATA | webidl | INCLUDE | interface_main | typedef | native | RAW_CODE_FRAGMENT}* $
* webidl := 'webidl' _ IDENTIFIER ';'
* typedef := 'typedef' _ IDENTIFIER _ IDENTIFIER _? ';'
* native := {attributes _}? 'native' _ IDENTIFIER _? '\(' {'const' _}? NATIVEID '\);'
* interface_main := {attributes _}? 'interface' _ IDENTIFIER _? ifacebase? ifacebody? ';'
* ifacebase := ':' _? IDENTIFIER
* ifacebody := _? '{' {{_? {SINGLE_LINE_COMMENT | REGULAR_MULTILINE_COMMENT | member | RAW_CODE_FRAGMENT}}* _?}? '}'
* member := {
*     {DOC_COMMENT | SINGLE_LINE_COMMENT}*
*     _?
*     { 
*         CDATA
*         | {'cenum' _ IDENTIFIER _? ':' _? NUMBER _? '{' {ANY_COMMENT | _}* cenumlist? {ANY_COMMENT | _}* '}' ';'}
*         | {'const' _ IDENTIFIER _ IDENTIFIER _? '=' _? num ';'}
*         | {{attributes _?}? {ANY_COMMENT | _}* {'readonly' _}? 'attribute' _ IDENTIFIER {_ | ANY_COMMENT}+ IDENTIFIER ';'}
*         | {{attributes _?}? IDENTIFIER _ IDENTIFIER _? '\(' _? paramlist? _? '\)' raises? _? ';'}
*     }
* }
* paramlist := param {_? ',' _? param}*
* raises := 'raises' '\(' IDENTIFIER {_? ',' _? IDENTIFIER}* '\)'
* attributes := '\[' attribute {_? ',' _? attribute}* '\]'
* attribute := IDENTIFIER {_? '\(' {IID | IDENTIFIER} '\)'}?
* param := ANY_COMMENT? {attributes _?}? {'inout' |'in' | 'out'}? _? IDENTIFIER {_ | ANY_COMMENT}+ IDENTIFIER 
* cenumlist := cenum {',' _? {SINGLE_LINE_COMMENT _?}* cenum}* ','? _? {ANY_COMMENT _?}*
* cenum := DOC_COMMENT* IDENTIFIER {_? '=' _? num}?
* num := 
*     {unary _? {'\+' | '-' | '\*'} _? num}
*     | {unary _? '\|' _? num} 
*     | {unary _? {'<<' | '>>'} _? num}
*     | unary
* unary := 
*     {'\(' num '\)'}
*     | {'-' num}
*     | IDENTIFIER
*     | NUMBER
*  
* // Comments
* ANY_COMMENT := REGULAR_MULTILINE_COMMENT | DOC_COMMENT | SINGLE_LINE_COMMENT
* REGULAR_MULTILINE_COMMENT := '\/\*(.|\n)*?\*\/' _?
* DOC_COMMENT := '\/\*\*?((\n|.)*?)\*\/' _?
* SINGLE_LINE_COMMENT := '\/\/.*\n' _?
* // Lexical tokens, I'm going to specify these in regex form
* NUMBER := '-?(0x[0-9A-Fa-f]+)|\d+'
* CDATA := RAW_CODE_FRAGMENT
* INCLUDE := '\#include[ \t]+"[\w\."\n]+"'
* NATIVEID_TEXT := '[a-zA-Z_<>&][0-9a-zA-Z_:<>*& ,]*'
* NATIVEID := NATIVEID_TEXT { '\(' NATIVEID_TEXT '\)' NATIVEID_TEXT* }?
* IID := '[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}'
* IDENTIFIER := {'Array' '<' _? IDENTIFIER _? '>'} | 'unsigned long long' | 'unsigned short' | 'unsigned long' | 'long long' | '[a-zA-Z_][0-9a-zA-Z_]*'
* _ := '[\s\n]+'
* RAW_CODE_FRAGMENT := '%{\s*C\+\+(\n|.)*?%}\s*(C\+\+)?'
*/
type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
export interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    idlfile = "idlfile",
    idlfile_$0_1 = "idlfile_$0_1",
    idlfile_$0_2 = "idlfile_$0_2",
    idlfile_$0_3 = "idlfile_$0_3",
    idlfile_$0_4 = "idlfile_$0_4",
    idlfile_$0_5 = "idlfile_$0_5",
    idlfile_$0_6 = "idlfile_$0_6",
    idlfile_$0_7 = "idlfile_$0_7",
    idlfile_$0_8 = "idlfile_$0_8",
    idlfile_$0_9 = "idlfile_$0_9",
    webidl = "webidl",
    typedef = "typedef",
    native = "native",
    native_$0 = "native_$0",
    native_$1 = "native_$1",
    interface_main = "interface_main",
    interface_main_$0 = "interface_main_$0",
    ifacebase = "ifacebase",
    ifacebody = "ifacebody",
    ifacebody_$0 = "ifacebody_$0",
    ifacebody_$0_$0 = "ifacebody_$0_$0",
    ifacebody_$0_$0_$0_1 = "ifacebody_$0_$0_$0_1",
    ifacebody_$0_$0_$0_2 = "ifacebody_$0_$0_$0_2",
    ifacebody_$0_$0_$0_3 = "ifacebody_$0_$0_$0_3",
    ifacebody_$0_$0_$0_4 = "ifacebody_$0_$0_$0_4",
    member = "member",
    member_$0 = "member_$0",
    member_$0_$0_1 = "member_$0_$0_1",
    member_$0_$0_2 = "member_$0_$0_2",
    member_$0_$1_1 = "member_$0_$1_1",
    member_$0_$1_2 = "member_$0_$1_2",
    member_$0_$1_3 = "member_$0_$1_3",
    member_$0_$1_4 = "member_$0_$1_4",
    member_$0_$1_5 = "member_$0_$1_5",
    member_$0_$1_$0 = "member_$0_$1_$0",
    member_$0_$1_$0_$0_1 = "member_$0_$1_$0_$0_1",
    member_$0_$1_$0_$0_2 = "member_$0_$1_$0_$0_2",
    member_$0_$1_$0_$1_1 = "member_$0_$1_$0_$1_1",
    member_$0_$1_$0_$1_2 = "member_$0_$1_$0_$1_2",
    member_$0_$1_$1 = "member_$0_$1_$1",
    member_$0_$1_$2 = "member_$0_$1_$2",
    member_$0_$1_$2_$0 = "member_$0_$1_$2_$0",
    member_$0_$1_$2_$1_1 = "member_$0_$1_$2_$1_1",
    member_$0_$1_$2_$1_2 = "member_$0_$1_$2_$1_2",
    member_$0_$1_$2_$2 = "member_$0_$1_$2_$2",
    member_$0_$1_$2_$3_1 = "member_$0_$1_$2_$3_1",
    member_$0_$1_$2_$3_2 = "member_$0_$1_$2_$3_2",
    member_$0_$1_$3 = "member_$0_$1_$3",
    member_$0_$1_$3_$0 = "member_$0_$1_$3_$0",
    paramlist = "paramlist",
    paramlist_$0 = "paramlist_$0",
    raises = "raises",
    raises_$0 = "raises_$0",
    attributes = "attributes",
    attributes_$0 = "attributes_$0",
    attribute = "attribute",
    attribute_$0 = "attribute_$0",
    attribute_$0_$0_1 = "attribute_$0_$0_1",
    attribute_$0_$0_2 = "attribute_$0_$0_2",
    param = "param",
    param_$0 = "param_$0",
    param_$1_1 = "param_$1_1",
    param_$1_2 = "param_$1_2",
    param_$1_3 = "param_$1_3",
    param_$2_1 = "param_$2_1",
    param_$2_2 = "param_$2_2",
    cenumlist = "cenumlist",
    cenumlist_$0 = "cenumlist_$0",
    cenumlist_$0_$0 = "cenumlist_$0_$0",
    cenumlist_$1 = "cenumlist_$1",
    cenum = "cenum",
    cenum_$0 = "cenum_$0",
    num_1 = "num_1",
    num_2 = "num_2",
    num_3 = "num_3",
    num_4 = "num_4",
    num_$0 = "num_$0",
    num_$0_$0_1 = "num_$0_$0_1",
    num_$0_$0_2 = "num_$0_$0_2",
    num_$0_$0_3 = "num_$0_$0_3",
    num_$1 = "num_$1",
    num_$2 = "num_$2",
    num_$2_$0_1 = "num_$2_$0_1",
    num_$2_$0_2 = "num_$2_$0_2",
    unary_1 = "unary_1",
    unary_2 = "unary_2",
    unary_3 = "unary_3",
    unary_4 = "unary_4",
    unary_$0 = "unary_$0",
    unary_$1 = "unary_$1",
    ANY_COMMENT_1 = "ANY_COMMENT_1",
    ANY_COMMENT_2 = "ANY_COMMENT_2",
    ANY_COMMENT_3 = "ANY_COMMENT_3",
    REGULAR_MULTILINE_COMMENT = "REGULAR_MULTILINE_COMMENT",
    DOC_COMMENT = "DOC_COMMENT",
    SINGLE_LINE_COMMENT = "SINGLE_LINE_COMMENT",
    NUMBER = "NUMBER",
    CDATA = "CDATA",
    INCLUDE = "INCLUDE",
    NATIVEID_TEXT = "NATIVEID_TEXT",
    NATIVEID = "NATIVEID",
    NATIVEID_$0 = "NATIVEID_$0",
    IID = "IID",
    IDENTIFIER_1 = "IDENTIFIER_1",
    IDENTIFIER_2 = "IDENTIFIER_2",
    IDENTIFIER_3 = "IDENTIFIER_3",
    IDENTIFIER_4 = "IDENTIFIER_4",
    IDENTIFIER_5 = "IDENTIFIER_5",
    IDENTIFIER_6 = "IDENTIFIER_6",
    IDENTIFIER_$0 = "IDENTIFIER_$0",
    _ = "_",
    RAW_CODE_FRAGMENT = "RAW_CODE_FRAGMENT",
    $EOF = "$EOF",
}
export interface idlfile {
    kind: ASTKinds.idlfile;
}
export type idlfile_$0 = idlfile_$0_1 | idlfile_$0_2 | idlfile_$0_3 | idlfile_$0_4 | idlfile_$0_5 | idlfile_$0_6 | idlfile_$0_7 | idlfile_$0_8 | idlfile_$0_9;
export type idlfile_$0_1 = _;
export type idlfile_$0_2 = ANY_COMMENT;
export type idlfile_$0_3 = CDATA;
export type idlfile_$0_4 = webidl;
export type idlfile_$0_5 = INCLUDE;
export type idlfile_$0_6 = interface_main;
export type idlfile_$0_7 = typedef;
export type idlfile_$0_8 = native;
export type idlfile_$0_9 = RAW_CODE_FRAGMENT;
export interface webidl {
    kind: ASTKinds.webidl;
}
export interface typedef {
    kind: ASTKinds.typedef;
}
export interface native {
    kind: ASTKinds.native;
}
export interface native_$0 {
    kind: ASTKinds.native_$0;
}
export interface native_$1 {
    kind: ASTKinds.native_$1;
}
export interface interface_main {
    kind: ASTKinds.interface_main;
}
export interface interface_main_$0 {
    kind: ASTKinds.interface_main_$0;
}
export interface ifacebase {
    kind: ASTKinds.ifacebase;
}
export interface ifacebody {
    kind: ASTKinds.ifacebody;
}
export interface ifacebody_$0 {
    kind: ASTKinds.ifacebody_$0;
}
export interface ifacebody_$0_$0 {
    kind: ASTKinds.ifacebody_$0_$0;
}
export type ifacebody_$0_$0_$0 = ifacebody_$0_$0_$0_1 | ifacebody_$0_$0_$0_2 | ifacebody_$0_$0_$0_3 | ifacebody_$0_$0_$0_4;
export type ifacebody_$0_$0_$0_1 = SINGLE_LINE_COMMENT;
export type ifacebody_$0_$0_$0_2 = REGULAR_MULTILINE_COMMENT;
export type ifacebody_$0_$0_$0_3 = member;
export type ifacebody_$0_$0_$0_4 = RAW_CODE_FRAGMENT;
export type member = member_$0;
export interface member_$0 {
    kind: ASTKinds.member_$0;
}
export type member_$0_$0 = member_$0_$0_1 | member_$0_$0_2;
export type member_$0_$0_1 = DOC_COMMENT;
export type member_$0_$0_2 = SINGLE_LINE_COMMENT;
export type member_$0_$1 = member_$0_$1_1 | member_$0_$1_2 | member_$0_$1_3 | member_$0_$1_4 | member_$0_$1_5;
export type member_$0_$1_1 = CDATA;
export type member_$0_$1_2 = member_$0_$1_$0;
export type member_$0_$1_3 = member_$0_$1_$1;
export type member_$0_$1_4 = member_$0_$1_$2;
export type member_$0_$1_5 = member_$0_$1_$3;
export interface member_$0_$1_$0 {
    kind: ASTKinds.member_$0_$1_$0;
}
export type member_$0_$1_$0_$0 = member_$0_$1_$0_$0_1 | member_$0_$1_$0_$0_2;
export type member_$0_$1_$0_$0_1 = ANY_COMMENT;
export type member_$0_$1_$0_$0_2 = _;
export type member_$0_$1_$0_$1 = member_$0_$1_$0_$1_1 | member_$0_$1_$0_$1_2;
export type member_$0_$1_$0_$1_1 = ANY_COMMENT;
export type member_$0_$1_$0_$1_2 = _;
export interface member_$0_$1_$1 {
    kind: ASTKinds.member_$0_$1_$1;
}
export interface member_$0_$1_$2 {
    kind: ASTKinds.member_$0_$1_$2;
}
export interface member_$0_$1_$2_$0 {
    kind: ASTKinds.member_$0_$1_$2_$0;
}
export type member_$0_$1_$2_$1 = member_$0_$1_$2_$1_1 | member_$0_$1_$2_$1_2;
export type member_$0_$1_$2_$1_1 = ANY_COMMENT;
export type member_$0_$1_$2_$1_2 = _;
export interface member_$0_$1_$2_$2 {
    kind: ASTKinds.member_$0_$1_$2_$2;
}
export type member_$0_$1_$2_$3 = member_$0_$1_$2_$3_1 | member_$0_$1_$2_$3_2;
export type member_$0_$1_$2_$3_1 = _;
export type member_$0_$1_$2_$3_2 = ANY_COMMENT;
export interface member_$0_$1_$3 {
    kind: ASTKinds.member_$0_$1_$3;
}
export interface member_$0_$1_$3_$0 {
    kind: ASTKinds.member_$0_$1_$3_$0;
}
export interface paramlist {
    kind: ASTKinds.paramlist;
}
export interface paramlist_$0 {
    kind: ASTKinds.paramlist_$0;
}
export interface raises {
    kind: ASTKinds.raises;
}
export interface raises_$0 {
    kind: ASTKinds.raises_$0;
}
export interface attributes {
    kind: ASTKinds.attributes;
}
export interface attributes_$0 {
    kind: ASTKinds.attributes_$0;
}
export interface attribute {
    kind: ASTKinds.attribute;
}
export interface attribute_$0 {
    kind: ASTKinds.attribute_$0;
}
export type attribute_$0_$0 = attribute_$0_$0_1 | attribute_$0_$0_2;
export type attribute_$0_$0_1 = IID;
export type attribute_$0_$0_2 = IDENTIFIER;
export interface param {
    kind: ASTKinds.param;
}
export interface param_$0 {
    kind: ASTKinds.param_$0;
}
export type param_$1 = param_$1_1 | param_$1_2 | param_$1_3;
export type param_$1_1 = string;
export type param_$1_2 = string;
export type param_$1_3 = string;
export type param_$2 = param_$2_1 | param_$2_2;
export type param_$2_1 = _;
export type param_$2_2 = ANY_COMMENT;
export interface cenumlist {
    kind: ASTKinds.cenumlist;
}
export interface cenumlist_$0 {
    kind: ASTKinds.cenumlist_$0;
}
export interface cenumlist_$0_$0 {
    kind: ASTKinds.cenumlist_$0_$0;
}
export interface cenumlist_$1 {
    kind: ASTKinds.cenumlist_$1;
}
export interface cenum {
    kind: ASTKinds.cenum;
}
export interface cenum_$0 {
    kind: ASTKinds.cenum_$0;
}
export type num = num_1 | num_2 | num_3 | num_4;
export type num_1 = num_$0;
export type num_2 = num_$1;
export type num_3 = num_$2;
export type num_4 = unary;
export interface num_$0 {
    kind: ASTKinds.num_$0;
}
export type num_$0_$0 = num_$0_$0_1 | num_$0_$0_2 | num_$0_$0_3;
export type num_$0_$0_1 = string;
export type num_$0_$0_2 = string;
export type num_$0_$0_3 = string;
export interface num_$1 {
    kind: ASTKinds.num_$1;
}
export interface num_$2 {
    kind: ASTKinds.num_$2;
}
export type num_$2_$0 = num_$2_$0_1 | num_$2_$0_2;
export type num_$2_$0_1 = string;
export type num_$2_$0_2 = string;
export type unary = unary_1 | unary_2 | unary_3 | unary_4;
export type unary_1 = unary_$0;
export type unary_2 = unary_$1;
export type unary_3 = IDENTIFIER;
export type unary_4 = NUMBER;
export interface unary_$0 {
    kind: ASTKinds.unary_$0;
}
export interface unary_$1 {
    kind: ASTKinds.unary_$1;
}
export type ANY_COMMENT = ANY_COMMENT_1 | ANY_COMMENT_2 | ANY_COMMENT_3;
export type ANY_COMMENT_1 = REGULAR_MULTILINE_COMMENT;
export type ANY_COMMENT_2 = DOC_COMMENT;
export type ANY_COMMENT_3 = SINGLE_LINE_COMMENT;
export interface REGULAR_MULTILINE_COMMENT {
    kind: ASTKinds.REGULAR_MULTILINE_COMMENT;
}
export interface DOC_COMMENT {
    kind: ASTKinds.DOC_COMMENT;
}
export interface SINGLE_LINE_COMMENT {
    kind: ASTKinds.SINGLE_LINE_COMMENT;
}
export type NUMBER = string;
export type CDATA = RAW_CODE_FRAGMENT;
export type INCLUDE = string;
export type NATIVEID_TEXT = string;
export interface NATIVEID {
    kind: ASTKinds.NATIVEID;
}
export interface NATIVEID_$0 {
    kind: ASTKinds.NATIVEID_$0;
}
export type IID = string;
export type IDENTIFIER = IDENTIFIER_1 | IDENTIFIER_2 | IDENTIFIER_3 | IDENTIFIER_4 | IDENTIFIER_5 | IDENTIFIER_6;
export type IDENTIFIER_1 = IDENTIFIER_$0;
export type IDENTIFIER_2 = string;
export type IDENTIFIER_3 = string;
export type IDENTIFIER_4 = string;
export type IDENTIFIER_5 = string;
export type IDENTIFIER_6 = string;
export interface IDENTIFIER_$0 {
    kind: ASTKinds.IDENTIFIER_$0;
}
export type _ = string;
export type RAW_CODE_FRAGMENT = string;
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    private memoSafe: boolean = true;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public clearMemos(): void {
    }
    public matchidlfile($$dpth: number, $$cr?: ErrorTracker): Nullable<idlfile> {
        return this.run<idlfile>($$dpth,
            () => {
                let $$res: Nullable<idlfile> = null;
                if (true
                    && this.loop<idlfile_$0>(() => this.matchidlfile_$0($$dpth + 1, $$cr), true) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.idlfile, };
                }
                return $$res;
            });
    }
    public matchidlfile_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<idlfile_$0> {
        return this.choice<idlfile_$0>([
            () => this.matchidlfile_$0_1($$dpth + 1, $$cr),
            () => this.matchidlfile_$0_2($$dpth + 1, $$cr),
            () => this.matchidlfile_$0_3($$dpth + 1, $$cr),
            () => this.matchidlfile_$0_4($$dpth + 1, $$cr),
            () => this.matchidlfile_$0_5($$dpth + 1, $$cr),
            () => this.matchidlfile_$0_6($$dpth + 1, $$cr),
            () => this.matchidlfile_$0_7($$dpth + 1, $$cr),
            () => this.matchidlfile_$0_8($$dpth + 1, $$cr),
            () => this.matchidlfile_$0_9($$dpth + 1, $$cr),
        ]);
    }
    public matchidlfile_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<idlfile_$0_1> {
        return this.match_($$dpth + 1, $$cr);
    }
    public matchidlfile_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<idlfile_$0_2> {
        return this.matchANY_COMMENT($$dpth + 1, $$cr);
    }
    public matchidlfile_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<idlfile_$0_3> {
        return this.matchCDATA($$dpth + 1, $$cr);
    }
    public matchidlfile_$0_4($$dpth: number, $$cr?: ErrorTracker): Nullable<idlfile_$0_4> {
        return this.matchwebidl($$dpth + 1, $$cr);
    }
    public matchidlfile_$0_5($$dpth: number, $$cr?: ErrorTracker): Nullable<idlfile_$0_5> {
        return this.matchINCLUDE($$dpth + 1, $$cr);
    }
    public matchidlfile_$0_6($$dpth: number, $$cr?: ErrorTracker): Nullable<idlfile_$0_6> {
        return this.matchinterface_main($$dpth + 1, $$cr);
    }
    public matchidlfile_$0_7($$dpth: number, $$cr?: ErrorTracker): Nullable<idlfile_$0_7> {
        return this.matchtypedef($$dpth + 1, $$cr);
    }
    public matchidlfile_$0_8($$dpth: number, $$cr?: ErrorTracker): Nullable<idlfile_$0_8> {
        return this.matchnative($$dpth + 1, $$cr);
    }
    public matchidlfile_$0_9($$dpth: number, $$cr?: ErrorTracker): Nullable<idlfile_$0_9> {
        return this.matchRAW_CODE_FRAGMENT($$dpth + 1, $$cr);
    }
    public matchwebidl($$dpth: number, $$cr?: ErrorTracker): Nullable<webidl> {
        return this.run<webidl>($$dpth,
            () => {
                let $$res: Nullable<webidl> = null;
                if (true
                    && this.regexAccept(String.raw`(?:webidl)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchIDENTIFIER($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:;)`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.webidl, };
                }
                return $$res;
            });
    }
    public matchtypedef($$dpth: number, $$cr?: ErrorTracker): Nullable<typedef> {
        return this.run<typedef>($$dpth,
            () => {
                let $$res: Nullable<typedef> = null;
                if (true
                    && this.regexAccept(String.raw`(?:typedef)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchIDENTIFIER($$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchIDENTIFIER($$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:;)`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.typedef, };
                }
                return $$res;
            });
    }
    public matchnative($$dpth: number, $$cr?: ErrorTracker): Nullable<native> {
        return this.run<native>($$dpth,
            () => {
                let $$res: Nullable<native> = null;
                if (true
                    && ((this.matchnative_$0($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:native)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchIDENTIFIER($$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && ((this.matchnative_$1($$dpth + 1, $$cr)) || true)
                    && this.matchNATIVEID($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\);)`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.native, };
                }
                return $$res;
            });
    }
    public matchnative_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<native_$0> {
        return this.run<native_$0>($$dpth,
            () => {
                let $$res: Nullable<native_$0> = null;
                if (true
                    && this.matchattributes($$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.native_$0, };
                }
                return $$res;
            });
    }
    public matchnative_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<native_$1> {
        return this.run<native_$1>($$dpth,
            () => {
                let $$res: Nullable<native_$1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:const)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.native_$1, };
                }
                return $$res;
            });
    }
    public matchinterface_main($$dpth: number, $$cr?: ErrorTracker): Nullable<interface_main> {
        return this.run<interface_main>($$dpth,
            () => {
                let $$res: Nullable<interface_main> = null;
                if (true
                    && ((this.matchinterface_main_$0($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:interface)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchIDENTIFIER($$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && ((this.matchifacebase($$dpth + 1, $$cr)) || true)
                    && ((this.matchifacebody($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:;)`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.interface_main, };
                }
                return $$res;
            });
    }
    public matchinterface_main_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<interface_main_$0> {
        return this.run<interface_main_$0>($$dpth,
            () => {
                let $$res: Nullable<interface_main_$0> = null;
                if (true
                    && this.matchattributes($$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.interface_main_$0, };
                }
                return $$res;
            });
    }
    public matchifacebase($$dpth: number, $$cr?: ErrorTracker): Nullable<ifacebase> {
        return this.run<ifacebase>($$dpth,
            () => {
                let $$res: Nullable<ifacebase> = null;
                if (true
                    && this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.matchIDENTIFIER($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.ifacebase, };
                }
                return $$res;
            });
    }
    public matchifacebody($$dpth: number, $$cr?: ErrorTracker): Nullable<ifacebody> {
        return this.run<ifacebody>($$dpth,
            () => {
                let $$res: Nullable<ifacebody> = null;
                if (true
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:{)`, $$dpth + 1, $$cr) !== null
                    && ((this.matchifacebody_$0($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:})`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.ifacebody, };
                }
                return $$res;
            });
    }
    public matchifacebody_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<ifacebody_$0> {
        return this.run<ifacebody_$0>($$dpth,
            () => {
                let $$res: Nullable<ifacebody_$0> = null;
                if (true
                    && this.loop<ifacebody_$0_$0>(() => this.matchifacebody_$0_$0($$dpth + 1, $$cr), true) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.ifacebody_$0, };
                }
                return $$res;
            });
    }
    public matchifacebody_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<ifacebody_$0_$0> {
        return this.run<ifacebody_$0_$0>($$dpth,
            () => {
                let $$res: Nullable<ifacebody_$0_$0> = null;
                if (true
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.matchifacebody_$0_$0_$0($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.ifacebody_$0_$0, };
                }
                return $$res;
            });
    }
    public matchifacebody_$0_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<ifacebody_$0_$0_$0> {
        return this.choice<ifacebody_$0_$0_$0>([
            () => this.matchifacebody_$0_$0_$0_1($$dpth + 1, $$cr),
            () => this.matchifacebody_$0_$0_$0_2($$dpth + 1, $$cr),
            () => this.matchifacebody_$0_$0_$0_3($$dpth + 1, $$cr),
            () => this.matchifacebody_$0_$0_$0_4($$dpth + 1, $$cr),
        ]);
    }
    public matchifacebody_$0_$0_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ifacebody_$0_$0_$0_1> {
        return this.matchSINGLE_LINE_COMMENT($$dpth + 1, $$cr);
    }
    public matchifacebody_$0_$0_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ifacebody_$0_$0_$0_2> {
        return this.matchREGULAR_MULTILINE_COMMENT($$dpth + 1, $$cr);
    }
    public matchifacebody_$0_$0_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<ifacebody_$0_$0_$0_3> {
        return this.matchmember($$dpth + 1, $$cr);
    }
    public matchifacebody_$0_$0_$0_4($$dpth: number, $$cr?: ErrorTracker): Nullable<ifacebody_$0_$0_$0_4> {
        return this.matchRAW_CODE_FRAGMENT($$dpth + 1, $$cr);
    }
    public matchmember($$dpth: number, $$cr?: ErrorTracker): Nullable<member> {
        return this.matchmember_$0($$dpth + 1, $$cr);
    }
    public matchmember_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<member_$0> {
        return this.run<member_$0>($$dpth,
            () => {
                let $$res: Nullable<member_$0> = null;
                if (true
                    && this.loop<member_$0_$0>(() => this.matchmember_$0_$0($$dpth + 1, $$cr), true) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.matchmember_$0_$1($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.member_$0, };
                }
                return $$res;
            });
    }
    public matchmember_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<member_$0_$0> {
        return this.choice<member_$0_$0>([
            () => this.matchmember_$0_$0_1($$dpth + 1, $$cr),
            () => this.matchmember_$0_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchmember_$0_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<member_$0_$0_1> {
        return this.matchDOC_COMMENT($$dpth + 1, $$cr);
    }
    public matchmember_$0_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<member_$0_$0_2> {
        return this.matchSINGLE_LINE_COMMENT($$dpth + 1, $$cr);
    }
    public matchmember_$0_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<member_$0_$1> {
        return this.choice<member_$0_$1>([
            () => this.matchmember_$0_$1_1($$dpth + 1, $$cr),
            () => this.matchmember_$0_$1_2($$dpth + 1, $$cr),
            () => this.matchmember_$0_$1_3($$dpth + 1, $$cr),
            () => this.matchmember_$0_$1_4($$dpth + 1, $$cr),
            () => this.matchmember_$0_$1_5($$dpth + 1, $$cr),
        ]);
    }
    public matchmember_$0_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<member_$0_$1_1> {
        return this.matchCDATA($$dpth + 1, $$cr);
    }
    public matchmember_$0_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<member_$0_$1_2> {
        return this.matchmember_$0_$1_$0($$dpth + 1, $$cr);
    }
    public matchmember_$0_$1_3($$dpth: number, $$cr?: ErrorTracker): Nullable<member_$0_$1_3> {
        return this.matchmember_$0_$1_$1($$dpth + 1, $$cr);
    }
    public matchmember_$0_$1_4($$dpth: number, $$cr?: ErrorTracker): Nullable<member_$0_$1_4> {
        return this.matchmember_$0_$1_$2($$dpth + 1, $$cr);
    }
    public matchmember_$0_$1_5($$dpth: number, $$cr?: ErrorTracker): Nullable<member_$0_$1_5> {
        return this.matchmember_$0_$1_$3($$dpth + 1, $$cr);
    }
    public matchmember_$0_$1_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<member_$0_$1_$0> {
        return this.run<member_$0_$1_$0>($$dpth,
            () => {
                let $$res: Nullable<member_$0_$1_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:cenum)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchIDENTIFIER($$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.matchNUMBER($$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:{)`, $$dpth + 1, $$cr) !== null
                    && this.loop<member_$0_$1_$0_$0>(() => this.matchmember_$0_$1_$0_$0($$dpth + 1, $$cr), true) !== null
                    && ((this.matchcenumlist($$dpth + 1, $$cr)) || true)
                    && this.loop<member_$0_$1_$0_$1>(() => this.matchmember_$0_$1_$0_$1($$dpth + 1, $$cr), true) !== null
                    && this.regexAccept(String.raw`(?:})`, $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:;)`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.member_$0_$1_$0, };
                }
                return $$res;
            });
    }
    public matchmember_$0_$1_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<member_$0_$1_$0_$0> {
        return this.choice<member_$0_$1_$0_$0>([
            () => this.matchmember_$0_$1_$0_$0_1($$dpth + 1, $$cr),
            () => this.matchmember_$0_$1_$0_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchmember_$0_$1_$0_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<member_$0_$1_$0_$0_1> {
        return this.matchANY_COMMENT($$dpth + 1, $$cr);
    }
    public matchmember_$0_$1_$0_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<member_$0_$1_$0_$0_2> {
        return this.match_($$dpth + 1, $$cr);
    }
    public matchmember_$0_$1_$0_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<member_$0_$1_$0_$1> {
        return this.choice<member_$0_$1_$0_$1>([
            () => this.matchmember_$0_$1_$0_$1_1($$dpth + 1, $$cr),
            () => this.matchmember_$0_$1_$0_$1_2($$dpth + 1, $$cr),
        ]);
    }
    public matchmember_$0_$1_$0_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<member_$0_$1_$0_$1_1> {
        return this.matchANY_COMMENT($$dpth + 1, $$cr);
    }
    public matchmember_$0_$1_$0_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<member_$0_$1_$0_$1_2> {
        return this.match_($$dpth + 1, $$cr);
    }
    public matchmember_$0_$1_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<member_$0_$1_$1> {
        return this.run<member_$0_$1_$1>($$dpth,
            () => {
                let $$res: Nullable<member_$0_$1_$1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:const)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchIDENTIFIER($$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchIDENTIFIER($$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:=)`, $$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.matchnum($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:;)`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.member_$0_$1_$1, };
                }
                return $$res;
            });
    }
    public matchmember_$0_$1_$2($$dpth: number, $$cr?: ErrorTracker): Nullable<member_$0_$1_$2> {
        return this.run<member_$0_$1_$2>($$dpth,
            () => {
                let $$res: Nullable<member_$0_$1_$2> = null;
                if (true
                    && ((this.matchmember_$0_$1_$2_$0($$dpth + 1, $$cr)) || true)
                    && this.loop<member_$0_$1_$2_$1>(() => this.matchmember_$0_$1_$2_$1($$dpth + 1, $$cr), true) !== null
                    && ((this.matchmember_$0_$1_$2_$2($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:attribute)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchIDENTIFIER($$dpth + 1, $$cr) !== null
                    && this.loop<member_$0_$1_$2_$3>(() => this.matchmember_$0_$1_$2_$3($$dpth + 1, $$cr), false) !== null
                    && this.matchIDENTIFIER($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:;)`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.member_$0_$1_$2, };
                }
                return $$res;
            });
    }
    public matchmember_$0_$1_$2_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<member_$0_$1_$2_$0> {
        return this.run<member_$0_$1_$2_$0>($$dpth,
            () => {
                let $$res: Nullable<member_$0_$1_$2_$0> = null;
                if (true
                    && this.matchattributes($$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.member_$0_$1_$2_$0, };
                }
                return $$res;
            });
    }
    public matchmember_$0_$1_$2_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<member_$0_$1_$2_$1> {
        return this.choice<member_$0_$1_$2_$1>([
            () => this.matchmember_$0_$1_$2_$1_1($$dpth + 1, $$cr),
            () => this.matchmember_$0_$1_$2_$1_2($$dpth + 1, $$cr),
        ]);
    }
    public matchmember_$0_$1_$2_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<member_$0_$1_$2_$1_1> {
        return this.matchANY_COMMENT($$dpth + 1, $$cr);
    }
    public matchmember_$0_$1_$2_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<member_$0_$1_$2_$1_2> {
        return this.match_($$dpth + 1, $$cr);
    }
    public matchmember_$0_$1_$2_$2($$dpth: number, $$cr?: ErrorTracker): Nullable<member_$0_$1_$2_$2> {
        return this.run<member_$0_$1_$2_$2>($$dpth,
            () => {
                let $$res: Nullable<member_$0_$1_$2_$2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:readonly)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.member_$0_$1_$2_$2, };
                }
                return $$res;
            });
    }
    public matchmember_$0_$1_$2_$3($$dpth: number, $$cr?: ErrorTracker): Nullable<member_$0_$1_$2_$3> {
        return this.choice<member_$0_$1_$2_$3>([
            () => this.matchmember_$0_$1_$2_$3_1($$dpth + 1, $$cr),
            () => this.matchmember_$0_$1_$2_$3_2($$dpth + 1, $$cr),
        ]);
    }
    public matchmember_$0_$1_$2_$3_1($$dpth: number, $$cr?: ErrorTracker): Nullable<member_$0_$1_$2_$3_1> {
        return this.match_($$dpth + 1, $$cr);
    }
    public matchmember_$0_$1_$2_$3_2($$dpth: number, $$cr?: ErrorTracker): Nullable<member_$0_$1_$2_$3_2> {
        return this.matchANY_COMMENT($$dpth + 1, $$cr);
    }
    public matchmember_$0_$1_$3($$dpth: number, $$cr?: ErrorTracker): Nullable<member_$0_$1_$3> {
        return this.run<member_$0_$1_$3>($$dpth,
            () => {
                let $$res: Nullable<member_$0_$1_$3> = null;
                if (true
                    && ((this.matchmember_$0_$1_$3_$0($$dpth + 1, $$cr)) || true)
                    && this.matchIDENTIFIER($$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchIDENTIFIER($$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && ((this.matchparamlist($$dpth + 1, $$cr)) || true)
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                    && ((this.matchraises($$dpth + 1, $$cr)) || true)
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:;)`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.member_$0_$1_$3, };
                }
                return $$res;
            });
    }
    public matchmember_$0_$1_$3_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<member_$0_$1_$3_$0> {
        return this.run<member_$0_$1_$3_$0>($$dpth,
            () => {
                let $$res: Nullable<member_$0_$1_$3_$0> = null;
                if (true
                    && this.matchattributes($$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.member_$0_$1_$3_$0, };
                }
                return $$res;
            });
    }
    public matchparamlist($$dpth: number, $$cr?: ErrorTracker): Nullable<paramlist> {
        return this.run<paramlist>($$dpth,
            () => {
                let $$res: Nullable<paramlist> = null;
                if (true
                    && this.matchparam($$dpth + 1, $$cr) !== null
                    && this.loop<paramlist_$0>(() => this.matchparamlist_$0($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.paramlist, };
                }
                return $$res;
            });
    }
    public matchparamlist_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<paramlist_$0> {
        return this.run<paramlist_$0>($$dpth,
            () => {
                let $$res: Nullable<paramlist_$0> = null;
                if (true
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.matchparam($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.paramlist_$0, };
                }
                return $$res;
            });
    }
    public matchraises($$dpth: number, $$cr?: ErrorTracker): Nullable<raises> {
        return this.run<raises>($$dpth,
            () => {
                let $$res: Nullable<raises> = null;
                if (true
                    && this.regexAccept(String.raw`(?:raises)`, $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && this.matchIDENTIFIER($$dpth + 1, $$cr) !== null
                    && this.loop<raises_$0>(() => this.matchraises_$0($$dpth + 1, $$cr), true) !== null
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.raises, };
                }
                return $$res;
            });
    }
    public matchraises_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<raises_$0> {
        return this.run<raises_$0>($$dpth,
            () => {
                let $$res: Nullable<raises_$0> = null;
                if (true
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.matchIDENTIFIER($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.raises_$0, };
                }
                return $$res;
            });
    }
    public matchattributes($$dpth: number, $$cr?: ErrorTracker): Nullable<attributes> {
        return this.run<attributes>($$dpth,
            () => {
                let $$res: Nullable<attributes> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\[)`, $$dpth + 1, $$cr) !== null
                    && this.matchattribute($$dpth + 1, $$cr) !== null
                    && this.loop<attributes_$0>(() => this.matchattributes_$0($$dpth + 1, $$cr), true) !== null
                    && this.regexAccept(String.raw`(?:\])`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.attributes, };
                }
                return $$res;
            });
    }
    public matchattributes_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<attributes_$0> {
        return this.run<attributes_$0>($$dpth,
            () => {
                let $$res: Nullable<attributes_$0> = null;
                if (true
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.matchattribute($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.attributes_$0, };
                }
                return $$res;
            });
    }
    public matchattribute($$dpth: number, $$cr?: ErrorTracker): Nullable<attribute> {
        return this.run<attribute>($$dpth,
            () => {
                let $$res: Nullable<attribute> = null;
                if (true
                    && this.matchIDENTIFIER($$dpth + 1, $$cr) !== null
                    && ((this.matchattribute_$0($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.attribute, };
                }
                return $$res;
            });
    }
    public matchattribute_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<attribute_$0> {
        return this.run<attribute_$0>($$dpth,
            () => {
                let $$res: Nullable<attribute_$0> = null;
                if (true
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && this.matchattribute_$0_$0($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.attribute_$0, };
                }
                return $$res;
            });
    }
    public matchattribute_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<attribute_$0_$0> {
        return this.choice<attribute_$0_$0>([
            () => this.matchattribute_$0_$0_1($$dpth + 1, $$cr),
            () => this.matchattribute_$0_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchattribute_$0_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<attribute_$0_$0_1> {
        return this.matchIID($$dpth + 1, $$cr);
    }
    public matchattribute_$0_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<attribute_$0_$0_2> {
        return this.matchIDENTIFIER($$dpth + 1, $$cr);
    }
    public matchparam($$dpth: number, $$cr?: ErrorTracker): Nullable<param> {
        return this.run<param>($$dpth,
            () => {
                let $$res: Nullable<param> = null;
                if (true
                    && ((this.matchANY_COMMENT($$dpth + 1, $$cr)) || true)
                    && ((this.matchparam_$0($$dpth + 1, $$cr)) || true)
                    && ((this.matchparam_$1($$dpth + 1, $$cr)) || true)
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.matchIDENTIFIER($$dpth + 1, $$cr) !== null
                    && this.loop<param_$2>(() => this.matchparam_$2($$dpth + 1, $$cr), false) !== null
                    && this.matchIDENTIFIER($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.param, };
                }
                return $$res;
            });
    }
    public matchparam_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<param_$0> {
        return this.run<param_$0>($$dpth,
            () => {
                let $$res: Nullable<param_$0> = null;
                if (true
                    && this.matchattributes($$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.param_$0, };
                }
                return $$res;
            });
    }
    public matchparam_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<param_$1> {
        return this.choice<param_$1>([
            () => this.matchparam_$1_1($$dpth + 1, $$cr),
            () => this.matchparam_$1_2($$dpth + 1, $$cr),
            () => this.matchparam_$1_3($$dpth + 1, $$cr),
        ]);
    }
    public matchparam_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<param_$1_1> {
        return this.regexAccept(String.raw`(?:inout)`, $$dpth + 1, $$cr);
    }
    public matchparam_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<param_$1_2> {
        return this.regexAccept(String.raw`(?:in)`, $$dpth + 1, $$cr);
    }
    public matchparam_$1_3($$dpth: number, $$cr?: ErrorTracker): Nullable<param_$1_3> {
        return this.regexAccept(String.raw`(?:out)`, $$dpth + 1, $$cr);
    }
    public matchparam_$2($$dpth: number, $$cr?: ErrorTracker): Nullable<param_$2> {
        return this.choice<param_$2>([
            () => this.matchparam_$2_1($$dpth + 1, $$cr),
            () => this.matchparam_$2_2($$dpth + 1, $$cr),
        ]);
    }
    public matchparam_$2_1($$dpth: number, $$cr?: ErrorTracker): Nullable<param_$2_1> {
        return this.match_($$dpth + 1, $$cr);
    }
    public matchparam_$2_2($$dpth: number, $$cr?: ErrorTracker): Nullable<param_$2_2> {
        return this.matchANY_COMMENT($$dpth + 1, $$cr);
    }
    public matchcenumlist($$dpth: number, $$cr?: ErrorTracker): Nullable<cenumlist> {
        return this.run<cenumlist>($$dpth,
            () => {
                let $$res: Nullable<cenumlist> = null;
                if (true
                    && this.matchcenum($$dpth + 1, $$cr) !== null
                    && this.loop<cenumlist_$0>(() => this.matchcenumlist_$0($$dpth + 1, $$cr), true) !== null
                    && ((this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr)) || true)
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.loop<cenumlist_$1>(() => this.matchcenumlist_$1($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.cenumlist, };
                }
                return $$res;
            });
    }
    public matchcenumlist_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<cenumlist_$0> {
        return this.run<cenumlist_$0>($$dpth,
            () => {
                let $$res: Nullable<cenumlist_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.loop<cenumlist_$0_$0>(() => this.matchcenumlist_$0_$0($$dpth + 1, $$cr), true) !== null
                    && this.matchcenum($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.cenumlist_$0, };
                }
                return $$res;
            });
    }
    public matchcenumlist_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<cenumlist_$0_$0> {
        return this.run<cenumlist_$0_$0>($$dpth,
            () => {
                let $$res: Nullable<cenumlist_$0_$0> = null;
                if (true
                    && this.matchSINGLE_LINE_COMMENT($$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.cenumlist_$0_$0, };
                }
                return $$res;
            });
    }
    public matchcenumlist_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<cenumlist_$1> {
        return this.run<cenumlist_$1>($$dpth,
            () => {
                let $$res: Nullable<cenumlist_$1> = null;
                if (true
                    && this.matchANY_COMMENT($$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.cenumlist_$1, };
                }
                return $$res;
            });
    }
    public matchcenum($$dpth: number, $$cr?: ErrorTracker): Nullable<cenum> {
        return this.run<cenum>($$dpth,
            () => {
                let $$res: Nullable<cenum> = null;
                if (true
                    && this.loop<DOC_COMMENT>(() => this.matchDOC_COMMENT($$dpth + 1, $$cr), true) !== null
                    && this.matchIDENTIFIER($$dpth + 1, $$cr) !== null
                    && ((this.matchcenum_$0($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.cenum, };
                }
                return $$res;
            });
    }
    public matchcenum_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<cenum_$0> {
        return this.run<cenum_$0>($$dpth,
            () => {
                let $$res: Nullable<cenum_$0> = null;
                if (true
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:=)`, $$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.matchnum($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.cenum_$0, };
                }
                return $$res;
            });
    }
    public matchnum($$dpth: number, $$cr?: ErrorTracker): Nullable<num> {
        return this.choice<num>([
            () => this.matchnum_1($$dpth + 1, $$cr),
            () => this.matchnum_2($$dpth + 1, $$cr),
            () => this.matchnum_3($$dpth + 1, $$cr),
            () => this.matchnum_4($$dpth + 1, $$cr),
        ]);
    }
    public matchnum_1($$dpth: number, $$cr?: ErrorTracker): Nullable<num_1> {
        return this.matchnum_$0($$dpth + 1, $$cr);
    }
    public matchnum_2($$dpth: number, $$cr?: ErrorTracker): Nullable<num_2> {
        return this.matchnum_$1($$dpth + 1, $$cr);
    }
    public matchnum_3($$dpth: number, $$cr?: ErrorTracker): Nullable<num_3> {
        return this.matchnum_$2($$dpth + 1, $$cr);
    }
    public matchnum_4($$dpth: number, $$cr?: ErrorTracker): Nullable<num_4> {
        return this.matchunary($$dpth + 1, $$cr);
    }
    public matchnum_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<num_$0> {
        return this.run<num_$0>($$dpth,
            () => {
                let $$res: Nullable<num_$0> = null;
                if (true
                    && this.matchunary($$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.matchnum_$0_$0($$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.matchnum($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.num_$0, };
                }
                return $$res;
            });
    }
    public matchnum_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<num_$0_$0> {
        return this.choice<num_$0_$0>([
            () => this.matchnum_$0_$0_1($$dpth + 1, $$cr),
            () => this.matchnum_$0_$0_2($$dpth + 1, $$cr),
            () => this.matchnum_$0_$0_3($$dpth + 1, $$cr),
        ]);
    }
    public matchnum_$0_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<num_$0_$0_1> {
        return this.regexAccept(String.raw`(?:\+)`, $$dpth + 1, $$cr);
    }
    public matchnum_$0_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<num_$0_$0_2> {
        return this.regexAccept(String.raw`(?:-)`, $$dpth + 1, $$cr);
    }
    public matchnum_$0_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<num_$0_$0_3> {
        return this.regexAccept(String.raw`(?:\*)`, $$dpth + 1, $$cr);
    }
    public matchnum_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<num_$1> {
        return this.run<num_$1>($$dpth,
            () => {
                let $$res: Nullable<num_$1> = null;
                if (true
                    && this.matchunary($$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:\|)`, $$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.matchnum($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.num_$1, };
                }
                return $$res;
            });
    }
    public matchnum_$2($$dpth: number, $$cr?: ErrorTracker): Nullable<num_$2> {
        return this.run<num_$2>($$dpth,
            () => {
                let $$res: Nullable<num_$2> = null;
                if (true
                    && this.matchunary($$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.matchnum_$2_$0($$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.matchnum($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.num_$2, };
                }
                return $$res;
            });
    }
    public matchnum_$2_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<num_$2_$0> {
        return this.choice<num_$2_$0>([
            () => this.matchnum_$2_$0_1($$dpth + 1, $$cr),
            () => this.matchnum_$2_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchnum_$2_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<num_$2_$0_1> {
        return this.regexAccept(String.raw`(?:<<)`, $$dpth + 1, $$cr);
    }
    public matchnum_$2_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<num_$2_$0_2> {
        return this.regexAccept(String.raw`(?:>>)`, $$dpth + 1, $$cr);
    }
    public matchunary($$dpth: number, $$cr?: ErrorTracker): Nullable<unary> {
        return this.choice<unary>([
            () => this.matchunary_1($$dpth + 1, $$cr),
            () => this.matchunary_2($$dpth + 1, $$cr),
            () => this.matchunary_3($$dpth + 1, $$cr),
            () => this.matchunary_4($$dpth + 1, $$cr),
        ]);
    }
    public matchunary_1($$dpth: number, $$cr?: ErrorTracker): Nullable<unary_1> {
        return this.matchunary_$0($$dpth + 1, $$cr);
    }
    public matchunary_2($$dpth: number, $$cr?: ErrorTracker): Nullable<unary_2> {
        return this.matchunary_$1($$dpth + 1, $$cr);
    }
    public matchunary_3($$dpth: number, $$cr?: ErrorTracker): Nullable<unary_3> {
        return this.matchIDENTIFIER($$dpth + 1, $$cr);
    }
    public matchunary_4($$dpth: number, $$cr?: ErrorTracker): Nullable<unary_4> {
        return this.matchNUMBER($$dpth + 1, $$cr);
    }
    public matchunary_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<unary_$0> {
        return this.run<unary_$0>($$dpth,
            () => {
                let $$res: Nullable<unary_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && this.matchnum($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.unary_$0, };
                }
                return $$res;
            });
    }
    public matchunary_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<unary_$1> {
        return this.run<unary_$1>($$dpth,
            () => {
                let $$res: Nullable<unary_$1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:-)`, $$dpth + 1, $$cr) !== null
                    && this.matchnum($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.unary_$1, };
                }
                return $$res;
            });
    }
    public matchANY_COMMENT($$dpth: number, $$cr?: ErrorTracker): Nullable<ANY_COMMENT> {
        return this.choice<ANY_COMMENT>([
            () => this.matchANY_COMMENT_1($$dpth + 1, $$cr),
            () => this.matchANY_COMMENT_2($$dpth + 1, $$cr),
            () => this.matchANY_COMMENT_3($$dpth + 1, $$cr),
        ]);
    }
    public matchANY_COMMENT_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ANY_COMMENT_1> {
        return this.matchREGULAR_MULTILINE_COMMENT($$dpth + 1, $$cr);
    }
    public matchANY_COMMENT_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ANY_COMMENT_2> {
        return this.matchDOC_COMMENT($$dpth + 1, $$cr);
    }
    public matchANY_COMMENT_3($$dpth: number, $$cr?: ErrorTracker): Nullable<ANY_COMMENT_3> {
        return this.matchSINGLE_LINE_COMMENT($$dpth + 1, $$cr);
    }
    public matchREGULAR_MULTILINE_COMMENT($$dpth: number, $$cr?: ErrorTracker): Nullable<REGULAR_MULTILINE_COMMENT> {
        return this.run<REGULAR_MULTILINE_COMMENT>($$dpth,
            () => {
                let $$res: Nullable<REGULAR_MULTILINE_COMMENT> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\/\*(.|\n)*?\*\/)`, $$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.REGULAR_MULTILINE_COMMENT, };
                }
                return $$res;
            });
    }
    public matchDOC_COMMENT($$dpth: number, $$cr?: ErrorTracker): Nullable<DOC_COMMENT> {
        return this.run<DOC_COMMENT>($$dpth,
            () => {
                let $$res: Nullable<DOC_COMMENT> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\/\*\*?((\n|.)*?)\*\/)`, $$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.DOC_COMMENT, };
                }
                return $$res;
            });
    }
    public matchSINGLE_LINE_COMMENT($$dpth: number, $$cr?: ErrorTracker): Nullable<SINGLE_LINE_COMMENT> {
        return this.run<SINGLE_LINE_COMMENT>($$dpth,
            () => {
                let $$res: Nullable<SINGLE_LINE_COMMENT> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\/\/.*\n)`, $$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.SINGLE_LINE_COMMENT, };
                }
                return $$res;
            });
    }
    public matchNUMBER($$dpth: number, $$cr?: ErrorTracker): Nullable<NUMBER> {
        return this.regexAccept(String.raw`(?:-?(0x[0-9A-Fa-f]+)|\d+)`, $$dpth + 1, $$cr);
    }
    public matchCDATA($$dpth: number, $$cr?: ErrorTracker): Nullable<CDATA> {
        return this.matchRAW_CODE_FRAGMENT($$dpth + 1, $$cr);
    }
    public matchINCLUDE($$dpth: number, $$cr?: ErrorTracker): Nullable<INCLUDE> {
        return this.regexAccept(String.raw`(?:\#include[ \t]+"[\w\."\n]+")`, $$dpth + 1, $$cr);
    }
    public matchNATIVEID_TEXT($$dpth: number, $$cr?: ErrorTracker): Nullable<NATIVEID_TEXT> {
        return this.regexAccept(String.raw`(?:[a-zA-Z_<>&][0-9a-zA-Z_:<>*& ,]*)`, $$dpth + 1, $$cr);
    }
    public matchNATIVEID($$dpth: number, $$cr?: ErrorTracker): Nullable<NATIVEID> {
        return this.run<NATIVEID>($$dpth,
            () => {
                let $$res: Nullable<NATIVEID> = null;
                if (true
                    && this.matchNATIVEID_TEXT($$dpth + 1, $$cr) !== null
                    && ((this.matchNATIVEID_$0($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.NATIVEID, };
                }
                return $$res;
            });
    }
    public matchNATIVEID_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<NATIVEID_$0> {
        return this.run<NATIVEID_$0>($$dpth,
            () => {
                let $$res: Nullable<NATIVEID_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && this.matchNATIVEID_TEXT($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                    && this.loop<NATIVEID_TEXT>(() => this.matchNATIVEID_TEXT($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.NATIVEID_$0, };
                }
                return $$res;
            });
    }
    public matchIID($$dpth: number, $$cr?: ErrorTracker): Nullable<IID> {
        return this.regexAccept(String.raw`(?:[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12})`, $$dpth + 1, $$cr);
    }
    public matchIDENTIFIER($$dpth: number, $$cr?: ErrorTracker): Nullable<IDENTIFIER> {
        return this.choice<IDENTIFIER>([
            () => this.matchIDENTIFIER_1($$dpth + 1, $$cr),
            () => this.matchIDENTIFIER_2($$dpth + 1, $$cr),
            () => this.matchIDENTIFIER_3($$dpth + 1, $$cr),
            () => this.matchIDENTIFIER_4($$dpth + 1, $$cr),
            () => this.matchIDENTIFIER_5($$dpth + 1, $$cr),
            () => this.matchIDENTIFIER_6($$dpth + 1, $$cr),
        ]);
    }
    public matchIDENTIFIER_1($$dpth: number, $$cr?: ErrorTracker): Nullable<IDENTIFIER_1> {
        return this.matchIDENTIFIER_$0($$dpth + 1, $$cr);
    }
    public matchIDENTIFIER_2($$dpth: number, $$cr?: ErrorTracker): Nullable<IDENTIFIER_2> {
        return this.regexAccept(String.raw`(?:unsigned long long)`, $$dpth + 1, $$cr);
    }
    public matchIDENTIFIER_3($$dpth: number, $$cr?: ErrorTracker): Nullable<IDENTIFIER_3> {
        return this.regexAccept(String.raw`(?:unsigned short)`, $$dpth + 1, $$cr);
    }
    public matchIDENTIFIER_4($$dpth: number, $$cr?: ErrorTracker): Nullable<IDENTIFIER_4> {
        return this.regexAccept(String.raw`(?:unsigned long)`, $$dpth + 1, $$cr);
    }
    public matchIDENTIFIER_5($$dpth: number, $$cr?: ErrorTracker): Nullable<IDENTIFIER_5> {
        return this.regexAccept(String.raw`(?:long long)`, $$dpth + 1, $$cr);
    }
    public matchIDENTIFIER_6($$dpth: number, $$cr?: ErrorTracker): Nullable<IDENTIFIER_6> {
        return this.regexAccept(String.raw`(?:[a-zA-Z_][0-9a-zA-Z_]*)`, $$dpth + 1, $$cr);
    }
    public matchIDENTIFIER_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<IDENTIFIER_$0> {
        return this.run<IDENTIFIER_$0>($$dpth,
            () => {
                let $$res: Nullable<IDENTIFIER_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:Array)`, $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:<)`, $$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.matchIDENTIFIER($$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:>)`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.IDENTIFIER_$0, };
                }
                return $$res;
            });
    }
    public match_($$dpth: number, $$cr?: ErrorTracker): Nullable<_> {
        return this.regexAccept(String.raw`(?:[\s\n]+)`, $$dpth + 1, $$cr);
    }
    public matchRAW_CODE_FRAGMENT($$dpth: number, $$cr?: ErrorTracker): Nullable<RAW_CODE_FRAGMENT> {
        return this.regexAccept(String.raw`(?:%{\s*C\+\+(\n|.)*?%}\s*(C\+\+)?)`, $$dpth + 1, $$cr);
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchidlfile(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchidlfile(0);
        if (res)
            return {ast: res, errs: []};
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchidlfile(0, rec);
        const err = rec.getErr()
        return {ast: res, errs: err !== null ? [err] : []}
    }
    public mark(): PosInfo {
        return this.pos;
    }
    private loop<T>(func: $$RuleType<T>, star: boolean = false): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        for (;;) {
            const t = func();
            if (t === null) {
                break;
            }
            res.push(t);
        }
        if (star || res.length > 0) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn()
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, dpth: number, cr?: ErrorTracker): Nullable<string> {
        return this.run<string>(dpth,
            () => {
                const reg = new RegExp(match, "y");
                const mrk = this.mark();
                reg.lastIndex = mrk.overallPos;
                const res = this.tryConsume(reg);
                if(cr) {
                    cr.record(mrk, res, {
                        kind: "RegexMatch",
                        // We substring from 3 to len - 1 to strip off the
                        // non-capture group syntax added as a WebKit workaround
                        literal: match.substring(3, match.length - 1),
                        negated: this.negating,
                    });
                }
                return res;
            });
    }
    private tryConsume(reg: RegExp): Nullable<string> {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if(this.memoSafe && $scope$memoRes !== undefined) {
        this.reset($scope$memoRes[1]);
        return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if(this.memoSafe)
        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
    private match$EOF(et?: ErrorTracker): Nullable<{kind: ASTKinds.$EOF}> {
        const res: {kind: ASTKinds.$EOF} | null = this.finished() ? { kind: ASTKinds.$EOF } : null;
        if(et)
            et.record(this.mark(), res, { kind: "EOF", negated: this.negating });
        return res;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export interface ParseResult {
    ast: Nullable<idlfile>;
    errs: SyntaxErr[];
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export interface RegexMatch {
    readonly kind: "RegexMatch";
    readonly negated: boolean;
    readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
    public pos: PosInfo;
    public expmatches: MatchAttempt[];
    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;
    }
}
class ErrorTracker {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private regexset: Set<string> = new Set();
    private pmatches: MatchAttempt[] = [];
    public record(pos: PosInfo, result: any, att: MatchAttempt) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear()
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if(att.kind === "RegexMatch") {
                if(!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            } else {
                this.pmatches.push(att);
            }
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}